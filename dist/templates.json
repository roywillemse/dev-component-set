[{"name":"Alert","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    Alert,\n    AlertTitle\n  } = window.MaterialUI.Lab;\n  const {\n    Close\n  } = window.MaterialUI.Icons;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    IconButton\n  } = window.MaterialUI.Core;\n  const {\n    env,\n    useText\n  } = B;\n  const {\n    visible,\n    icon,\n    collapsable,\n    titleText,\n    bodyText,\n    allowTextServerResponse,\n    allowTitleServerResponse\n  } = options;\n  const title = useText(titleText);\n  const body = useText(bodyText);\n  const isDev = env === 'dev';\n  const [open, setOpen] = useState(visible);\n  const [titleFromServer, setTitleFromServer] = useState('');\n  const [textFromServer, setTextFromServer] = useState('');\n  useEffect(() => {\n    setOpen(visible);\n  }, [visible]);\n\n  const formatError = err => {\n    const errorMessage = err.graphQLErrors && err.graphQLErrors[0] && err.graphQLErrors[0].extensions.error || err.message;\n    const errorTitle = err.graphQLErrors && err.graphQLErrors[0] && err.graphQLErrors[0].message || err.networkError && err.networkError.message;\n    return [errorTitle, errorMessage];\n  };\n\n  const cleanUpMessage = message => message && JSON.stringify(message).replace(/[{}[\\]_\"]/g, ' ').replace(/[ ]+/g, ' ').replace(/ :/g, ':').replace(/ ,/g, ',').trim();\n\n  B.defineFunction('Show', showMessage => {\n    if (typeof showMessage === 'string') setTextFromServer(showMessage);\n\n    if (typeof showMessage === 'object' && showMessage !== null) {\n      const [errorTitle, errorMessage] = formatError(showMessage);\n      setTextFromServer(cleanUpMessage(errorMessage));\n      setTitleFromServer(errorTitle);\n    }\n\n    setOpen(true);\n  });\n  B.defineFunction('Hide', () => setOpen(false));\n  B.defineFunction('Show/Hide', () => setOpen(s => !s));\n  const AlertPanel = <Alert classes={{\n    root: classes.root\n  }} className={open || isDev ? '' : classes.hide} icon={icon !== 'None' ? React.createElement(Icons[icon]) : null} action={collapsable ? <IconButton color=\"inherit\" size=\"small\" onClick={() => {\n    setOpen(false);\n  }}>\n              <Close />\n            </IconButton> : null}>\n        {(title || titleFromServer) && <AlertTitle>\n            {titleFromServer && allowTitleServerResponse ? titleFromServer : title}\n          </AlertTitle>}\n        {textFromServer && allowTextServerResponse ? textFromServer : body}\n      </Alert>;\n  return isDev ? <div className={classes.wrapper}>{AlertPanel}</div> : AlertPanel;\n})()","styles":"B => theme => {\n  const style = new B.Styling(theme);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    root: {\n      '&.MuiAlert-standardSuccess': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important'],\n        backgroundColor: ({\n          options: {\n            background\n          }\n        }) => [style.getColor(background), '!important']\n      },\n      '& .MuiAlert-icon': {\n        color: ({\n          options: {\n            iconColor\n          }\n        }) => [style.getColor(iconColor), '!important']\n      },\n      border: ({\n        options: {\n          borderColor\n        }\n      }) => borderColor !== 'Transparent' ? `0.0625rem solid ${style.getColor(borderColor)}` : 'none',\n      justifyContent: ({\n        options: {\n          horizontalAlignment\n        }\n      }) => horizontalAlignment,\n      alignItems: ({\n        options: {\n          verticalAlignment\n        }\n      }) => verticalAlignment,\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3])\n    },\n    hide: {\n      display: 'none !important'\n    }\n  };\n}","functions":["Show","Hide","Show/Hide"],"triggers":[]},{"name":"AppBar","type":"BODY_COMPONENT","allowedTypes":["CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    AppBar,\n    Toolbar,\n    IconButton,\n    Typography,\n    Menu\n  } = window.MaterialUI.Core;\n  const {\n    Menu: MenuIcon\n  } = window.MaterialUI.Icons;\n  const {\n    position,\n    title,\n    logoSource,\n    endpoint,\n    appBarVariant,\n    toolbarVariant,\n    square,\n    elevation\n  } = options;\n  const {\n    Link,\n    env,\n    useText\n  } = B;\n  const isDev = env === 'dev';\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = !!anchorEl;\n  const titleText = useText(title);\n\n  const handleMenu = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const logo = useText(logoSource);\n  const LogoCmp = logo && <img src={logo} className={classes.logo} alt=\"\" />;\n  const LogoComponent = endpoint.id ? // eslint-disable-next-line jsx-a11y/anchor-is-valid\n  <Link endpoint={endpoint}>{LogoCmp}</Link> : LogoCmp;\n  const AppBarComponent = <AppBar position={isDev ? 'static' : position} classes={{\n    root: classes.root\n  }} variant={appBarVariant} square={square} elevation={appBarVariant === 'flat' ? 0 : elevation}>\n        <Toolbar variant={toolbarVariant} classes={{\n      root: classes.toolbar\n    }}>\n          {logo.length > 0 && LogoComponent}\n          <Typography variant=\"h6\" noWrap className={classes.title} component={endpoint.id && Link} endpoint={endpoint.id && endpoint}>\n            {titleText}\n          </Typography>\n          <div className={classes.spacer} />\n          {!isDev && !!children.length ? <>\n              <div className={classes.collapsed}>\n                <IconButton color=\"inherit\" onClick={handleMenu}>\n                  <MenuIcon />\n                </IconButton>\n                <Menu anchorEl={anchorEl} open={open} keepMounted onClose={handleClose} classes={{\n            paper: classes.root,\n            list: classes.list\n          }}>\n                  {children}\n                </Menu>\n              </div>\n              <div className={classes.uncollapsed}>{children}</div>\n            </> : <div>{children}</div>}\n        </Toolbar>\n      </AppBar>;\n  return isDev ? <div>{AppBarComponent}</div> : AppBarComponent;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    root: {\n      height: ({\n        options: {\n          height\n        }\n      }) => height,\n      backgroundColor: ({\n        options: {\n          backgroundColor\n        }\n      }) => [style.getColor(backgroundColor), '!important'],\n      color: ({\n        options: {\n          color\n        }\n      }) => [style.getColor(color), '!important'],\n      zIndex: '1201 !important'\n    },\n    logo: {\n      width: ({\n        options: {\n          logoWidth\n        }\n      }) => logoWidth\n    },\n    toolbar: {\n      flexDirection: ({\n        options: {\n          alignItems\n        }\n      }) => alignItems === 'right' ? 'row' : 'row-reverse'\n    },\n    menuButton: {\n      marginLeft: style.getSpacing('M'),\n      marginRight: style.getSpacing('M')\n    },\n    title: {\n      textDecoration: 'none',\n      color: ({\n        options: {\n          color\n        }\n      }) => [style.getColor(color), '!important']\n    },\n    spacer: {\n      flexGrow: 1\n    },\n    list: {\n      '& > *': {\n        display: 'block'\n      }\n    },\n    collapsed: {\n      display: 'block',\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        display: 'none'\n      }\n    },\n    uncollapsed: {\n      display: 'none',\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        display: 'block'\n      }\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"AutoComplete","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    disabled,\n    error,\n    placeholder,\n    variant,\n    type,\n    size,\n    fullWidth,\n    margin,\n    helperText,\n    model,\n    multiple,\n    freeSolo,\n    searchProperty,\n    valueProperty,\n    closeOnSelect,\n    renderCheckboxes,\n    showError,\n    hideLabel,\n    customModelAttribute: customModelAttributeObj,\n    property,\n    nameAttribute,\n    order,\n    orderBy\n  } = options;\n  const {\n    Autocomplete\n  } = window.MaterialUI.Lab;\n  const {\n    TextField,\n    CircularProgress,\n    Chip,\n    Checkbox\n  } = window.MaterialUI.Core;\n  const {\n    ExpandMore,\n    Close,\n    CheckBox,\n    CheckBoxOutlineBlank\n  } = window.MaterialUI.Icons;\n  const {\n    useText,\n    getProperty,\n    getCustomModelAttribute,\n    useAllQuery,\n    env\n  } = B;\n  const isDev = env === 'dev';\n  const displayError = showError === 'built-in';\n  const placeholderText = useText(placeholder);\n  const helper = useText(helperText);\n  const nameAttributeValue = useText(nameAttribute);\n  const {\n    id: customModelAttributeId,\n    label = [],\n    value: defaultValue = []\n  } = customModelAttributeObj;\n  const customModelAttribute = getCustomModelAttribute(customModelAttributeId);\n  const {\n    name: customModelAttributeName,\n    validations: {\n      required\n    } = {}\n  } = customModelAttribute || {};\n  const {\n    kind,\n    values: listValues\n  } = getProperty(property) || {};\n  const [currentValue, setCurrentValue] = useState(useText(defaultValue));\n  const [currentLabel, setCurrentLabel] = useState('');\n  const labelText = useText(label);\n  const textFieldProps = {\n    disabled,\n    variant,\n    label: !hideLabel && labelText,\n    fullWidth,\n    size,\n    type,\n    required,\n    error,\n    placeholder: placeholderText,\n    margin,\n    helperText: helper,\n    classes: {\n      root: classes.formControl\n    }\n  };\n  const searchProp = getProperty(searchProperty) || {};\n  const valueProp = getProperty(valueProperty) || {};\n  const [searchParam, setSearchParam] = useState('');\n  const [debouncedSearchParam, setDebouncedSearchParam] = useState('');\n  const {\n    filter\n  } = options;\n  const hasSearch = searchProp && searchProp.id;\n  const hasValue = valueProp && valueProp.id;\n\n  if (hasSearch && debouncedSearchParam !== '') {\n    filter[searchProp.id] = {\n      regex: debouncedSearchParam\n    };\n  } else if (hasSearch && debouncedSearchParam === '') {\n    delete filter[searchProp.id];\n  }\n\n  const hasNoProp = !hasSearch || !hasValue;\n  const reason = hasNoProp ? 'No property selected' : 'No data';\n  let inputProps = {\n    inputProps: {\n      tabIndex: isDev && -1\n    },\n    endAdornment: <>\n          {currentValue && <Close />}\n          {!freeSolo && <ExpandMore />}\n        </>\n  };\n\n  if (multiple && currentValue) {\n    inputProps = { ...inputProps,\n      startAdornment: <Chip label={currentValue} onDelete={() => {}} />\n    };\n  }\n\n  const valueArray = currentValue ? currentValue.toString().split(',') : [];\n  const rawFilter = {\n    rawFilter: {\n      [valueProp.name]: {\n        in: valueArray\n      }\n    }\n  };\n  const [useFilter, setUseFilter] = useState(currentValue ? rawFilter : filter);\n\n  const resetFilter = () => {\n    setUseFilter({\n      filter\n    });\n  };\n\n  const orderByArray = [orderBy].flat();\n  const sort = !isDev && orderBy ? orderByArray.reduceRight((acc, orderByProperty, index) => {\n    const prop = getProperty(orderByProperty);\n    return index === orderByArray.length - 1 ? {\n      [prop.name]: order.toUpperCase()\n    } : {\n      [prop.name]: acc\n    };\n  }, {}) : {};\n  const {\n    loading,\n    error: err,\n    data,\n    refetch\n  } = model && useAllQuery(model, { ...useFilter,\n    skip: 0,\n    take: 50,\n    variables: { ...(orderBy ? {\n        sort: {\n          relation: sort\n        }\n      } : {})\n    }\n  });\n  useEffect(() => {\n    if (!isDev && data) {\n      resetFilter();\n    }\n  }, [data]);\n  useEffect(() => {\n    if (isDev) {\n      setCurrentValue(useText(defaultValue));\n    }\n  }, [isDev, defaultValue]);\n  B.defineFunction('Clear', () => setCurrentValue(null));\n  B.defineFunction('Refetch', () => refetch());\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedSearchParam(searchParam);\n    }, 1000);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [searchParam]);\n  const mounted = useRef(false);\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n  useEffect(() => {\n    if (mounted.current && loading) {\n      B.triggerEvent('onLoad', loading);\n    }\n  }, [loading]);\n\n  if (err && !displayError) {\n    B.triggerEvent('onError', err);\n  }\n\n  const {\n    results\n  } = data || {};\n\n  if (results) {\n    if (results.length > 0) {\n      B.triggerEvent('onSuccess', results);\n    } else {\n      B.triggerEvent('onNoResults');\n    }\n  }\n\n  const onChange = (_, newValue) => {\n    if (!valueProp || !newValue) {\n      setCurrentValue(newValue);\n      setCurrentLabel(newValue);\n      B.triggerEvent('OnChange');\n      return;\n    }\n\n    let newCurrentValue = newValue[valueProp.name] || newValue;\n\n    if (typeof newValue === 'string') {\n      if (currentLabel === newValue) {\n        newCurrentValue = currentValue;\n      }\n    } else if (searchProp) {\n      const newLabelValue = newValue[searchProp.name];\n      setCurrentLabel(newLabelValue);\n    }\n\n    if (multiple) {\n      newCurrentValue = newValue.map(rec => rec[valueProp.name] || rec);\n    }\n\n    setCurrentValue(newCurrentValue);\n    B.triggerEvent('OnChange');\n  };\n\n  const getDefaultValue = React.useCallback(() => {\n    if (!currentValue || !results) {\n      return multiple ? [] : null;\n    }\n\n    let currentRecordsKeys = currentValue;\n\n    if (!Array.isArray(currentValue)) {\n      currentRecordsKeys = multiple ? currentValue.toString().split(',') : [currentValue];\n    }\n\n    const currentRecords = results.reduce((acc, cv) => {\n      const searchStr = cv[valueProp.name].toString();\n      const search = cv[valueProp.name];\n\n      if (currentRecordsKeys.indexOf(searchStr) > -1 || currentRecordsKeys.indexOf(search) > -1) {\n        acc.push(cv);\n      }\n\n      return acc;\n    }, []);\n    const singleRecord = currentRecords[0] ? { ...currentRecords[0]\n    } : null;\n    return multiple ? currentRecords : singleRecord;\n  }, [results]);\n  const defaultRecord = getDefaultValue();\n  useEffect(() => {\n    if (!multiple && defaultRecord && searchProp) {\n      setCurrentLabel(defaultRecord[searchProp.name]);\n    }\n  }, [defaultRecord]);\n\n  const renderLabel = option => {\n    const optionLabel = option[searchProp.name];\n    return optionLabel !== undefined && optionLabel === '' ? '-- empty --' : optionLabel && optionLabel.toString() || option;\n  };\n\n  const renderOption = (option, {\n    selected\n  }) => <>\n        <Checkbox classes={{\n      root: classes.checkbox\n    }} icon={<CheckBoxOutlineBlank fontSize=\"small\" />} checkedIcon={<CheckBox fontSize=\"small\" />} style={{\n      marginRight: 8\n    }} checked={selected} />\n        {renderLabel(option)}\n      </>;\n\n  if (isDev) {\n    return <div className={classes.root}>\n          <TextField {...textFieldProps} value={multiple ? '' : currentValue} InputProps={inputProps} />\n        </div>;\n  }\n\n  if (kind === 'list' || kind === 'LIST') {\n    const onPropertyListChange = (_, newValue) => {\n      setCurrentValue(newValue);\n      B.triggerEvent('OnChange');\n    };\n\n    const selectValues = listValues.map(({\n      value\n    }) => value).filter(e => e.startsWith(searchParam)) || [];\n    return <Autocomplete id=\"combo-box-demo\" options={selectValues} value={currentValue} PopoverProps={{\n      classes: {\n        root: classes.popover\n      }\n    }} onInputChange={(_, inputValue) => {\n      setSearchParam(inputValue);\n    }} onChange={onPropertyListChange} getOptionLabel={option => option} renderInput={params => <TextField {...params} {...textFieldProps} name={nameAttributeValue || customModelAttributeName} key={currentValue ? 'hasValue' : 'isEmpty'} required={required && !currentValue} InputProps={{ ...params.InputProps,\n      endAdornment: params.InputProps.endAdornment\n    }} />} />;\n  }\n\n  if (!model) {\n    return <div className={classes.root}>\n          <TextField {...textFieldProps} value={multiple ? '' : currentValue} InputProps={inputProps} />\n        </div>;\n  }\n\n  if (err && displayError) return <span>{err.message}</span>;\n\n  if (!data || hasNoProp) {\n    return <TextField {...textFieldProps} defaultValue={reason} disabled InputProps={{\n      endAdornment: <CircularProgress color=\"inherit\" size={20} />\n    }} />;\n  }\n\n  return <Autocomplete multiple={multiple} freeSolo={freeSolo} autoSelect={freeSolo} options={results} defaultValue={defaultRecord} getOptionLabel={renderLabel} getOptionSelected={(option, value) => value.id === option.id} PopoverProps={{\n    classes: {\n      root: classes.popover\n    }\n  }} onInputChange={(_, inputValue) => {\n    if (!freeSolo) {\n      return;\n    }\n\n    setSearchParam(inputValue);\n  }} onChange={onChange} disableCloseOnSelect={!closeOnSelect} renderOption={renderCheckboxes && renderOption} renderInput={params => <>\n            <input type=\"hidden\" key={currentValue ? 'hasValue' : 'isEmpty'} name={nameAttributeValue || customModelAttributeName} value={currentValue} />\n            <TextField {...params} {...textFieldProps} required={required && (!currentValue || currentValue.length === 0)} loading={loading} InputProps={{ ...params.InputProps,\n      endAdornment: <>\n                    {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                    {params.InputProps.endAdornment}\n                  </>\n    }} />\n          </>} />;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  const {\n    color: colorFunc\n  } = B;\n\n  const getOpacColor = (col, val) => colorFunc.alpha(col, val);\n\n  return {\n    root: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    checkbox: {\n      color: ({\n        options: {\n          checkboxColor\n        }\n      }) => [style.getColor(checkboxColor), '!important'],\n      '&.MuiCheckbox-root.Mui-checked:hover, &.MuiIconButton-root:hover': {\n        backgroundColor: ({\n          options: {\n            checkboxColor\n          }\n        }) => [getOpacColor(style.getColor(checkboxColor), 0.04), '!important']\n      }\n    },\n    formControl: {\n      '& > label': {\n        color: ({\n          options: {\n            labelColor\n          }\n        }) => [style.getColor(labelColor), '!important'],\n        zIndex: ({\n          options: {\n            variant\n          }\n        }) => variant === 'standard' ? 1 : null,\n        '&.Mui-focused': {\n          color: ({\n            options: {\n              borderFocusColor\n            }\n          }) => [style.getColor(borderFocusColor), '!important']\n        },\n        '&.Mui-error': {\n          color: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      },\n      '& > p': {\n        color: ({\n          options: {\n            helperColor\n          }\n        }) => [style.getColor(helperColor), '!important'],\n        '&.Mui-error': {\n          color: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        }\n      },\n      '& .MuiInputBase-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important'],\n        backgroundColor: ({\n          options: {\n            backgroundColor\n          }\n        }) => [style.getColor(backgroundColor), '!important'],\n        '&:hover': {\n          '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n            borderColor: ({\n              options: {\n                borderHoverColor\n              }\n            }) => [style.getColor(borderHoverColor), '!important']\n          }\n        },\n        '&.Mui-focused, &.Mui-focused:hover': {\n          '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n            borderColor: ({\n              options: {\n                borderFocusColor\n              }\n            }) => [style.getColor(borderFocusColor), '!important']\n          }\n        },\n        '& fieldset': {\n          top: ({\n            options: {\n              hideLabel\n            }\n          }) => hideLabel ? 0 : null\n        },\n        '& legend': {\n          display: ({\n            options: {\n              hideLabel\n            }\n          }) => hideLabel ? ['none', '!important'] : null\n        },\n        '& input': {\n          '&::placeholder': {\n            color: ({\n              options: {\n                placeholderColor\n              }\n            }) => [style.getColor(placeholderColor), '!important']\n          }\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        },\n        '& .MuiChip-root': {\n          color: ({\n            options: {\n              textColorChip\n            }\n          }) => [style.getColor(textColorChip), '!important'],\n          backgroundColor: ({\n            options: {\n              backgroundColorChip\n            }\n          }) => [style.getColor(backgroundColorChip), '!important']\n        }\n      },\n      '& .MuiIconButton-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important']\n      },\n      '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n        borderColor: ({\n          options: {\n            borderColor\n          }\n        }) => [style.getColor(borderColor), '!important']\n      },\n      '& .MuiInput-underline, & .MuiFilledInput-underline': {\n        '&::before, &::after': {\n          borderColor: ({\n            options: {\n              borderColor\n            }\n          }) => [style.getColor(borderColor), '!important']\n        },\n        '&:hover': {\n          '&::before, &::after': {\n            borderColor: ({\n              options: {\n                borderHoverColor\n              }\n            }) => [style.getColor(borderHoverColor), '!important']\n          }\n        },\n        '&.Mui-focused::before, &.Mui-focused::after, &.Mui-focused:hover::before, &.Mui-focused:hover::after': {\n          borderColor: ({\n            options: {\n              borderFocusColor\n            }\n          }) => [style.getColor(borderFocusColor), '!important']\n        }\n      },\n      '& .MuiInputBase-root.Mui-error, & .MuiInputBase-root.Mui-error:hover, & .MuiInputBase-root.Mui-error.Mui-focused, & .MuiInputBase-root.Mui-error.Mui-focused:hover': {\n        '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n          borderColor: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        },\n        '&.MuiInput-underline, &.MuiFilledInput-underline': {\n          '&::before, &::after': {\n            borderColor: ({\n              options: {\n                errorColor\n              }\n            }) => [style.getColor(errorColor), '!important']\n          },\n          '&:hover': {\n            '&::before, &::after': {\n              borderColor: ({\n                options: {\n                  errorColor\n                }\n              }) => [style.getColor(errorColor), '!important']\n            }\n          },\n          '&.Mui-focused::before, &.Mui-focused::after, &.Mui-focused:hover::before, &.Mui-focused:hover::after': {\n            borderColor: ({\n              options: {\n                errorColor\n              }\n            }) => [style.getColor(errorColor), '!important']\n          }\n        }\n      }\n    }\n  };\n}","functions":["Clear","Refetch"],"triggers":["onLoad","onError","onSuccess","onNoResults","OnChange","OnChange","OnChange"]},{"name":"Avatar","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    Avatar\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    env,\n    useText\n  } = B;\n  const {\n    type,\n    imgUrl,\n    imgAlt,\n    letter,\n    icon,\n    variant,\n    width,\n    height\n  } = options;\n  const isDev = env === 'dev';\n  const isIcon = type === 'icon';\n  const isLetter = type === 'letter';\n  const isImage = type === 'img';\n  const imgSrc = useText(imgUrl);\n  const altText = useText(imgAlt);\n  const IconComponent = React.createElement(Icons[icon]);\n  const styleOptions = {\n    width,\n    height\n  };\n  const AvatarComponent = <Avatar variant={variant} alt={isImage && altText} src={isImage && imgSrc} className={classes.avatar} style={styleOptions}>\n        {isLetter && useText(letter)}\n        {isIcon && IconComponent}\n      </Avatar>;\n  return isDev ? <div>{AvatarComponent}</div> : AvatarComponent;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const convertSizes = sizes => sizes.map(size => style.getSpacing(size)).join(' ');\n\n  return {\n    avatar: {\n      margin: ({\n        options: {\n          margin\n        }\n      }) => convertSizes(margin),\n      color: ({\n        options: {\n          textColor\n        }\n      }) => [style.getColor(textColor), '!important'],\n      backgroundColor: ({\n        options: {\n          backgroundColor\n        }\n      }) => [style.getColor(backgroundColor), '!important'],\n      fontWeight: ({\n        options: {\n          fontWeight\n        }\n      }) => fontWeight,\n      '&.MuiAvatar-root': {\n        fontSize: ({\n          options: {\n            fontSize\n          }\n        }) => fontSize\n      }\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"Box","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    env,\n    useText\n  } = B;\n  const {\n    Box\n  } = window.MaterialUI.Core;\n  const {\n    alignment,\n    valignment,\n    transparent,\n    backgroundColor,\n    borderColor,\n    backgroundUrl\n  } = options;\n  const isDev = env === 'dev';\n  const hasBackgroundColor = backgroundColor !== 'Transparent';\n  const hasBorderColor = borderColor !== 'Transparent';\n  const hasBackgroundImage = useText(backgroundUrl) !== '';\n  const isEmpty = isDev && children.length === 0;\n  const isPristine = isEmpty && !hasBackgroundColor && !hasBorderColor && !hasBackgroundImage;\n  const isFlex = alignment !== 'none' || valignment !== 'none';\n  const opac = transparent ? 0 : 1;\n  const [opacity, setOpacity] = useState(opac);\n  const boxOptions = {\n    display: isFlex && 'flex',\n    justifyContent: alignment !== 'none' && alignment,\n    flexDirection: isFlex && 'row',\n    alignItems: valignment !== 'none' && valignment\n  };\n\n  const handleClick = () => {\n    B.triggerEvent('OnClick');\n  };\n\n  const handleMouseEnter = () => {\n    B.triggerEvent('OnMouseEnter');\n  };\n\n  const handleMouseLeave = () => {\n    B.triggerEvent('OnMouseLeave');\n  };\n\n  const BoxCmp = <Box className={[classes.root, isEmpty ? classes.empty : '', isPristine ? classes.pristine : '', !isPristine ? classes.background : '', !isPristine ? classes.border : ''].join(' ')} {...boxOptions} onClick={handleClick} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave} style={{\n    opacity\n  }}>\n        {isEmpty ? 'Box' : children}\n      </Box>;\n  useEffect(() => {\n    if (isDev) {\n      setOpacity(transparent ? 0 : 1);\n    }\n  }, [isDev, transparent]);\n  B.defineFunction('ToOpaque', () => setOpacity(1));\n  B.defineFunction('ToSemiTransparent', () => setOpacity(0.5));\n  B.defineFunction('ToTransparent', () => setOpacity(0));\n  return isDev ? <div className={classes.wrapper}>{BoxCmp}</div> : BoxCmp;\n})()","styles":"B => theme => {\n  const style = new B.Styling(theme);\n  const {\n    color: colorFunc\n  } = B;\n  const isDev = B.env === 'dev';\n\n  const getColorAlpha = (col, val) => colorFunc.alpha(col, val);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    wrapper: {\n      display: 'flex',\n      flexShrink: ({\n        options: {\n          stretch\n        }\n      }) => stretch ? 1 : 0,\n      flexGrow: ({\n        options: {\n          stretch\n        }\n      }) => stretch ? 1 : 0,\n      height: ({\n        options: {\n          height\n        }\n      }) => height,\n      minHeight: 0,\n      flexBasis: 'auto',\n      flexDirection: 'column',\n      alignContent: 'stretch',\n      boxSizing: 'border-box',\n      position: ({\n        options: {\n          position\n        }\n      }) => position === 'fixed' && isDev ? 'absolute' : position,\n      top: ({\n        options: {\n          top\n        }\n      }) => top,\n      right: ({\n        options: {\n          right\n        }\n      }) => right,\n      bottom: ({\n        options: {\n          bottom\n        }\n      }) => bottom,\n      left: ({\n        options: {\n          left\n        }\n      }) => left,\n      width: ({\n        options: {\n          width\n        }\n      }) => width,\n      '& > div': {\n        flexShrink: [1, '!important'],\n        flexGrow: [1, '!important']\n      }\n    },\n    root: {\n      boxSizing: 'border-box',\n      height: ({\n        options: {\n          height\n        }\n      }) => isDev ? '100%' : height,\n      minHeight: 0,\n      position: ({\n        options: {\n          position\n        }\n      }) => !isDev && position || 'relative',\n      top: ({\n        options: {\n          top\n        }\n      }) => !isDev && top,\n      right: ({\n        options: {\n          right\n        }\n      }) => !isDev && right,\n      bottom: ({\n        options: {\n          bottom\n        }\n      }) => !isDev && bottom,\n      left: ({\n        options: {\n          left\n        }\n      }) => !isDev && left,\n      width: ({\n        options: {\n          width\n        }\n      }) => !isDev && width,\n      flexShrink: ({\n        options: {\n          stretch\n        }\n      }) => stretch ? 1 : 0,\n      flexGrow: ({\n        options: {\n          stretch\n        }\n      }) => stretch ? 1 : 0,\n      transition: 'opacity 0.5s ease-out',\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      paddingTop: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[0]),\n      paddingRight: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[1]),\n      paddingBottom: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[2]),\n      paddingLeft: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[3]),\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait'),\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Portrait'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Portrait'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Portrait'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape'),\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Landscape'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Landscape'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Landscape'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop'),\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Desktop'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Desktop'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Desktop'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Desktop')\n      }\n    },\n    background: {\n      backgroundColor: ({\n        options: {\n          backgroundColor,\n          backgroundColorAlpha\n        }\n      }) => backgroundColor === 'Transparent' ? style.getColor(backgroundColor) : getColorAlpha(style.getColor(backgroundColor), backgroundColorAlpha / 100),\n      backgroundImage: ({\n        options: {\n          backgroundUrl\n        }\n      }) => {\n        const image = B.useText(backgroundUrl);\n        return image && `url(\"${image}\")`;\n      },\n      backgroundSize: ({\n        options: {\n          backgroundSize\n        }\n      }) => backgroundSize,\n      backgroundPosition: ({\n        options: {\n          backgroundPosition\n        }\n      }) => backgroundPosition,\n      backgroundRepeat: ({\n        options: {\n          backgroundRepeat\n        }\n      }) => backgroundRepeat\n    },\n    border: {\n      borderWidth: ({\n        options: {\n          borderWidth,\n          borderStyle,\n          borderColor\n        }\n      }) => borderWidth && borderStyle && borderColor ? borderWidth : 0,\n      borderStyle: ({\n        options: {\n          borderStyle\n        }\n      }) => borderStyle,\n      borderColor: ({\n        options: {\n          borderColor\n        }\n      }) => style.getColor(borderColor),\n      borderRadius: ({\n        options: {\n          borderRadius\n        }\n      }) => borderRadius\n    },\n    empty: {\n      display: ['flex', '!important'],\n      justifyContent: ['center', '!important'],\n      alignItems: 'center',\n      height: ['2.5rem', '!important'],\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    }\n  };\n}","functions":["ToOpaque","ToSemiTransparent","ToTransparent"],"triggers":["OnClick","OnMouseEnter","OnMouseLeave"]},{"name":"BreadcrumbItem","type":"BREADCRUMB_ITEM","allowedTypes":[],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    Link,\n    useText,\n    env\n  } = B;\n  const isDev = env === 'dev';\n  const {\n    Typography\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    endpoint,\n    breadcrumbContent,\n    icon,\n    iconPosition\n  } = options;\n  const content = useText(breadcrumbContent);\n  const hasEndpoint = endpoint && endpoint.id !== '';\n  const isEmpty = breadcrumbContent.length === 0 && icon === 'None';\n  const isPristine = isEmpty && isDev;\n  const PlaceHolder = <div className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')} />;\n  const IconComponent = icon !== 'None' && React.createElement(Icons[icon], {\n    className: classes[`icon${iconPosition}`]\n  });\n  const ItemContent = <>\n        {iconPosition === 'start' && IconComponent}\n        {content}\n        {iconPosition === 'end' && IconComponent}\n      </>;\n  const BreadcrumbChildren = isEmpty ? PlaceHolder : ItemContent;\n  const breadcrumbItem = hasEndpoint ? // eslint-disable-next-line jsx-a11y/anchor-is-valid\n  <Link className={[classes.content, classes.link].join(' ')} endpoint={endpoint}>\n        {BreadcrumbChildren}\n      </Link> : <Typography className={classes.content}>{BreadcrumbChildren}</Typography>;\n  return isDev ? <div className={classes.root}>{breadcrumbItem}</div> : breadcrumbItem;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    root: {\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    content: {\n      display: 'flex',\n      color: ({\n        options: {\n          textColor\n        }\n      }) => style.getColor(textColor)\n    },\n    link: {\n      textDecoration: 'none',\n      '&:hover': {\n        textDecoration: 'underline'\n      }\n    },\n    iconstart: {\n      marginRight: ({\n        options: {\n          breadcrumbContent\n        }\n      }) => breadcrumbContent.length > 0 && style.getSpacing('M', 'Mobile')\n    },\n    iconend: {\n      marginLeft: ({\n        options: {\n          breadcrumbContent\n        }\n      }) => breadcrumbContent.length > 0 && style.getSpacing('M', 'Mobile')\n    },\n    empty: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '1rem',\n      height: '100%',\n      width: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5',\n      '&::after': {\n        content: '\"Breadcrumb Item\"'\n      }\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"Breadcrumbs","type":"CONTAINER_COMPONENT","allowedTypes":["BREADCRUMB_ITEM"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const isDev = B.env === 'dev';\n  const {\n    Breadcrumbs\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    separatorType,\n    separatorText,\n    separatorIcon,\n    maxItems,\n    itemsAfterCollapse,\n    itemsBeforeCollapse\n  } = options;\n  const isEmpty = children.length === 0;\n  const isPristine = isEmpty && isDev;\n  const PlaceHolder = <div className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')} />;\n  let separator = separatorText;\n\n  if (separatorType === 'icon') {\n    separator = React.createElement(Icons[separatorIcon]);\n  }\n\n  const breadcrumbsOptions = {\n    separator,\n    itemsAfterCollapse: parseInt(itemsAfterCollapse, 10),\n    itemsBeforeCollapse: parseInt(itemsBeforeCollapse, 10)\n  };\n\n  if (!isDev && maxItems !== '0') {\n    breadcrumbsOptions.maxItems = parseInt(maxItems, 10);\n  }\n\n  const breadcrumbs = children.length > 0 ? <Breadcrumbs {...breadcrumbsOptions} aria-label=\"breadcrumb\">\n          {children}\n        </Breadcrumbs> : PlaceHolder;\n  return isDev ? <div>{breadcrumbs}</div> : breadcrumbs;\n})()","styles":"() => () => ({\n  empty: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '4rem',\n    height: '100%',\n    width: '100%',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    boxSizing: 'border-box'\n  },\n  pristine: {\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5',\n    '&::after': {\n      content: '\"Breadcrumbs\"'\n    }\n  }\n})","functions":[],"triggers":[]},{"name":"Button","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    Button,\n    IconButton,\n    CircularProgress\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    variant,\n    disabled,\n    fullWidth,\n    size,\n    icon,\n    iconPosition,\n    linkType,\n    linkTo,\n    linkToExternal,\n    type,\n    visible,\n    actionId,\n    buttonText,\n    actionModel\n  } = options;\n  const {\n    env,\n    useText,\n    useAction,\n    getModel,\n    getIdProperty,\n    useProperty\n  } = B;\n  const isDev = env === 'dev';\n  const isAction = linkType === 'action';\n  const hasLink = linkTo && linkTo.id !== '';\n  const hasExternalLink = linkToExternal && linkToExternal.id !== '';\n  const linkToExternalVariable = linkToExternal && useText(linkToExternal) || '';\n  const isIcon = variant === 'icon';\n  const buttonContent = useText(buttonText);\n  const [isVisible, setIsVisible] = useState(visible);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    name: modelName\n  } = !isDev && actionModel && getModel(actionModel);\n  const propertyId = !isDev && actionModel && getIdProperty(actionModel);\n  const recordId = propertyId && useProperty(propertyId);\n\n  const camelToSnakeCase = str => str[0].toLowerCase() + str.slice(1, str.length).replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n\n  const input = { ...(recordId && {\n      [camelToSnakeCase(modelName)]: {\n        variable_id: recordId\n      }\n    })\n  };\n  const [actionCallback, {\n    loading\n  }] = isAction && useAction(actionId, {\n    variables: {\n      input\n    },\n\n    onCompleted(data) {\n      B.triggerEvent('onActionSuccess', data.actionb5);\n    },\n\n    onError(error) {\n      B.triggerEvent('onActionError', error);\n    }\n\n  }) || [() => {}, {\n    loading: false\n  }];\n  useEffect(() => {\n    setIsVisible(visible);\n  }, [visible]);\n  B.defineFunction('Show', () => setIsVisible(true));\n  B.defineFunction('Hide', () => setIsVisible(false));\n  B.defineFunction('Show/Hide', () => setIsVisible(s => !s));\n  B.defineFunction('Load', () => setIsLoading(true));\n  B.defineFunction('Loaded', () => setIsLoading(false));\n  B.defineFunction('Load/Loaded', () => setIsLoading(l => !l));\n  useEffect(() => {\n    if (loading) {\n      B.triggerEvent('onActionLoad', loading);\n    }\n  }, [loading]);\n  const generalProps = {\n    disabled: disabled || isLoading || loading,\n    size,\n    tabindex: isDev && -1,\n    href: linkType === 'external' && hasExternalLink ? linkToExternalVariable : undefined,\n    component: linkType === 'internal' && hasLink ? B.Link : undefined,\n    endpoint: linkType === 'internal' && hasLink ? linkTo : undefined\n  };\n  const iconButtonProps = { ...generalProps,\n    classes: {\n      root: classes.root\n    }\n  };\n  const buttonProps = { ...generalProps,\n    fullWidth,\n    variant,\n    classes: {\n      root: classes.root,\n      contained: classes.contained,\n      outlined: classes.outlined\n    },\n    className: !!buttonContent && classes.empty,\n    type: isDev ? 'button' : type\n  };\n  const compProps = isIcon ? iconButtonProps : buttonProps;\n  const BtnComp = isIcon ? IconButton : Button;\n  const showIndicator = !isIcon && (isLoading || loading);\n  const ButtonComponent = <BtnComp {...compProps} startIcon={!isIcon && icon !== 'None' && iconPosition === 'start' && React.createElement(Icons[icon])} endIcon={!isIcon && icon !== 'None' && iconPosition === 'end' && React.createElement(Icons[icon])} onClick={event => {\n    event.stopPropagation();\n    actionCallback();\n  }}>\n        {isIcon && React.createElement(Icons[icon === 'None' ? 'Error' : icon], {\n      fontSize: size\n    })}\n        {!isIcon && buttonContent}\n        {showIndicator && <CircularProgress size={16} className={classes.loader} />}\n      </BtnComp>;\n\n  if (isDev) {\n    return <div className={classes.wrapper}>{ButtonComponent}</div>;\n  }\n\n  return isVisible ? ButtonComponent : <></>;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    wrapper: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      width: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth && '100%',\n      minHeight: '1rem',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    root: {\n      color: ({\n        options: {\n          variant,\n          textColor,\n          background\n        }\n      }) => [style.getColor(variant === 'icon' ? background : textColor), '!important'],\n      '&.MuiButton-contained.Mui-disabled': {\n        color: ['rgba(0, 0, 0, 0.26)', '!important'],\n        boxShadow: ['none', '!important'],\n        backgroundColor: ['rgba(0, 0, 0, 0.12)', '!important']\n      },\n      width: ({\n        options: {\n          fullWidth,\n          outerSpacing\n        }\n      }) => {\n        if (!fullWidth) return 'auto';\n        const marginRight = getSpacing(outerSpacing[1]);\n        const marginLeft = getSpacing(outerSpacing[3]);\n        return `calc(100% - ${marginRight} - ${marginLeft})`;\n      },\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      '&.MuiButton-root, &.MuiIconButton-root': {\n        [`@media ${B.mediaMinWidth(600)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Portrait');\n            const marginLeft = getSpacing(outerSpacing[3], 'Portrait');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Portrait'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Portrait'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Portrait'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Portrait')\n        },\n        [`@media ${B.mediaMinWidth(960)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Landscape');\n            const marginLeft = getSpacing(outerSpacing[3], 'Landscape');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Landscape'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Landscape'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Landscape'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Landscape')\n        },\n        [`@media ${B.mediaMinWidth(1280)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Desktop');\n            const marginLeft = getSpacing(outerSpacing[3], 'Desktop');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Desktop'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Desktop'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Desktop'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Desktop')\n        }\n      }\n    },\n    contained: {\n      backgroundColor: ({\n        options: {\n          background\n        }\n      }) => [style.getColor(background), '!important']\n    },\n    outlined: {\n      borderColor: ({\n        options: {\n          background\n        }\n      }) => [style.getColor(background), '!important']\n    },\n    loader: {\n      color: ({\n        options: {\n          variant,\n          textColor,\n          background\n        }\n      }) => [style.getColor(variant === 'icon' ? background : textColor), '!important'],\n      marginLeft: '0.25rem'\n    },\n    empty: {\n      '&::before': {\n        content: '\"\\xA0\"'\n      }\n    }\n  };\n}","functions":["Show","Hide","Show/Hide","Load","Loaded","Load/Loaded"],"triggers":["onActionSuccess","onActionError","onActionLoad"]},{"name":"ButtonOriginal","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    Button,\n    IconButton,\n    CircularProgress\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    variant,\n    disabled,\n    fullWidth,\n    size,\n    icon,\n    iconPosition,\n    linkType,\n    linkTo,\n    linkToExternal,\n    type,\n    visible,\n    actionId,\n    buttonText,\n    actionProperties\n  } = options;\n  const {\n    env,\n    useText,\n    useAction\n  } = B;\n  const isDev = env === 'dev';\n  const isAction = linkType === 'action';\n  const hasLink = linkTo && linkTo.id !== '';\n  const hasExternalLink = linkToExternal && linkToExternal.id !== '';\n  const linkToExternalVariable = linkToExternal && useText(linkToExternal) || '';\n  const isIcon = variant === 'icon';\n  const buttonContent = useText(buttonText);\n  const [isVisible, setIsVisible] = useState(visible);\n  const [isLoading, setIsLoading] = useState(false);\n  const propertyMappings = new Map(actionProperties);\n  const input = Array.from(propertyMappings.keys()).reduce((acc, key) => {\n    const propertyId = propertyMappings.get(key);\n    const value = isDev ? '' : B.useProperty(propertyId);\n    acc[key] = value;\n    return acc;\n  }, {});\n  const [actionCallback, {\n    loading\n  }] = isAction && useAction(actionId, {\n    variables: {\n      input\n    },\n\n    onCompleted(data) {\n      B.triggerEvent('onActionSuccess', data.actionb5);\n    },\n\n    onError(error) {\n      B.triggerEvent('onActionError', error);\n    }\n\n  }) || [() => {}, {\n    loading: false\n  }];\n  useEffect(() => {\n    setIsVisible(visible);\n  }, [visible]);\n  B.defineFunction('Show', () => setIsVisible(true));\n  B.defineFunction('Hide', () => setIsVisible(false));\n  B.defineFunction('Show/Hide', () => setIsVisible(s => !s));\n  B.defineFunction('Load', () => setIsLoading(true));\n  B.defineFunction('Loaded', () => setIsLoading(false));\n  B.defineFunction('Load/Loaded', () => setIsLoading(l => !l));\n  useEffect(() => {\n    if (loading) {\n      B.triggerEvent('onActionLoad', loading);\n    }\n  }, [loading]);\n  const generalProps = {\n    disabled: disabled || isLoading || loading,\n    size,\n    tabindex: isDev && -1,\n    href: linkType === 'external' && hasExternalLink ? linkToExternalVariable : undefined,\n    component: linkType === 'internal' && hasLink ? B.Link : undefined,\n    endpoint: linkType === 'internal' && hasLink ? linkTo : undefined\n  };\n  const iconButtonProps = { ...generalProps,\n    classes: {\n      root: classes.root\n    }\n  };\n  const buttonProps = { ...generalProps,\n    fullWidth,\n    variant,\n    classes: {\n      root: classes.root,\n      contained: classes.contained,\n      outlined: classes.outlined\n    },\n    className: !!buttonContent && classes.empty,\n    type: isDev ? 'button' : type\n  };\n  const compProps = isIcon ? iconButtonProps : buttonProps;\n  const BtnComp = isIcon ? IconButton : Button;\n  const showIndicator = !isIcon && (isLoading || loading);\n  const ButtonComponent = <BtnComp {...compProps} startIcon={!isIcon && icon !== 'None' && iconPosition === 'start' && React.createElement(Icons[icon])} endIcon={!isIcon && icon !== 'None' && iconPosition === 'end' && React.createElement(Icons[icon])} onClick={event => {\n    event.stopPropagation();\n    actionCallback();\n  }}>\n        {isIcon && React.createElement(Icons[icon === 'None' ? 'Error' : icon], {\n      fontSize: size\n    })}\n        {!isIcon && buttonContent}\n        {showIndicator && <CircularProgress size={16} className={classes.loader} />}\n      </BtnComp>;\n\n  if (isDev) {\n    return <div className={classes.wrapper}>{ButtonComponent}</div>;\n  }\n\n  return isVisible ? ButtonComponent : <></>;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    wrapper: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      width: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth && '100%',\n      minHeight: '1rem',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    root: {\n      color: ({\n        options: {\n          variant,\n          textColor,\n          background\n        }\n      }) => [style.getColor(variant === 'icon' ? background : textColor), '!important'],\n      '&.MuiButton-contained.Mui-disabled': {\n        color: ['rgba(0, 0, 0, 0.26)', '!important'],\n        boxShadow: ['none', '!important'],\n        backgroundColor: ['rgba(0, 0, 0, 0.12)', '!important']\n      },\n      width: ({\n        options: {\n          fullWidth,\n          outerSpacing\n        }\n      }) => {\n        if (!fullWidth) return 'auto';\n        const marginRight = getSpacing(outerSpacing[1]);\n        const marginLeft = getSpacing(outerSpacing[3]);\n        return `calc(100% - ${marginRight} - ${marginLeft})`;\n      },\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      '&.MuiButton-root, &.MuiIconButton-root': {\n        [`@media ${B.mediaMinWidth(600)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Portrait');\n            const marginLeft = getSpacing(outerSpacing[3], 'Portrait');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Portrait'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Portrait'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Portrait'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Portrait')\n        },\n        [`@media ${B.mediaMinWidth(960)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Landscape');\n            const marginLeft = getSpacing(outerSpacing[3], 'Landscape');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Landscape'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Landscape'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Landscape'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Landscape')\n        },\n        [`@media ${B.mediaMinWidth(1280)}`]: {\n          width: ({\n            options: {\n              fullWidth,\n              outerSpacing\n            }\n          }) => {\n            if (!fullWidth) return 'auto';\n            const marginRight = getSpacing(outerSpacing[1], 'Desktop');\n            const marginLeft = getSpacing(outerSpacing[3], 'Desktop');\n            return `calc(100% - ${marginRight} - ${marginLeft})`;\n          },\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Desktop'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Desktop'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Desktop'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Desktop')\n        }\n      }\n    },\n    contained: {\n      backgroundColor: ({\n        options: {\n          background\n        }\n      }) => [style.getColor(background), '!important']\n    },\n    outlined: {\n      borderColor: ({\n        options: {\n          background\n        }\n      }) => [style.getColor(background), '!important']\n    },\n    loader: {\n      color: ({\n        options: {\n          variant,\n          textColor,\n          background\n        }\n      }) => [style.getColor(variant === 'icon' ? background : textColor), '!important'],\n      marginLeft: '0.25rem'\n    },\n    empty: {\n      '&::before': {\n        content: '\"\\xA0\"'\n      }\n    }\n  };\n}","functions":["Show","Hide","Show/Hide","Load","Loaded","Load/Loaded"],"triggers":["onActionSuccess","onActionError","onActionLoad"]},{"name":"Card","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT","CARD_HEADER","CARD_MEDIA","CARD_ACTIONS","CARD_CONTENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    env\n  } = B;\n  const {\n    Card\n  } = window.MaterialUI.Core;\n  const {\n    variant,\n    elevation,\n    square\n  } = options;\n  const isDev = env === 'dev';\n  const isEmpty = children.length === 0;\n  const isPristine = isEmpty && isDev;\n  const PlaceHolder = <div className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')} />;\n  const CardComponent = <Card variant={variant} square={square} elevation={elevation}>\n        {isEmpty ? PlaceHolder : children}\n      </Card>;\n  return isDev ? <div>{CardComponent}</div> : CardComponent;\n})()","styles":"() => () => ({\n  empty: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '4rem',\n    height: '100%',\n    width: '100%',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    boxSizing: 'border-box'\n  },\n  pristine: {\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5',\n    '&::after': {\n      content: '\"Card\"'\n    }\n  }\n})","functions":[],"triggers":[]},{"name":"CardActions","type":"CARD_ACTIONS","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    env\n  } = B;\n  const {\n    CardActions\n  } = window.MaterialUI.Core;\n  const isDev = env === 'dev';\n  const {\n    disableSpacing\n  } = options;\n  const isEmpty = children.length === 0;\n  const isPristine = isEmpty && isDev;\n  const PlaceHolder = <div className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')} />;\n  const CardActionsComponent = <CardActions classes={{\n    root: classes.root\n  }} disableSpacing={disableSpacing}>\n        {isEmpty ? PlaceHolder : children}\n      </CardActions>;\n  return isDev ? <div>{CardActionsComponent}</div> : CardActionsComponent;\n})()","styles":"() => () => ({\n  root: {\n    alignItems: 'center',\n    justifyContent: ({\n      options: {\n        alignment\n      }\n    }) => alignment\n  },\n  empty: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '4rem',\n    height: '100%',\n    width: '100%',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    boxSizing: 'border-box'\n  },\n  pristine: {\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5',\n    '&::after': {\n      content: '\"Card Actions\"'\n    }\n  }\n})","functions":[],"triggers":[]},{"name":"CardContent","type":"CARD_CONTENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    env\n  } = B;\n  const {\n    CardContent\n  } = window.MaterialUI.Core;\n  const isDev = env === 'dev';\n  const isEmpty = children.length === 0;\n  const isPristine = isEmpty && isDev;\n  const PlaceHolder = <div className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')} />;\n  const CardContentComponent = <CardContent>{isEmpty ? PlaceHolder : children}</CardContent>;\n  return isDev ? <div>{CardContentComponent}</div> : CardContentComponent;\n})()","styles":"() => () => ({\n  empty: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '4rem',\n    height: '100%',\n    width: '100%',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    boxSizing: 'border-box'\n  },\n  pristine: {\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5',\n    '&::after': {\n      content: '\"Card Content\"'\n    }\n  }\n})","functions":[],"triggers":[]},{"name":"CardHeader","type":"CARD_HEADER","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    env,\n    useText\n  } = B;\n  const isDev = env === 'dev';\n  const {\n    CardHeader,\n    Avatar\n  } = window.MaterialUI.Core;\n  const {\n    avatar,\n    avatarType,\n    title,\n    subheader\n  } = options;\n  const avatarSource = useText(avatar);\n  const AvatarImage = <Avatar alt=\"\" src={avatarSource} />;\n  const AvatarText = <Avatar>{avatarSource}</Avatar>;\n  const AvatarComponent = avatarType === 'text' ? AvatarText : AvatarImage;\n  const isEmpty = !avatar && !title.length && !subheader.length;\n  const isPristine = isEmpty && isDev;\n  const CardHeaderComponent = <CardHeader avatar={avatarSource && AvatarComponent} title={useText(title)} subheader={useText(subheader)} className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')} />;\n  return isDev ? <div>{CardHeaderComponent}</div> : CardHeaderComponent;\n})()","styles":"() => () => ({\n  empty: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '4rem',\n    height: '100%',\n    width: '100%',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    boxSizing: 'border-box'\n  },\n  pristine: {\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5',\n    '& > div': {\n      display: 'none'\n    },\n    '&::after': {\n      content: '\"Card Header\"'\n    }\n  }\n})","functions":[],"triggers":[]},{"name":"CardMedia","type":"CARD_MEDIA","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    env,\n    useText\n  } = B;\n  const {\n    CardMedia\n  } = window.MaterialUI.Core;\n  const isDev = env === 'dev';\n  const {\n    type,\n    imageSource,\n    videoSource,\n    iframeSource,\n    title\n  } = options;\n  const titleText = useText(title);\n  const imgUrl = useText(imageSource);\n  const videoUrl = useText(videoSource);\n  const iframeUrl = useText(iframeSource);\n  const isImage = type === 'img' && imgUrl;\n  const isVideo = type === 'video' && videoUrl;\n  const isIframe = type === 'iframe' && iframeUrl;\n  const isEmpty = !isImage && !isVideo && !isIframe;\n  const variable = imageSource && imageSource.findIndex(v => v.name) !== -1;\n  const variableDev = env === 'dev' && (variable || !imgUrl);\n\n  const ImgPlaceholder = () => <svg className={classes.placeholder} width={86} height={48}>\n        <title>{titleText}</title>\n        <rect x=\"19.5\" y=\"8.5\" rx=\"2\" />\n        <path d=\"M61.1349945 29.020979v3.9160839H25v-2.5379375l6.5998225-4.9892478 5.6729048 4.2829541 13.346858-11.2981564L61.1349945 29.020979zm-22.5-10.270979c0 1.0416667-.3645833 1.9270833-1.09375 2.65625S35.9266612 22.5 34.8849945 22.5s-1.9270833-.3645833-2.65625-1.09375-1.09375-1.6145833-1.09375-2.65625.3645833-1.9270833 1.09375-2.65625S33.8433278 15 34.8849945 15s1.9270833.3645833 2.65625 1.09375 1.09375 1.6145833 1.09375 2.65625z\" />\n      </svg>;\n\n  const VideoPlaceholder = () => <svg className={classes.placeholder} width={48} height={31}>\n        <g fill=\"none\">\n          <rect x=\".5\" y=\".5\" rx=\"2\" />\n          <g fill=\"#666D85\">\n            <path d=\"M26.575 8.526h-10.95C14.183 8.526 13 9.674 13 11.078v8.603c0 1.404 1.182 2.553 2.626 2.553h10.949c1.444 0 2.625-1.15 2.625-2.553v-8.603c0-1.43-1.181-2.552-2.625-2.552zM34.342 9.93a1.359 1.359 0 00-.446.178L29.8 12.406v5.922l4.122 2.297a1.585 1.585 0 002.153-.561c.132-.23.21-.485.21-.766V11.41c0-.944-.919-1.71-1.943-1.48z\" />\n          </g>\n        </g>\n      </svg>;\n\n  const IframePlaceholder = () => <svg className={classes.placeholder} width={48} height={31}>\n        <g fill=\"none\">\n          <rect x=\".5\" y=\".5\" rx=\"2\" />\n          <path d=\"M17.875 20.413v-1.78a.708.708 0 00-.1-.37.809.809 0 00-.328-.289l-3.609-1.892a3.258 3.258 0 00-.482-.208 6.559 6.559 0 00-.542-.156c.192-.048.373-.1.542-.157.169-.058.33-.127.482-.208l3.61-1.882a.809.809 0 00.328-.289.708.708 0 00.099-.369v-1.781L10 15.212v1.012l7.875 4.19zm3.132 3.087c.126 0 .255-.02.388-.06.132-.041.258-.1.378-.178.119-.077.225-.174.318-.288.093-.115.169-.25.229-.405L28.077 7.5h-1.044a1.28 1.28 0 00-.766.228c-.212.152-.374.37-.487.652L19.973 23.5h1.034zm9.118-3.087L38 16.223v-1.011l-7.875-4.18v1.781c0 .135.033.258.1.37a.809.809 0 00.328.288l3.609 1.882c.152.081.313.15.482.208.17.057.35.11.542.157a4.682 4.682 0 00-1.024.364l-3.61 1.892a.809.809 0 00-.328.289.708.708 0 00-.099.37v1.78z\" fill=\"#666D85\" />\n        </g>\n      </svg>;\n\n  const Placeholder = () => {\n    switch (type) {\n      case 'img':\n        return <ImgPlaceholder />;\n\n      case 'video':\n        return <VideoPlaceholder />;\n\n      default:\n        return <IframePlaceholder />;\n    }\n  };\n\n  let MediaComponent = () => <div className={(isEmpty || variableDev) && classes.empty}>\n        <div className={classes.placeholderWrapper}>\n          <Placeholder />\n          {variable && <span>{imgUrl}</span>}\n        </div>\n      </div>;\n\n  if (isImage && !variableDev) {\n    MediaComponent = () => <img className={classes.media} src={imgUrl} title={titleText} alt={titleText} />;\n  } else if (isVideo) {\n    MediaComponent = () => // eslint-disable-next-line jsx-a11y/media-has-caption\n    <video className={classes.media} src={videoUrl} title={titleText} controls />;\n  } else if (isIframe) {\n    MediaComponent = () => <iframe className={classes.media} title={titleText} src={iframeUrl} />;\n  }\n\n  const CardMediaComponent = <CardMedia title={titleText} component={MediaComponent} />;\n  return isDev ? <div className={classes.root}>{CardMediaComponent}</div> : CardMediaComponent;\n})()","styles":"() => () => ({\n  root: {\n    '& > *': {\n      pointerEvents: 'none'\n    }\n  },\n  empty: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    boxSizing: 'border-box',\n    backgroundColor: '#F0F1F5',\n    border: '0.0625rem dashed #AFB5C8'\n  },\n  placeholderWrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    minHeight: 48\n  },\n  placeholder: {\n    maxHeight: '100%',\n    '& rect': {\n      stroke: '#AFB5C8',\n      fill: '#F7F8FA',\n      width: 47,\n      height: 30\n    },\n    '& > path': {\n      fill: '#666D85'\n    }\n  },\n  media: {\n    width: '100%'\n  }\n})","functions":[],"triggers":[]},{"name":"Checkbox","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    error,\n    disabled,\n    position,\n    size,\n    helperText,\n    customModelAttribute: customModelAttributeObj,\n    validationValueMissing,\n    nameAttribute\n  } = options;\n  const {\n    useText,\n    getCustomModelAttribute\n  } = B;\n  const isDev = B.env === 'dev';\n  const [errorState, setErrorState] = useState(error);\n  const [helper, setHelper] = useState(useText(helperText));\n  const {\n    id: customModelAttributeId,\n    label = [],\n    value: defaultValue = []\n  } = customModelAttributeObj;\n  const customModelAttribute = getCustomModelAttribute(customModelAttributeId);\n  const {\n    name: customModelAttributeName,\n    validations: {\n      required\n    } = {}\n  } = customModelAttribute || {};\n  const labelText = useText(label);\n  const componentChecked = useText(defaultValue);\n  const [checked, setChecked] = useState(componentChecked === 'true');\n  const nameAttributeValue = useText(nameAttribute);\n  const {\n    Checkbox: MUICheckbox,\n    FormControlLabel,\n    FormControl,\n    FormHelperText\n  } = window.MaterialUI.Core;\n\n  const handleValidation = isChecked => {\n    const valid = isChecked && required || !required;\n    setErrorState(!valid);\n    const message = !valid ? useText(validationValueMissing) : useText(helperText);\n    setHelper(message);\n  };\n\n  const handleChange = evt => {\n    handleValidation(evt.target.checked);\n    setChecked(evt.target.checked);\n  };\n\n  useEffect(() => {\n    if (isDev) {\n      setChecked(useText(defaultValue) === 'true');\n    }\n  }, [isDev, defaultValue]);\n  const Checkbox = <MUICheckbox checked={checked} onChange={handleChange} name={nameAttributeValue || customModelAttributeName} disabled={disabled} size={size} tabIndex={isDev && -1} value=\"on\" />;\n  const Control = <FormControl required={required} error={errorState} classes={{\n    root: classes.formControl\n  }}>\n        <FormControlLabel control={Checkbox} label={labelText} labelPlacement={position} />\n        {!!helper && <FormHelperText>{helper}</FormHelperText>}\n      </FormControl>;\n  return isDev ? <div className={classes.root}>{Control}</div> : Control;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  const {\n    color: colorFunc\n  } = B;\n\n  const getOpacColor = (col, val) => colorFunc.alpha(col, val);\n\n  return {\n    root: {\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    formControl: {\n      '& > legend': {\n        '&.Mui-error': {\n          color: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      },\n      '& > p': {\n        color: ({\n          options: {\n            helperColor\n          }\n        }) => [style.getColor(helperColor), '!important'],\n        '&.Mui-error': {\n          color: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        }\n      },\n      '& .MuiFormControlLabel-root': {\n        '& .MuiCheckbox-root': {\n          color: ({\n            options: {\n              checkboxColor\n            }\n          }) => [style.getColor(checkboxColor), '!important'],\n          '&:hover': {\n            backgroundColor: ({\n              options: {\n                checkboxColor\n              }\n            }) => [getOpacColor(style.getColor(checkboxColor), 0.04), '!important']\n          },\n          '&.Mui-checked': {\n            color: ({\n              options: {\n                checkboxColorChecked\n              }\n            }) => [style.getColor(checkboxColorChecked), '!important'],\n            '&:hover': {\n              backgroundColor: ({\n                options: {\n                  checkboxColorChecked\n                }\n              }) => [getOpacColor(style.getColor(checkboxColorChecked), 0.04), '!important']\n            }\n          }\n        },\n        '& .MuiTypography-root': {\n          color: ({\n            options: {\n              textColor\n            }\n          }) => [style.getColor(textColor), '!important']\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      }\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"CheckboxGroup","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    disabled,\n    error,\n    position,\n    size,\n    helperText,\n    row,\n    checkboxOptions,\n    model,\n    optionType,\n    labelProp,\n    valueProp,\n    margin,\n    filter,\n    fullWidth,\n    showError,\n    hideLabel,\n    customModelAttribute: customModelAttributeObj,\n    property,\n    nameAttribute,\n    order,\n    orderBy\n  } = options;\n  const {\n    useText,\n    getProperty,\n    useAllQuery,\n    getCustomModelAttribute\n  } = B;\n  const displayError = showError === 'built-in';\n  const isDev = B.env === 'dev';\n  const componentHelperText = useText(helperText);\n  const {\n    kind,\n    values: listValues = []\n  } = getProperty(property) || {};\n  const labelProperty = getProperty(labelProp);\n  const valueProperty = getProperty(valueProp);\n  const {\n    id: customModelAttributeId,\n    label = [],\n    value: defaultValue\n  } = customModelAttributeObj;\n  const customModelAttribute = getCustomModelAttribute(customModelAttributeId);\n  const {\n    name: customModelAttributeName,\n    validations: {\n      required\n    } = {}\n  } = customModelAttribute || {};\n  const labelText = useText(label);\n  const nameAttributeValue = useText(nameAttribute);\n\n  const getValues = () => {\n    const value = defaultValue ? useText(defaultValue) : []; // split the string and trim spaces\n\n    return !Array.isArray(value) ? value.split(',').map(str => str.trim()) : value;\n  };\n\n  const [values, setValues] = useState(getValues());\n  const orderByArray = [orderBy].flat();\n  const sort = !isDev && orderBy ? orderByArray.reduceRight((acc, orderByProperty, index) => {\n    const prop = getProperty(orderByProperty);\n    return index === orderByArray.length - 1 ? {\n      [prop.name]: order.toUpperCase()\n    } : {\n      [prop.name]: acc\n    };\n  }, {}) : {};\n  const {\n    loading,\n    error: err,\n    data,\n    refetch\n  } = model && useAllQuery(model, {\n    filter,\n    skip: 0,\n    take: 50,\n    variables: { ...(orderBy ? {\n        sort: {\n          relation: sort\n        }\n      } : {})\n    }\n  });\n\n  if (loading) {\n    B.triggerEvent('onLoad', loading);\n  }\n\n  if (err && !displayError) {\n    B.triggerEvent('onError', err);\n  }\n\n  const {\n    results\n  } = data || {};\n\n  if (results) {\n    if (results.length > 0) {\n      B.triggerEvent('onSuccess', results);\n    } else {\n      B.triggerEvent('onNoResults');\n    }\n  }\n\n  B.defineFunction('Refetch', () => refetch());\n  useEffect(() => {\n    if (isDev) {\n      setValues(getValues());\n    }\n  }, [isDev, defaultValue]);\n  const {\n    Checkbox: MUICheckbox,\n    FormControlLabel,\n    FormControl,\n    FormHelperText,\n    FormGroup,\n    FormLabel\n  } = window.MaterialUI.Core;\n\n  const handleChange = evt => {\n    const {\n      checked,\n      value\n    } = evt.target;\n    setValues(state => {\n      if (checked) return state.concat(value);\n      return state.filter(v => v !== value);\n    });\n  };\n\n  const renderCheckbox = (checkboxLabel, checkboxValue) => <FormControlLabel control={<MUICheckbox tabIndex={isDev && -1} size={size} />} label={checkboxLabel} labelPlacement={position} checked={values.includes(checkboxValue)} onChange={handleChange} disabled={disabled} name={nameAttributeValue || customModelAttributeName} value={checkboxValue} />;\n\n  const renderCheckBoxes = () => {\n    if (kind === 'list' || kind === 'LIST') {\n      return listValues.map(({\n        value: v\n      }) => renderCheckbox(v, v));\n    }\n\n    if (optionType === 'static') {\n      return (checkboxOptions || '').split('\\n').map(opt => renderCheckbox(opt, opt));\n    }\n\n    if (isDev) return renderCheckbox('Placeholder', false);\n    if (loading) return <span>Loading...</span>;\n    if (err && displayError) return <span>{err.message}</span>;\n    return results.map(item => renderCheckbox(item[labelProperty.name], `${item[valueProperty.name]}`));\n  };\n\n  const Control = <FormControl classes={{\n    root: classes.formControl\n  }} margin={margin} component=\"fieldset\" required={required} error={error} fullWidth={fullWidth}>\n        {labelText && !hideLabel && <FormLabel component=\"legend\">{labelText}</FormLabel>}\n        <FormGroup row={row}>{renderCheckBoxes()}</FormGroup>\n        {componentHelperText && <FormHelperText>{componentHelperText}</FormHelperText>}\n      </FormControl>;\n  return isDev ? <div className={classes.root}>{Control}</div> : Control;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  const {\n    color: colorFunc\n  } = B;\n\n  const getOpacColor = (col, val) => colorFunc.alpha(col, val);\n\n  return {\n    root: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    formControl: {\n      '& > legend': {\n        color: ({\n          options: {\n            labelColor\n          }\n        }) => [style.getColor(labelColor), '!important'],\n        '&.Mui-error': {\n          color: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      },\n      '& > p': {\n        color: ({\n          options: {\n            helperColor\n          }\n        }) => [style.getColor(helperColor), '!important'],\n        '&.Mui-error': {\n          color: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        }\n      },\n      '& .MuiFormControlLabel-root': {\n        '& .MuiCheckbox-root': {\n          color: ({\n            options: {\n              checkboxColor\n            }\n          }) => [style.getColor(checkboxColor), '!important'],\n          '&:hover': {\n            backgroundColor: ({\n              options: {\n                checkboxColor\n              }\n            }) => [getOpacColor(style.getColor(checkboxColor), 0.04), '!important']\n          },\n          '&.Mui-checked': {\n            color: ({\n              options: {\n                checkboxColorChecked\n              }\n            }) => [style.getColor(checkboxColorChecked), '!important'],\n            '&:hover': {\n              backgroundColor: ({\n                options: {\n                  checkboxColorChecked\n                }\n              }) => [getOpacColor(style.getColor(checkboxColorChecked), 0.04), '!important']\n            }\n          }\n        },\n        '& .MuiTypography-root': {\n          color: ({\n            options: {\n              textColor\n            }\n          }) => [style.getColor(textColor), '!important']\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      }\n    }\n  };\n}","functions":["Refetch"],"triggers":["onLoad","onError","onSuccess","onNoResults"]},{"name":"Chip","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    Chip,\n    Avatar\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    env,\n    useText\n  } = B;\n  const {\n    label,\n    disabled,\n    variant,\n    startIcon,\n    avatar,\n    imgUrl,\n    avatartype,\n    size\n  } = options;\n  const isDev = env === 'dev';\n  const imgSrc = imgUrl && useText(imgUrl);\n  const AvatarImage = <Avatar alt=\"\" src={imgSrc} />;\n  const AvatarText = <Avatar>{avatar}</Avatar>;\n  let AvatarComponent;\n\n  if (avatartype === 'text') {\n    AvatarComponent = AvatarText;\n  } else if (avatartype === 'image') {\n    AvatarComponent = AvatarImage;\n  }\n\n  const ChipComponent = <Chip className={[classes.root, variant === 'default' ? classes.chip : classes.outlined].join(' ')} label={useText(label)} disabled={disabled} variant={variant} icon={avatartype === 'icon' && startIcon !== 'None' ? React.createElement(Icons[startIcon]) : undefined} avatar={AvatarComponent} size={size} />;\n  return isDev ? <div className={classes.wrapper}>{ChipComponent}</div> : ChipComponent;\n})()","styles":"B => theme => {\n  const style = new B.Styling(theme);\n\n  const convertSizes = sizes => sizes.map(size => style.getSpacing(size)).join(' ');\n\n  return {\n    wrapper: {\n      display: 'inline-block'\n    },\n    root: {\n      margin: ({\n        options: {\n          margin\n        }\n      }) => convertSizes(margin),\n      color: ({\n        options: {\n          textColor\n        }\n      }) => [style.getColor(textColor), '!important'],\n      '& .MuiChip-icon': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important']\n      }\n    },\n    chip: {\n      backgroundColor: ({\n        options: {\n          color\n        }\n      }) => [style.getColor(color), '!important']\n    },\n    outlined: {\n      backgroundColor: 'transparent !important',\n      '&.MuiChip-outlined': {\n        borderColor: ({\n          options: {\n            color\n          }\n        }) => [style.getColor(color), '!important']\n      }\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"Column","type":"LAYOUT_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"VERTICAL","jsx":"<div className={[classes.column, options.visible || B.env === 'dev' ? '' : classes.hide].join(' ')}>\n      {(() => {\n    const isEmpty = children.length === 0;\n    const isPristine = isEmpty && B.env === 'dev';\n    return children.length !== 0 ? children : <div className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')}>\n            {isPristine ? 'Column' : ''}\n          </div>;\n  })()}\n    </div>","styles":"B => theme => {\n  const style = new B.Styling(theme);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    column: {\n      display: ({\n        options: {\n          columnWidthMobile,\n          horizontalAlignment,\n          verticalAlignment\n        }\n      }) => {\n        if (columnWidthMobile === 'hidden') {\n          return 'none';\n        }\n\n        return horizontalAlignment === 'inherit' && verticalAlignment === 'inherit' ? 'block' : 'flex';\n      },\n      flexDirection: 'column',\n      justifyContent: ({\n        options: {\n          verticalAlignment\n        }\n      }) => verticalAlignment,\n      alignItems: ({\n        options: {\n          horizontalAlignment\n        }\n      }) => horizontalAlignment,\n      flexGrow: ({\n        options: {\n          columnWidthMobile\n        }\n      }) => columnWidthMobile === 'flexible' ? 1 : 0,\n      flexShrink: ({\n        options: {\n          columnWidthMobile\n        }\n      }) => columnWidthMobile === 'flexible' || columnWidthMobile === 'fitContent' ? 1 : 0,\n      flexBasis: ({\n        options: {\n          columnWidthMobile,\n          outerSpacing\n        }\n      }) => {\n        if (columnWidthMobile === 'flexible' || columnWidthMobile === 'fitContent') {\n          return 'auto';\n        }\n\n        const marginRight = getSpacing(outerSpacing[1]);\n        const marginLeft = getSpacing(outerSpacing[3]);\n        return `calc(${columnWidthMobile / 12 * 100}% - ${marginRight} - ${marginLeft})`;\n      },\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      paddingTop: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[0]),\n      paddingRight: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[1]),\n      paddingBottom: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[2]),\n      paddingLeft: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[3]),\n      height: ({\n        options: {\n          columnHeight\n        }\n      }) => columnHeight,\n      minHeight: 1,\n      backgroundColor: ({\n        options: {\n          backgroundColor\n        }\n      }) => backgroundColor === 'transparent' ? 'transparent' : style.getColor(backgroundColor),\n      backgroundImage: 'none',\n      backgroundPosition: 'left top',\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'cover',\n      borderWidth: 0,\n      borderColor: 'transparent',\n      borderStyle: 'none',\n      borderRadius: 0,\n      overflow: 'auto',\n      boxSizing: 'border-box',\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        display: ({\n          options: {\n            columnWidthTabletPortrait,\n            horizontalAlignment,\n            verticalAlignment\n          }\n        }) => {\n          if (columnWidthTabletPortrait === 'hidden') {\n            return 'none';\n          }\n\n          return horizontalAlignment === 'inherit' && verticalAlignment === 'inherit' ? 'block' : 'flex';\n        },\n        flexGrow: ({\n          options: {\n            columnWidthTabletPortrait\n          }\n        }) => columnWidthTabletPortrait === 'flexible' ? 1 : 0,\n        flexShrink: ({\n          options: {\n            columnWidthTabletPortrait\n          }\n        }) => columnWidthTabletPortrait === 'flexible' || columnWidthTabletPortrait === 'fitContent' ? 1 : 0,\n        flexBasis: ({\n          options: {\n            columnWidthTabletPortrait,\n            outerSpacing\n          }\n        }) => {\n          if (columnWidthTabletPortrait === 'flexible' || columnWidthTabletPortrait === 'fitContent') {\n            return 'auto';\n          }\n\n          const marginRight = getSpacing(outerSpacing[1], 'Portrait');\n          const marginLeft = getSpacing(outerSpacing[3], 'Portrait');\n          return `calc(${columnWidthTabletPortrait / 12 * 100}% - ${marginRight} - ${marginLeft})`;\n        },\n        maxWidth: '100%',\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait'),\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Portrait'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Portrait'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Portrait'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        display: ({\n          options: {\n            columnWidthTabletLandscape,\n            horizontalAlignment,\n            verticalAlignment\n          }\n        }) => {\n          if (columnWidthTabletLandscape === 'hidden') {\n            return 'none';\n          }\n\n          return horizontalAlignment === 'inherit' && verticalAlignment === 'inherit' ? 'block' : 'flex';\n        },\n        flexGrow: ({\n          options: {\n            columnWidthTabletLandscape\n          }\n        }) => columnWidthTabletLandscape === 'flexible' ? 1 : 0,\n        flexShrink: ({\n          options: {\n            columnWidthTabletLandscape\n          }\n        }) => columnWidthTabletLandscape === 'flexible' || columnWidthTabletLandscape === 'fitContent' ? 1 : 0,\n        flexBasis: ({\n          options: {\n            columnWidthTabletLandscape,\n            outerSpacing\n          }\n        }) => {\n          if (columnWidthTabletLandscape === 'flexible' || columnWidthTabletLandscape === 'fitContent') {\n            return 'auto';\n          }\n\n          const marginRight = getSpacing(outerSpacing[1], 'Landscape');\n          const marginLeft = getSpacing(outerSpacing[3], 'Landscape');\n          return `calc(${columnWidthTabletLandscape / 12 * 100}% - ${marginRight} - ${marginLeft})`;\n        },\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape'),\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Landscape'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Landscape'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Landscape'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        display: ({\n          options: {\n            columnWidth,\n            horizontalAlignment,\n            verticalAlignment\n          }\n        }) => {\n          if (columnWidth === 'hidden') {\n            return 'none';\n          }\n\n          return horizontalAlignment === 'inherit' && verticalAlignment === 'inherit' ? 'block' : 'flex';\n        },\n        flexGrow: ({\n          options: {\n            columnWidth\n          }\n        }) => columnWidth === 'flexible' ? 1 : 0,\n        flexShrink: ({\n          options: {\n            columnWidth\n          }\n        }) => columnWidth === 'flexible' || columnWidth === 'fitContent' ? 1 : 0,\n        flexBasis: ({\n          options: {\n            columnWidth,\n            outerSpacing\n          }\n        }) => {\n          if (columnWidth === 'flexible' || columnWidth === 'fitContent') {\n            return 'auto';\n          }\n\n          const marginRight = getSpacing(outerSpacing[1], 'Desktop');\n          const marginLeft = getSpacing(outerSpacing[3], 'Desktop');\n          return `calc(${columnWidth / 12 * 100}% - ${marginRight} - ${marginLeft})`;\n        },\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop'),\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Desktop'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Desktop'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Desktop'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Desktop')\n      }\n    },\n    empty: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: ({\n        options: {\n          columnHeight\n        }\n      }) => columnHeight ? 0 : '4rem',\n      height: '100%',\n      width: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    },\n    hide: {\n      display: 'none !important'\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"Conditional","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"<div className={children.length === 0 ? classes.empty : undefined}>\n      {(() => {\n    const {\n      useText,\n      env\n    } = B;\n    const isDev = env === 'dev';\n    const isPristine = isDev && children.length === 0;\n\n    const evalCondition = () => {\n      const left = useText(options.left);\n      const right = useText(options.right);\n      const leftAsNumber = parseFloat(left);\n      const rightAsNumber = parseFloat(right);\n\n      switch (options.compare) {\n        case 'neq':\n          return left !== right;\n\n        case 'contains':\n          return left.indexOf(right) > -1;\n\n        case 'notcontains':\n          return left.indexOf(right) < 0;\n\n        case 'gt':\n          return leftAsNumber > rightAsNumber;\n\n        case 'lt':\n          return leftAsNumber < rightAsNumber;\n\n        case 'gteq':\n          return leftAsNumber >= rightAsNumber;\n\n        case 'lteq':\n          return leftAsNumber <= rightAsNumber;\n\n        default:\n          return left === right;\n      }\n    };\n\n    const checkCondition = evalCondition();\n    const initialVisibility = options.visible ? checkCondition : !checkCondition;\n    const [visible, setVisible] = useState(false);\n    useEffect(() => {\n      setVisible(initialVisibility);\n    }, [checkCondition]);\n    B.defineFunction('Hide', () => setVisible(false));\n    B.defineFunction('Show', () => setVisible(true));\n    B.defineFunction('Show/Hide', () => setVisible(s => !s));\n    if (!isDev && !visible) return null;\n    return isPristine ? 'Conditional' : children;\n  })()}\n    </div>","styles":"() => () => ({\n  empty: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '2.5rem',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5'\n  }\n})","functions":["Hide","Show","Show/Hide"],"triggers":[]},{"name":"Container","type":"BODY_COMPONENT","allowedTypes":["CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    Container\n  } = window.MaterialUI.Core;\n  const isDev = B.env === 'dev';\n  const isEmpty = children.length === 0;\n  const isPristine = isDev && isEmpty;\n  const {\n    maxWidth,\n    disableGutters\n  } = options;\n  const hasMaxWidth = maxWidth !== 'false';\n  const ContainerCmp = <Container disableGutters={disableGutters} maxWidth={hasMaxWidth && maxWidth} className={[classes.root, isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')}>\n        {isPristine ? 'Container' : children}\n      </Container>;\n  return isDev ? <div className={classes.wrapper}>{ContainerCmp}</div> : ContainerCmp;\n})()","styles":"B => theme => {\n  const isDev = B.env === 'dev';\n  const style = new B.Styling(theme);\n  return {\n    wrapper: {\n      height: ({\n        options: {\n          height\n        }\n      }) => height\n    },\n    root: {\n      flexBasis: 'auto',\n      backgroundColor: ({\n        options: {\n          backgroundColor\n        }\n      }) => style.getColor(backgroundColor),\n      height: ({\n        options: {\n          height\n        }\n      }) => isDev ? '100%' : height\n    },\n    empty: {\n      display: ['flex', '!important'],\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: '2.5rem',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: ({\n        options: {\n          backgroundColor\n        }\n      }) => backgroundColor === 'Transparent' ? '#F0F1F5' : style.getColor(backgroundColor)\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"DataContainer","type":"BODY_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"<div>\n      {(() => {\n    const {\n      useOneQuery,\n      useMeQuery,\n      ModelProvider,\n      MeProvider,\n      env\n    } = B;\n    const isEmpty = children.length === 0;\n    const isDev = env === 'dev';\n    const isPristine = isEmpty && isDev;\n    const {\n      filter,\n      model,\n      authProfile,\n      redirectWithoutResult,\n      showError,\n      currentRecord\n    } = options;\n    const displayError = showError === 'built-in';\n\n    const BuilderLayout = () => {\n      B.defineFunction('Refetch', () => {});\n      return <>\n              <div className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')}>\n                {isPristine ? 'Drag a component in the data container to display the data' : children}\n              </div>\n            </>;\n    };\n\n    const getFilter = React.useCallback(() => {\n      if (isDev || !currentRecord || !model) {\n        return filter;\n      }\n\n      const idProperty = B.getIdProperty(model);\n      return {\n        [idProperty.id]: {\n          eq: currentRecord\n        }\n      };\n    }, [isDev, filter, currentRecord, model]);\n    const selectedFilter = getFilter();\n    const hasFilter = selectedFilter && Object.keys(selectedFilter).length > 0;\n\n    if (isDev) {\n      return <BuilderLayout />;\n    }\n\n    const CanvasLayout = () => {\n      if (!hasFilter) {\n        return <BuilderLayout />;\n      }\n\n      return <One modelId={model} />;\n    };\n\n    const redirect = () => {\n      const history = useHistory();\n      history.push(B.useEndpoint(redirectWithoutResult));\n    };\n\n    const One = ({\n      modelId\n    }) => {\n      const {\n        loading,\n        data,\n        error,\n        refetch\n      } = hasFilter && useOneQuery(modelId, {\n        filter: getFilter()\n      }) || {};\n      B.defineFunction('Refetch', () => {\n        refetch();\n      });\n\n      if (loading) {\n        B.triggerEvent('onLoad', loading);\n        return <span>Loading...</span>;\n      }\n\n      if (error && !displayError) {\n        B.triggerEvent('onError', error);\n      }\n\n      if (error && displayError) {\n        return <span>{error.message}</span>;\n      }\n\n      if (data && data.id) {\n        B.triggerEvent('onSuccess', data);\n      } else {\n        B.triggerEvent('onNoResults');\n      }\n\n      if (!data && redirectWithoutResult) {\n        redirect();\n      }\n\n      return data && <ModelProvider value={data} id={model}>\n                {children}\n              </ModelProvider>;\n    };\n\n    const Me = ({\n      authenticationProfileId\n    }) => {\n      const {\n        data,\n        loading,\n        error\n      } = useMeQuery(authenticationProfileId);\n\n      if (loading) {\n        B.triggerEvent('onUserLoad');\n      }\n\n      if (error) {\n        B.triggerEvent('onUserError', error);\n      }\n\n      if (data && data.id) {\n        B.triggerEvent('onUserSuccess', data);\n      } else {\n        B.triggerEvent('onNoUserResults');\n      }\n\n      return <MeProvider value={data} id={model}>\n              <CanvasLayout />\n            </MeProvider>;\n    };\n\n    if (authProfile) {\n      return <Me authenticationProfileId={authProfile} />;\n    }\n\n    return <CanvasLayout />;\n  })()}\n    </div>","styles":"() => () => ({\n  header: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    flexDirection: 'row-reverse',\n    minHeight: '4rem',\n    width: '100%'\n  },\n  searchWrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: [0, '0.5rem'],\n    borderBottom: [1, 'solid', '#000']\n  },\n  searchIcon: {\n    fontSize: '1.25rem',\n    marginRight: '1rem'\n  },\n  search: {\n    padding: ['0.25rem', 0],\n    fontSize: '1rem',\n    border: 'none',\n    outline: 'none'\n  },\n  button: {\n    background: 'transparent',\n    border: 'none',\n    display: 'inline-block',\n    padding: 0,\n    margin: 0,\n    cursor: 'pointer',\n    '&:active': {\n      outline: 'none'\n    }\n  },\n  footer: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: ['0.75rem', 0]\n  },\n  placeholder: {\n    opacity: '0.4'\n  },\n  pagination: {\n    marginLeft: '1rem'\n  },\n  arrow: {\n    padding: '1rem',\n    fontSize: '1.625rem',\n    color: '#000',\n    textDecoration: 'none'\n  },\n  arrowDisabled: {\n    color: '#ccc'\n  },\n  empty: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '4rem',\n    height: '100%',\n    width: '100%',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    boxSizing: 'border-box'\n  },\n  pristine: {\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5'\n  }\n})","functions":["Refetch","Refetch"],"triggers":["onLoad","onError","onSuccess","onNoResults","onUserLoad","onUserError","onUserSuccess","onNoUserResults"]},{"name":"DataList","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"<div className={classes.root}>\n      {(() => {\n    const {\n      env,\n      getProperty,\n      GetMe,\n      useAllQuery,\n      ModelProvider,\n      useFilter\n    } = B;\n    const [page, setPage] = useState(1);\n    const [search, setSearch] = useState('');\n    const [searchTerm, setSearchTerm] = useState('');\n    const [isTyping, setIsTyping] = useState(false);\n    const {\n      take,\n      filter,\n      type,\n      model,\n      authProfile,\n      showError,\n      hideSearch,\n      searchProperty,\n      order,\n      orderBy,\n      pagination\n    } = options;\n    const rowsPerPage = parseInt(take, 10) || 50;\n    const {\n      TextField,\n      InputAdornment\n    } = window.MaterialUI.Core;\n    const {\n      Search\n    } = window.MaterialUI.Icons;\n    const {\n      label: searchPropertyLabel\n    } = getProperty(searchProperty) || {};\n    const isEmpty = children.length === 0;\n    const isDev = env === 'dev';\n    const isPristine = isEmpty && isDev;\n    const displayError = showError === 'built-in';\n    const listRef = React.createRef();\n    const [showPagination, setShowPagination] = useState(true);\n\n    const builderLayout = () => <>\n            {searchProperty && !hideSearch && <div className={classes.header}>\n                <SearchComponent label={searchPropertyLabel} />\n              </div>}\n            <div ref={listRef} className={type === 'grid' ? classes.grid : ''}>\n              <div className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : '', type === 'inline' ? classes.inline : ''].join(' ')}>\n                {isPristine ? 'Drag a component in the data list to display the data' : children}\n              </div>\n            </div>\n\n            {isDev && showPagination && <div className={classes.footer}>\n                <Pagination totalCount={0} resultCount={rowsPerPage} currentPage={1} />\n              </div>}\n          </>;\n\n    useEffect(() => {\n      if (!isDev) return;\n\n      const repeat = () => {\n        if (!listRef.current) return;\n        const numberOfChildren = listRef.current.children.length;\n\n        if (numberOfChildren === 0) {\n          return;\n        }\n\n        for (let i = numberOfChildren - 1, j = 0; i > j; i -= 1) {\n          const child = listRef.current.children[i];\n\n          if (child) {\n            listRef.current.removeChild(child);\n          }\n        }\n\n        for (let i = 0, j = rowsPerPage - 1; i < j; i += 1) {\n          listRef.current.children[0].insertAdjacentHTML('afterend', listRef.current.children[0].outerHTML);\n        }\n\n        listRef.current.children.forEach((child, index) => {\n          if (index > 0) {\n            const elem = child;\n            elem.style.opacity = 0.4;\n            elem.style.pointerEvents = 'none';\n          }\n        });\n      };\n\n      const mutationObserver = new MutationObserver(() => {\n        repeat();\n      });\n      mutationObserver.observe(listRef.current.children[0], {\n        attributes: true,\n        characterData: true,\n        childList: true,\n        subtree: true,\n        attributeOldValue: false,\n        characterDataOldValue: false\n      });\n      repeat();\n    });\n\n    const handleSearch = event => {\n      setSearch(event.target.value);\n    };\n\n    const deepMerge = (...objects) => {\n      const isObject = item => item && typeof item === 'object' && !Array.isArray(item);\n\n      return objects.reduce((accumulator, object) => {\n        Object.keys(object).forEach(key => {\n          const accumulatorValue = accumulator[key];\n          const value = object[key];\n\n          if (Array.isArray(accumulatorValue) && Array.isArray(value)) {\n            accumulator[key] = accumulatorValue.concat(value);\n          } else if (isObject(accumulatorValue) && isObject(value)) {\n            accumulator[key] = deepMerge(accumulatorValue, value);\n          } else {\n            accumulator[key] = value;\n          }\n        });\n        return accumulator;\n      }, {});\n    };\n\n    const orderByArray = [orderBy].flat();\n    const sort = !isDev && orderBy ? orderByArray.reduceRight((acc, property, index) => {\n      const prop = getProperty(property);\n      return index === orderByArray.length - 1 ? {\n        [prop.name]: order.toUpperCase()\n      } : {\n        [prop.name]: acc\n      };\n    }, {}) : {};\n    let path = [searchProperty].flat();\n\n    if (typeof searchProperty.id !== 'undefined') {\n      path = [searchProperty.id].flat();\n    }\n\n    const searchFilter = searchProperty ? path.reduceRight((acc, property, index) => index === path.length - 1 ? {\n      [property]: {\n        matches: searchTerm\n      }\n    } : {\n      [property]: acc\n    }, {}) : {};\n    const newFilter = searchProperty && searchTerm !== '' ? deepMerge(filter, searchFilter) : filter;\n    const where = useFilter(newFilter);\n    const {\n      loading,\n      error,\n      data,\n      refetch\n    } = model && useAllQuery(model, {\n      rawFilter: where,\n      skip: page ? (page - 1) * rowsPerPage : 0,\n      take: rowsPerPage,\n      variables: { ...(orderBy ? {\n          sort: {\n            relation: sort\n          }\n        } : {})\n      }\n    });\n    useEffect(() => {\n      if (isDev) {\n        if (pagination === 'never') {\n          setShowPagination(false);\n        } else {\n          setShowPagination(true);\n        }\n      }\n    }, [pagination]);\n    useEffect(() => {\n      if (!isDev && data) {\n        switch (pagination) {\n          case 'never':\n            setShowPagination(false);\n            break;\n\n          case 'whenNeeded':\n            if (rowsPerPage >= data.totalCount) {\n              setShowPagination(false);\n            }\n\n            break;\n\n          default:\n          case 'always':\n            setShowPagination(true);\n        }\n      }\n    }, [data, rowsPerPage]);\n    useEffect(() => {\n      const handler = setTimeout(() => {\n        setSearchTerm(search);\n      }, 300);\n      return () => {\n        clearTimeout(handler);\n      };\n    }, [search]);\n    B.defineFunction('Refetch', () => refetch());\n    B.defineFunction('SetSearchValue', event => {\n      setSearch(event.target.value);\n    });\n    const mounted = useRef(false);\n    useEffect(() => {\n      mounted.current = true;\n      return () => {\n        mounted.current = false;\n      };\n    }, []);\n    useEffect(() => {\n      if (mounted.current && loading) {\n        B.triggerEvent('onLoad', loading);\n      }\n    }, [loading]);\n\n    const handleClick = (event, context) => {\n      B.triggerEvent('OnItemClick', event, context);\n    };\n\n    const Wrapper = type === 'inline' ? 'span' : 'div';\n\n    const Looper = results => {\n      const rows = results.map(item => <ModelProvider key={item.id} value={item} id={model}>\n              <B.InteractionScope model={model}>\n                {context => <Wrapper onClick={event => handleClick(event, context)}>\n                    {children}\n                  </Wrapper>}\n              </B.InteractionScope>\n            </ModelProvider>);\n\n      if (authProfile) {\n        return <GetMe authenticationProfileId={authProfile}>{rows}</GetMe>;\n      }\n\n      return rows;\n    };\n\n    const canvasLayout = () => {\n      if (!model) {\n        return builderLayout();\n      }\n\n      if (loading) return <div className={classes.skeleton} />;\n\n      if (error && !displayError) {\n        B.triggerEvent('onError', error);\n      }\n\n      if (error && displayError) {\n        return <span>{error.message}</span>;\n      }\n\n      const {\n        results = [],\n        totalCount\n      } = data || {};\n      const resultCount = results && results.length;\n      const hasResults = resultCount > 0;\n\n      if (hasResults) {\n        B.triggerEvent('onSuccess', results);\n      } else {\n        B.triggerEvent('onNoResults');\n      }\n\n      return <>\n              {searchProperty && !hideSearch && <div className={classes.header}>\n                  <SearchComponent label={searchPropertyLabel} onChange={handleSearch} value={search} isTyping={isTyping} setIsTyping={setIsTyping} />\n                </div>}\n\n              {type === 'inline' ? Looper(results) : <div className={type === 'grid' ? classes.grid : ''}>\n                  {Looper(results)}\n                </div>}\n\n              {showPagination && <div className={classes.footer}>\n                  <Pagination totalCount={totalCount} resultCount={resultCount} currentPage={page} />\n                </div>}\n            </>;\n    };\n    /* SubComponents */\n\n\n    function SearchComponent({\n      label,\n      onChange,\n      value,\n      // eslint-disable-next-line no-shadow\n      isTyping,\n      // eslint-disable-next-line no-shadow\n      setIsTyping\n    }) {\n      const inputRef = React.createRef();\n      useEffect(() => {\n        if (isTyping) {\n          inputRef.current.focus();\n        }\n      });\n      return <div className={classes.searchWrapper}>\n              <TextField placeholder={`Search on ${label}`} InputProps={{\n          startAdornment: <InputAdornment position=\"start\">\n                      <Search />\n                    </InputAdornment>\n        }} onChange={onChange} inputRef={inputRef} onFocus={() => setIsTyping(true)} onBlur={() => setIsTyping(false)} value={value} />\n            </div>;\n    }\n\n    function Pagination({\n      totalCount,\n      resultCount,\n      currentPage\n    }) {\n      const firstItem = currentPage ? (currentPage - 1) * rowsPerPage : 0;\n      useEffect(() => {\n        const totalPages = Math.ceil(totalCount / rowsPerPage);\n\n        if (currentPage > totalPages) {\n          setPage(totalPages);\n        }\n      }, [totalCount]);\n      const totalText = env === 'dev' ? '[total]' : totalCount;\n      return <>\n              <span>\n                {firstItem + 1}\n                {firstItem + 1 !== totalCount && ` - ${firstItem + resultCount}`}{' '}\n                of {totalText}\n              </span>\n              <div className={classes.pagination}>\n                {typeof currentPage !== 'undefined' && currentPage > 1 ? <button className={classes.button} type=\"button\" onClick={() => setPage(v => v - 1)}>\n                    <span className={[classes.arrow, 'zmdi zmdi-chevron-left'].join(' ')} />\n                  </button> : <span className={[classes.arrow, classes.arrowDisabled, 'zmdi zmdi-chevron-left'].join(' ')} />}\n                {(typeof currentPage === 'undefined' ? 1 : currentPage) < totalCount / rowsPerPage ? <button className={classes.button} type=\"button\" onClick={() => setPage(v => v + 1)}>\n                    <span className={[classes.arrow, 'zmdi zmdi-chevron-right'].join(' ')} />\n                  </button> : <span className={[classes.arrow, classes.arrowDisabled, 'zmdi zmdi-chevron-right'].join(' ')} />}\n              </div>\n            </>;\n    }\n\n    return isDev ? builderLayout() : canvasLayout();\n  })()}\n    </div>","styles":"B => theme => {\n  const style = new B.Styling(theme);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    root: {\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3])\n    },\n    inline: {\n      display: 'inline'\n    },\n    header: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      flexDirection: 'row-reverse',\n      width: '100%'\n    },\n    searchWrapper: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: [0, '0.5rem'],\n      minHeight: '4rem'\n    },\n    searchIcon: {\n      fontSize: '1.25rem',\n      marginRight: '1rem'\n    },\n    search: {\n      padding: ['0.25rem', 0],\n      fontSize: '1rem',\n      border: 'none',\n      outline: 'none'\n    },\n    button: {\n      background: 'transparent',\n      border: 'none',\n      display: 'inline-block',\n      padding: 0,\n      margin: 0,\n      cursor: 'pointer',\n      '&:active': {\n        outline: 'none'\n      }\n    },\n    footer: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-end',\n      padding: ['0.75rem', 0]\n    },\n    placeholder: {\n      opacity: '0.4'\n    },\n    pagination: {\n      marginLeft: '1rem'\n    },\n    arrow: {\n      padding: '1rem',\n      fontSize: '1.625rem',\n      color: '#000',\n      textDecoration: 'none'\n    },\n    arrowDisabled: {\n      color: '#ccc'\n    },\n    skeleton: {\n      height: `calc(${style.getFont('Body1').Mobile} * 1.2)`,\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        height: `calc(${style.getFont('Body1').Portrait} * 1.2)`\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        height: `calc(${style.getFont('Body1').Landscape} * 1.2)`\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        height: `calc(${style.getFont('Body1').Desktop} * 1.2)`\n      },\n      backgroundColor: '#eee',\n      borderRadius: 8,\n      overflow: 'hidden',\n      '&::after': {\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        backgroundImage: 'linear-gradient(90deg, #eee 25%, #fff 50%, #eee 75%)',\n        backgroundSize: '200% 100%',\n        backgroundRepeat: 'no-repeat',\n        backgroundPositionX: '150%',\n        borderRadius: `calc(${style.getFont('Body2').Landscape} / 2)`,\n        content: '\"\"',\n        animation: 'loading 1.5s infinite'\n      }\n    },\n    [`@media ${B.mediaMinWidth(600)}`]: {\n      root: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait')\n      }\n    },\n    [`@media ${B.mediaMinWidth(960)}`]: {\n      root: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape')\n      }\n    },\n    [`@media ${B.mediaMinWidth(1280)}`]: {\n      root: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop')\n      }\n    },\n    grid: {\n      display: 'grid',\n      gridTemplateColumns: ({\n        options: {\n          width\n        }\n      }) => `repeat(auto-fit, minmax(${width}, 1fr))`,\n      gridGap: ({\n        options: {\n          gap\n        }\n      }) => `${gap}`\n    },\n    empty: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '4rem',\n      height: '100%',\n      width: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    }\n  };\n}","functions":["Refetch","SetSearchValue"],"triggers":["onLoad","OnItemClick","onError","onSuccess","onNoResults"]},{"name":"DataTable","type":"CONTENT_COMPONENT","allowedTypes":["DATATABLE_COLUMN"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    Children,\n    env,\n    getProperty,\n    GetMe,\n    useText,\n    ModelProvider,\n    useAllQuery,\n    useFilter\n  } = B;\n  const {\n    Table,\n    TableBody,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TableCell,\n    TablePagination,\n    Paper,\n    Toolbar,\n    TextField,\n    InputAdornment\n  } = window.MaterialUI.Core;\n  const {\n    Search\n  } = window.MaterialUI.Icons;\n  const isDev = env === 'dev';\n  const {\n    take,\n    size,\n    model,\n    authProfile,\n    filter,\n    searchProperty,\n    hideSearch,\n    orderProperty,\n    sortOrder,\n    labelRowsPerPage,\n    labelNumberOfPages,\n    labelSearchOn,\n    square,\n    elevation,\n    variant,\n    stickyHeader,\n    title,\n    pagination,\n    linkTo,\n    showError,\n    autoLoadOnScroll,\n    autoLoadTakeAmount\n  } = options;\n  const repeaterRef = React.createRef();\n  const tableRef = React.createRef();\n  const tableContainerRef = React.createRef();\n  const displayError = showError === 'built-in';\n  const [page, setPage] = useState(0);\n  const takeNum = parseInt(take, 10);\n  const initialRender = useRef(true);\n  const skipAppend = useRef(false);\n  const [skip, setSkip] = useState(0);\n  const loadOnScroll = pagination === 'never' && autoLoadOnScroll;\n  const autoLoadTakeAmountNum = parseInt(autoLoadTakeAmount, 10);\n  const [rowsPerPage, setRowsPerPage] = useState(takeNum);\n  const [search, setSearch] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showPagination, setShowPagination] = useState(false);\n  const {\n    label: searchPropertyLabel = '{property}'\n  } = getProperty(searchProperty) || {};\n  const [orderBy, setOrderBy] = React.useState({\n    field: [orderProperty].flat() || null,\n    order: orderProperty ? sortOrder : null\n  });\n  const [results, setResults] = useState([]);\n  const [totalCount, setTotalCount] = useState(0);\n  const [previousSearchTerm, setPreviousSearchTerm] = useState('');\n  const [newSearch, setNewSearch] = useState(false);\n  const fetchingNextSet = useRef(false);\n  const [initialTimesFetched, setInitialTimesFetched] = useState(0);\n  const amountOfRows = loadOnScroll ? autoLoadTakeAmountNum : rowsPerPage;\n\n  const createSortObject = (fields, order) => {\n    const fieldsArray = [fields].flat();\n    const sort = fieldsArray.reduceRight((acc, property, index) => {\n      const prop = getProperty(property);\n      return index === fieldsArray.length - 1 ? {\n        [prop.name]: order.toUpperCase()\n      } : {\n        [prop.name]: acc\n      };\n    }, {});\n    return sort;\n  };\n\n  const [variables, setVariables] = useState(orderProperty ? {\n    sort: {\n      relation: !isDev && createSortObject(orderProperty, sortOrder)\n    }\n  } : {});\n  const titleText = useText(title);\n  const hasToolbar = titleText || searchProperty && !hideSearch;\n  const elevationLevel = variant === 'flat' ? 0 : elevation;\n  const hasLink = linkTo && linkTo.id !== '';\n  const toolbarRef = React.createRef();\n  const paginationRef = React.createRef();\n  const [stylesProps, setStylesProps] = useState(null);\n\n  const deepMerge = (...objects) => {\n    const isObject = item => item && typeof item === 'object' && !Array.isArray(item);\n\n    return objects.reduce((accumulator, object) => {\n      Object.keys(object).forEach(key => {\n        const accumulatorValue = accumulator[key];\n        const value = object[key];\n\n        if (Array.isArray(accumulatorValue) && Array.isArray(value)) {\n          accumulator[key] = accumulatorValue.concat(value);\n        } else if (isObject(accumulatorValue) && isObject(value)) {\n          accumulator[key] = deepMerge(accumulatorValue, value);\n        } else {\n          accumulator[key] = value;\n        }\n      });\n      return accumulator;\n    }, {});\n  };\n\n  let path = [searchProperty].flat();\n\n  if (typeof searchProperty.id !== 'undefined') {\n    path = [searchProperty.id].flat();\n  }\n\n  const searchFilter = searchProperty ? path.reduceRight((acc, property, index) => index === path.length - 1 ? {\n    [property]: {\n      matches: searchTerm\n    }\n  } : {\n    [property]: acc\n  }, {}) : {};\n  const newFilter = searchProperty && searchTerm !== '' ? deepMerge(filter, searchFilter) : filter;\n  const where = useFilter(newFilter);\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = model && useAllQuery(model, {\n    rawFilter: where,\n    variables,\n    skip: loadOnScroll ? skip : page * rowsPerPage,\n    take: loadOnScroll ? autoLoadTakeAmountNum : rowsPerPage\n  });\n  useEffect(() => {\n    if (!isDev && data) {\n      if (pagination !== 'never') {\n        setResults(data.results);\n        setTotalCount(data.totalCount);\n        return;\n      }\n\n      if (searchTerm !== previousSearchTerm) {\n        setSkip(0);\n        setInitialTimesFetched(0);\n        setPreviousSearchTerm(searchTerm);\n        setNewSearch(true);\n      } else {\n        if (newSearch || !autoLoadOnScroll && skipAppend.current) {\n          setResults(data.results);\n        } else {\n          setResults(prev => [...prev, ...data.results]);\n        }\n\n        fetchingNextSet.current = false;\n        setNewSearch(false);\n      }\n\n      skipAppend.current = false;\n      setTotalCount(data.totalCount);\n    }\n  }, [data, searchTerm]);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setSearchTerm(search);\n    }, 300);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [search]);\n\n  function clearResults() {\n    setInitialTimesFetched(0);\n    setResults([]);\n    setTimeout(() => {\n      setSkip(0);\n    }, 0);\n  }\n\n  B.defineFunction('Refetch', () => {\n    if (pagination === 'never') {\n      clearResults();\n      skipAppend.current = true;\n      setTimeout(() => {\n        refetch();\n      }, 0);\n    } else {\n      refetch();\n    }\n  });\n  B.defineFunction('SetSearchValue', event => {\n    setSearch(event.target.value);\n  });\n  useEffect(() => {\n    if (!isDev) return;\n\n    const repeat = () => {\n      if (!repeaterRef.current) return;\n\n      if (repeaterRef.current.previousElementSibling.children.length === 0) {\n        return;\n      }\n\n      repeaterRef.current.innerHTML = '';\n\n      for (let i = 0, j = amountOfRows - 1; i < j; i += 1) {\n        repeaterRef.current.innerHTML += repeaterRef.current.previousElementSibling.children[0].outerHTML;\n      }\n    };\n\n    const mutationObserver = new MutationObserver(() => {\n      repeat();\n    });\n    mutationObserver.observe(tableRef.current, {\n      attributes: true,\n      characterData: true,\n      childList: true,\n      subtree: true,\n      attributeOldValue: false,\n      characterDataOldValue: false\n    });\n    repeat();\n  });\n  useEffect(() => {\n    setRowsPerPage(takeNum);\n  }, [takeNum]);\n  const mounted = useRef(false);\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n  useEffect(() => {\n    if (mounted.current && loading) {\n      B.triggerEvent('onLoad', loading);\n    }\n  }, [loading]);\n\n  if (error && !displayError) {\n    B.triggerEvent('onError', error);\n  }\n\n  if (results.length > 0) {\n    B.triggerEvent('onSuccess', results);\n  } else {\n    B.triggerEvent('onNoResults');\n  }\n\n  const handleChangePage = (_, newPage) => {\n    if (loading || error) return;\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    if (loading || error) return;\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleSort = (field, newOrder) => {\n    if (isDev) return;\n    setOrderBy({\n      field,\n      order: newOrder\n    });\n    setVariables({\n      sort: {\n        relation: createSortObject(field, newOrder)\n      }\n    });\n  };\n\n  const handleSearch = event => {\n    setSearch(event.target.value);\n  };\n\n  const history = isDev ? {} : useHistory();\n\n  const handleRowClick = (endpoint, context) => {\n    if (isDev) return;\n    B.triggerEvent('OnRowClick', endpoint, context);\n\n    if (hasLink) {\n      history.push(endpoint);\n    }\n  };\n\n  const renderTableHead = () => {\n    if (loading && !loadOnScroll || error) {\n      return Array.from(Array(children.length).keys()).map(colIdx => <TableCell key={colIdx}>\n            <div className={classes.skeleton}>\n              {error && displayError && error.message}\n            </div>\n          </TableCell>);\n    }\n\n    return <Children headerOnly handleSort={handleSort} orderBy={orderBy}>\n          {children}\n        </Children>;\n  };\n\n  const tableContentModel = () => {\n    if (loading && !loadOnScroll || error) {\n      return Array.from(Array(rowsPerPage).keys()).map(idx => <TableRow key={idx} classes={{\n        root: classes.bodyRow\n      }}>\n            {Array.from(Array(children.length).keys()).map(colIdx => <TableCell key={colIdx}>\n                <div className={classes.skeleton} />\n              </TableCell>)}\n          </TableRow>);\n    }\n\n    const rows = results.map(value => <ModelProvider value={value} id={model}>\n          <B.InteractionScope model={model}>\n            {context => <TableRow key={value[0]} classes={{\n          root: classes.bodyRow\n        }} data-id={value.id}>\n                <Children linkTo={linkTo} handleRowClick={handleRowClick} context={context}>\n                  {children}\n                </Children>\n              </TableRow>}\n          </B.InteractionScope>\n        </ModelProvider>);\n\n    if (authProfile) {\n      return <GetMe authenticationProfileId={authProfile}>{rows}</GetMe>;\n    }\n\n    return rows;\n  };\n\n  const renderTableContent = () => {\n    if (isDev) {\n      return <TableRow classes={{\n        root: classes.bodyRow\n      }}>{children}</TableRow>;\n    }\n\n    if (model) {\n      return tableContentModel();\n    }\n\n    return Array.from(Array(amountOfRows).keys()).map(idx => <TableRow key={idx} classes={{\n      root: classes.bodyRow\n    }}>\n          {children}\n        </TableRow>);\n  };\n\n  useEffect(() => {\n    if (loadOnScroll && !isDev) {\n      const fetchNextSet = () => {\n        fetchingNextSet.current = true;\n\n        if (!initialRender.current) {\n          setSkip(prev => prev + autoLoadTakeAmountNum);\n        }\n\n        initialRender.current = false;\n      };\n\n      const tableContainerElement = tableContainerRef.current;\n\n      if (loadOnScroll) {\n        const parent = tableContainerElement.parentNode;\n\n        if (tableContainerElement.scrollHeight <= parent.clientHeight && initialTimesFetched < 5) {\n          setInitialTimesFetched(prev => prev + 1);\n          fetchNextSet();\n        }\n\n        const scrollEvent = e => {\n          const {\n            scrollTop,\n            clientHeight,\n            scrollHeight\n          } = e.target;\n          const offset = scrollHeight / 5;\n          const hitBottom = scrollTop + clientHeight >= scrollHeight - offset;\n\n          if (hitBottom && !fetchingNextSet.current) {\n            fetchNextSet();\n          }\n        };\n\n        tableContainerElement.addEventListener('scroll', scrollEvent);\n      }\n    }\n  }, [results]);\n  useEffect(() => {\n    if (pagination === 'never') {\n      const dataResults = data && data.results;\n      const needsCacheFix = results.length === 0 && dataResults && dataResults.length > 0;\n\n      const setExistingData = () => {\n        setResults(dataResults);\n        fetchingNextSet.current = false;\n      };\n\n      if (needsCacheFix && !autoLoadOnScroll) {\n        setExistingData();\n      }\n\n      if (needsCacheFix && autoLoadOnScroll && skip === 0) {\n        setExistingData();\n      }\n\n      if (needsCacheFix && autoLoadOnScroll && skip !== 0) {\n        setSkip(0);\n      }\n    }\n  }, [results]);\n  useEffect(() => {\n    if (isDev) {\n      if (pagination === 'never') {\n        setShowPagination(false);\n      } else {\n        setShowPagination(true);\n      }\n    }\n  }, [pagination]);\n  useEffect(() => {\n    if (!isDev && data) {\n      switch (pagination) {\n        case 'never':\n          setShowPagination(false);\n          break;\n\n        case 'whenNeeded':\n          if (rowsPerPage >= data.totalCount) {\n            setShowPagination(false);\n          } else {\n            setShowPagination(true);\n          }\n\n          break;\n\n        default:\n        case 'always':\n          setShowPagination(true);\n          break;\n      }\n    }\n  }, [data, rowsPerPage]);\n  useEffect(() => {\n    let amount = 0;\n\n    if (hasToolbar) {\n      amount += toolbarRef.current.clientHeight;\n    }\n\n    if (showPagination) {\n      amount += paginationRef.current.clientHeight;\n    }\n\n    let style;\n\n    if (amount > 0 || !hasToolbar) {\n      style = {\n        height: `calc(100% - ${amount}px)`,\n        borderRadius: `${hasToolbar ? '0rem' : '0.1875rem'}`\n      };\n      setStylesProps({\n        style\n      });\n    } else {\n      setStylesProps(null);\n    }\n  }, [showPagination, hasToolbar]);\n  return <div className={classes.root}>\n        <Paper classes={{\n      root: classes.paper\n    }} square={square} variant={variant} elevation={elevationLevel}>\n          {hasToolbar && <Toolbar ref={toolbarRef} classes={{\n        root: classes.toolbar\n      }}>\n              {titleText && <span className={classes.title}>{titleText}</span>}\n              {searchProperty && !hideSearch && <TextField classes={{\n          root: classes.searchField\n        }} placeholder={`${useText(labelSearchOn)} ${searchPropertyLabel}`} InputProps={{\n          startAdornment: <InputAdornment position=\"start\">\n                        <Search />\n                      </InputAdornment>\n        }} onChange={handleSearch} />}\n            </Toolbar>}\n          <TableContainer ref={tableContainerRef} classes={{\n        root: classes.container\n      }} {...stylesProps}>\n            <Table stickyHeader={stickyHeader} size={size} classes={{\n          root: classes.tableRoot\n        }}>\n              <TableHead>\n                <TableRow classes={{\n              root: classes.headerRow\n            }}>\n                  {renderTableHead()}\n                </TableRow>\n              </TableHead>\n              <TableBody ref={tableRef}>{renderTableContent()}</TableBody>\n              {isDev && <TableBody ref={repeaterRef} className={classes.autoRepeat} />}\n            </Table>\n          </TableContainer>\n          {showPagination && <TablePagination ref={paginationRef} classes={{\n        root: classes.pagination\n      }} rowsPerPageOptions={[5, 10, 25, 50, 100]} labelRowsPerPage={useText(labelRowsPerPage)} labelDisplayedRows={({\n        from,\n        to,\n        count\n      }) => `${from}-${to} ${useText(labelNumberOfPages)} ${count}`} component=\"div\" count={model ? totalCount : takeNum} rowsPerPage={model ? rowsPerPage : takeNum} page={page} onChangePage={handleChangePage} onChangeRowsPerPage={handleChangeRowsPerPage} />}\n        </Paper>\n      </div>;\n})()","styles":"B => theme => {\n  const {\n    env,\n    Styling\n  } = B;\n  const style = new Styling(theme);\n  const isDev = env === 'dev';\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    root: {\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      height: ({\n        options: {\n          height\n        }\n      }) => height\n    },\n    paper: {\n      backgroundColor: ({\n        options: {\n          background\n        }\n      }) => [style.getColor(background), '!important'],\n      height: '100%'\n    },\n    container: {\n      height: '100%'\n    },\n    tableRoot: {\n      tableLayout: 'fixed'\n    },\n    toolbar: {\n      paddingLeft: ['1rem', '!important'],\n      paddingRight: ['1rem', '!important']\n    },\n    title: {\n      color: ({\n        options: {\n          titleType\n        }\n      }) => style.getFontColor(titleType),\n      fontFamily: ({\n        options: {\n          titleType\n        }\n      }) => style.getFontFamily(titleType),\n      fontSize: ({\n        options: {\n          titleType\n        }\n      }) => style.getFontSize(titleType),\n      fontWeight: ({\n        options: {\n          titleType\n        }\n      }) => style.getFontWeight(titleType),\n      textTransform: ({\n        options: {\n          titleType\n        }\n      }) => style.getTextTransform(titleType),\n      letterSpacing: ({\n        options: {\n          titleType\n        }\n      }) => style.getLetterSpacing(titleType),\n      lineHeight: '1.2',\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        fontSize: ({\n          options: {\n            titleType\n          }\n        }) => style.getFontSize(titleType, 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        fontSize: ({\n          options: {\n            titleType\n          }\n        }) => style.getFontSize(titleType, 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        fontSize: ({\n          options: {\n            titleType\n          }\n        }) => style.getFontSize(titleType, 'Desktop')\n      }\n    },\n    headerRow: {\n      backgroundColor: ({\n        options: {\n          backgroundHeader\n        }\n      }) => [style.getColor(backgroundHeader), '!important'],\n      '& div': {\n        borderBottom: `${isDev ? '0.0625rem solid #cccccc' : 0}`\n      },\n      '& th, & div[role=\"columnheader\"]': {\n        borderBottom: `${isDev ? 0 : '0.0625rem solid #cccccc!important'}`,\n        backgroundColor: ({\n          options: {\n            backgroundHeader\n          }\n        }) => [style.getColor(backgroundHeader), '!important']\n      }\n    },\n    bodyRow: {\n      cursor: ({\n        options: {\n          linkTo\n        }\n      }) => linkTo && linkTo.id !== '' && 'pointer',\n      '&:hover td': {\n        backgroundColor: ({\n          options: {\n            linkTo,\n            backgroundRowHover\n          }\n        }) => linkTo && [style.getColor(backgroundRowHover), '!important']\n      }\n    },\n    searchField: {\n      marginLeft: ['auto', '!important'],\n      pointerEvents: isDev && 'none'\n    },\n    pagination: {\n      borderRadius: '0.1875rem',\n      pointerEvents: isDev && 'none',\n      backgroundColor: ({\n        options: {\n          background\n        }\n      }) => [style.getColor(background), '!important']\n    },\n    autoRepeat: {\n      opacity: 0.5\n    },\n    skeleton: {\n      height: `calc(${style.getFont('Body1').Mobile} * 1.2)`,\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        height: `calc(${style.getFont('Body1').Portrait} * 1.2)`\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        height: `calc(${style.getFont('Body1').Landscape} * 1.2)`\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        height: `calc(${style.getFont('Body1').Desktop} * 1.2)`\n      },\n      backgroundColor: '#eee',\n      borderRadius: 8,\n      overflow: 'hidden',\n      '&::after': {\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        backgroundImage: 'linear-gradient(90deg, #eee 25%, #fff 50%, #eee 75%)',\n        backgroundSize: '200% 100%',\n        backgroundRepeat: 'no-repeat',\n        backgroundPositionX: '150%',\n        borderRadius: `calc(${style.getFont('Body2').Landscape} / 2)`,\n        content: '\"\"',\n        animation: 'loading 1.5s infinite'\n      }\n    },\n    '@keyframes loading': {\n      to: {\n        backgroundPositionX: '-150%'\n      }\n    },\n    [`@media ${B.mediaMinWidth(600)}`]: {\n      root: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait')\n      }\n    },\n    [`@media ${B.mediaMinWidth(960)}`]: {\n      root: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape')\n      }\n    },\n    [`@media ${B.mediaMinWidth(1280)}`]: {\n      root: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop')\n      }\n    }\n  };\n}","functions":["Refetch","SetSearchValue"],"triggers":["onLoad","onError","onSuccess","onNoResults","OnRowClick"]},{"name":"DataTableColumn","type":"DATATABLE_COLUMN","allowedTypes":["CONTENT_COMPONENT","CONTAINER_COMPONENT"],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    env,\n    useText,\n    getProperty,\n    Property,\n    useEndpoint\n  } = B;\n  const {\n    TableCell,\n    TableSortLabel\n  } = window.MaterialUI.Core;\n  const {\n    horizontalAlignment,\n    headerText,\n    property,\n    content,\n    sortable\n  } = options;\n  const {\n    headerOnly,\n    handleSort,\n    orderBy,\n    linkTo,\n    handleRowClick,\n    context\n  } = parent || {};\n  const {\n    type\n  } = property;\n  const propertyArray = [property].flat();\n  const {\n    name: propertyName,\n    label: propertyLabel\n  } = getProperty(property) || {};\n  const {\n    field,\n    order = 'asc'\n  } = orderBy || {};\n  const isDev = env === 'dev';\n  const isEmpty = children.length === 0;\n  const contentPlaceholder = isDev && isEmpty ? 'Select property' : '\\u00A0';\n  let myEndpoint = null;\n\n  if (linkTo) {\n    myEndpoint = useEndpoint(linkTo);\n  }\n\n  const bodyText = useText(content);\n  const propContent = isDev ? `{{ ${propertyName} }}` : <Property id={property} />;\n  let columnText = propertyName ? propContent : contentPlaceholder;\n\n  if (type === 'ME_PROPERTY') {\n    columnText = isDev ? `{{ ${propertyName} }}` : useText([property]);\n  }\n\n  if (bodyText) {\n    columnText = bodyText;\n  }\n\n  const header = useText(headerText);\n  let columnHeaderText = propertyLabel || contentPlaceholder;\n\n  if (header) {\n    columnHeaderText = header;\n  }\n\n  const isSortable = propertyName && sortable;\n\n  const createSortHandler = prop => {\n    const sortOrder = order === 'asc' ? 'desc' : 'asc';\n    handleSort(prop, sortOrder);\n  };\n\n  const isFilterSelected = fields => {\n    if (!fields || fields.length !== propertyArray.length) return false;\n\n    for (let index = 0; index < fields.length; index += 1) {\n      if (fields[index] !== propertyArray[index]) return false;\n    }\n\n    return true;\n  };\n\n  const Content = children.length > 0 ? children : <span className={classes.content}>{columnText}</span>;\n  const Header = isSortable ? <TableSortLabel classes={{\n    root: classes.columnSort\n  }} active={isFilterSelected(field)} direction={isFilterSelected(field) && order ? order : 'asc'} onClick={() => createSortHandler(propertyArray)}>\n        <span className={classes.columnHeader}>{columnHeaderText}</span>\n      </TableSortLabel> : <span className={classes.columnHeader}>{columnHeaderText}</span>;\n  return isDev ? <div className={[classes.tableColumn, !headerOnly ? classes.tableColumnBody : '', !headerOnly ? 'MuiTableCell-root' : ''].join(' ')}>\n        {headerOnly ? <TableCell align={horizontalAlignment} component=\"div\">\n            {Header}\n          </TableCell> : Content}\n      </div> : <TableCell classes={{\n    root: classes.root\n  }} align={horizontalAlignment} onClick={() => handleRowClick && handleRowClick(myEndpoint, context)}>\n        {headerOnly ? Header : Content}\n      </TableCell>;\n})()","styles":"B => theme => {\n  const {\n    env,\n    Styling\n  } = B;\n  const style = new Styling(theme);\n  const isDev = env === 'dev';\n  return {\n    tableColumn: {\n      display: 'table-cell',\n      verticalAlign: 'middle',\n      width: ({\n        options: {\n          width\n        }\n      }) => width || 'auto',\n      '& > div': {\n        display: 'block'\n      }\n    },\n    tableColumnBody: {\n      textAlign: ({\n        options: {\n          horizontalAlignment\n        }\n      }) => [horizontalAlignment, '!important'],\n      backgroundColor: ({\n        options: {\n          background\n        }\n      }) => [style.getColor(background), '!important'],\n      borderColor: ({\n        options: {\n          borderColor\n        }\n      }) => [style.getColor(borderColor), '!important']\n    },\n    root: {\n      display: isDev && ['block', '!important'],\n      width: ({\n        options: {\n          width\n        }\n      }) => width || 'auto',\n      backgroundColor: ({\n        options: {\n          background\n        }\n      }) => [style.getColor(background), '!important'],\n      borderColor: ({\n        options: {\n          borderColor\n        }\n      }) => [style.getColor(borderColor), '!important']\n    },\n    columnHeader: {\n      color: ({\n        options: {\n          type\n        }\n      }) => style.getFontColor(type),\n      fontFamily: ({\n        options: {\n          type\n        }\n      }) => style.getFontFamily(type),\n      fontSize: ({\n        options: {\n          type\n        }\n      }) => style.getFontSize(type),\n      fontWeight: ({\n        options: {\n          type\n        }\n      }) => style.getFontWeight(type),\n      textTransform: ({\n        options: {\n          type\n        }\n      }) => style.getTextTransform(type),\n      letterSpacing: ({\n        options: {\n          type\n        }\n      }) => style.getLetterSpacing(type),\n      lineHeight: '1.2',\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        fontSize: ({\n          options: {\n            type\n          }\n        }) => style.getFontSize(type, 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        fontSize: ({\n          options: {\n            type\n          }\n        }) => style.getFontSize(type, 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        fontSize: ({\n          options: {\n            type\n          }\n        }) => style.getFontSize(type, 'Desktop')\n      }\n    },\n    content: {\n      color: ({\n        options: {\n          bodyType\n        }\n      }) => style.getFontColor(bodyType),\n      fontFamily: ({\n        options: {\n          bodyType\n        }\n      }) => style.getFontFamily(bodyType),\n      fontSize: ({\n        options: {\n          bodyType\n        }\n      }) => style.getFontSize(bodyType),\n      fontWeight: ({\n        options: {\n          bodyType\n        }\n      }) => style.getFontWeight(bodyType),\n      textTransform: ({\n        options: {\n          bodyType\n        }\n      }) => style.getTextTransform(bodyType),\n      letterSpacing: ({\n        options: {\n          bodyType\n        }\n      }) => style.getLetterSpacing(bodyType),\n      lineHeight: '1.2',\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        fontSize: ({\n          options: {\n            bodyType\n          }\n        }) => style.getFontSize(bodyType, 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        fontSize: ({\n          options: {\n            bodyType\n          }\n        }) => style.getFontSize(bodyType, 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        fontSize: ({\n          options: {\n            bodyType\n          }\n        }) => style.getFontSize(bodyType, 'Desktop')\n      }\n    },\n    columnSort: {\n      pointerEvents: isDev && 'none',\n      '& .MuiSvgIcon-root': {\n        opacity: isDev && 0.5\n      }\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"DateTimePicker","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    disabled,\n    error,\n    placeholder,\n    variant,\n    inputvariant,\n    type,\n    dateFormat,\n    timeFormat,\n    dateTimeFormat,\n    size,\n    fullWidth,\n    margin,\n    helperText,\n    disableToolbar,\n    hideLabel,\n    customModelAttribute: customModelAttributeObj,\n    use24HourClockDateTime,\n    use24HourClockTime,\n    nameAttribute,\n    locale\n  } = options;\n  const {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n    KeyboardDatePicker,\n    KeyboardDateTimePicker\n  } = window.MaterialUI.Pickers;\n  const {\n    DateFnsUtils\n  } = window.MaterialUI;\n  const {\n    nlLocale,\n    enLocale\n  } = window.MaterialUI.DateLocales;\n  const {\n    AccessTime,\n    Event\n  } = window.MaterialUI.Icons;\n  const {\n    useText,\n    env,\n    getCustomModelAttribute\n  } = B;\n  const DateFns = new DateFnsUtils();\n  const isDev = env === 'dev';\n  const [selectedDate, setSelectedDate] = useState(null);\n  const helper = useText(helperText);\n  const placeholderText = useText(placeholder);\n  const localeMap = {\n    nl: nlLocale,\n    en: enLocale\n  };\n  const {\n    id: customModelAttributeId,\n    label = [],\n    value: defaultValue = []\n  } = customModelAttributeObj;\n  const strDefaultValue = useText(defaultValue);\n  const labelText = useText(label);\n  const customModelAttribute = getCustomModelAttribute(customModelAttributeId);\n  const {\n    name: customModelAttributeName,\n    validations: {\n      required\n    } = {}\n  } = customModelAttribute || {};\n  const nameAttributeValue = useText(nameAttribute);\n\n  const isValidDate = date => date instanceof Date && !isNaN(date);\n\n  const changeHandler = date => {\n    setSelectedDate(date);\n  };\n\n  const setDefaultDate = (defaultFormat, givenFormat) => {\n    if (!selectedDate && strDefaultValue) {\n      const propDefaultParse = defaultFormat ? DateFns.parse(strDefaultValue, defaultFormat) : new Date(strDefaultValue);\n      const formatDefaultParse = DateFns.parse(strDefaultValue, givenFormat);\n\n      if (isValidDate(propDefaultParse)) {\n        setSelectedDate(propDefaultParse);\n      } else if (isValidDate(formatDefaultParse)) {\n        setSelectedDate(formatDefaultParse);\n      } else {\n        setSelectedDate(DateFns.parse('00:00:00', 'HH:mm:ss'));\n      }\n    }\n  };\n\n  B.defineFunction('Clear', () => setSelectedDate(null));\n  let DateTimeComponent;\n  let format;\n  let resultString;\n  let use24HourClock = true;\n\n  switch (type) {\n    case 'date':\n      {\n        DateTimeComponent = KeyboardDatePicker;\n        format = dateFormat || 'dd/MM/yyyy';\n        setDefaultDate('yyyy-MM-dd', format);\n        resultString = isValidDate(selectedDate) ? DateFns.format(selectedDate, 'yyyy-MM-dd') : null;\n        break;\n      }\n\n    case 'datetime':\n      {\n        DateTimeComponent = KeyboardDateTimePicker;\n        format = dateTimeFormat || 'dd/MM/yyyy HH:mm:ss';\n        use24HourClock = use24HourClockDateTime;\n        setDefaultDate(null, format);\n        resultString = isValidDate(selectedDate) ? new Date(selectedDate).toISOString() : new Date().toISOString();\n        break;\n      }\n\n    case 'time':\n      {\n        DateTimeComponent = KeyboardTimePicker;\n        format = timeFormat || 'HH:mm:ss';\n        use24HourClock = use24HourClockTime;\n        setDefaultDate('HH:mm:ss', format);\n        resultString = isValidDate(selectedDate) ? DateFns.format(selectedDate, 'HH:mm:ss') : null;\n        break;\n      }\n\n    default:\n  }\n\n  const DateTimeCmp = <DateTimeComponent name={nameAttributeValue || customModelAttributeName} value={selectedDate} size={size} classes={{\n    root: classes.formControl\n  }} variant={variant} placeholder={placeholderText} fullWidth={fullWidth} onChange={changeHandler} inputVariant={inputvariant} InputProps={{\n    inputProps: {\n      name: nameAttributeValue || customModelAttributeName,\n      tabIndex: isDev && -1\n    }\n  }} KeyboardButtonProps={{\n    tabIndex: isDev && -1\n  }} required={required} disabled={disabled} label={!hideLabel && labelText} error={error} margin={margin} helperText={helper} disableToolbar={disableToolbar} format={format} PopoverProps={{\n    classes: {\n      root: classes.popover\n    }\n  }} DialogProps={{\n    className: classes.dialog\n  }} ampm={!use24HourClock} keyboardIcon={type === 'time' ? <AccessTime /> : <Event />} />;\n  return isDev ? <div className={classes.root}>\n        <MuiPickersUtilsProvider utils={DateFnsUtils} locale={localeMap[locale]}>\n          {variant === 'static' ? <div className={classes.static}>{DateTimeCmp}</div> : DateTimeCmp}\n        </MuiPickersUtilsProvider>\n      </div> : <MuiPickersUtilsProvider utils={DateFnsUtils} locale={localeMap[locale]}>\n        <input type=\"hidden\" name={nameAttributeValue || customModelAttributeName} value={resultString} />\n        {variant === 'static' ? <div className={classes.static}>{DateTimeCmp}</div> : DateTimeCmp}\n      </MuiPickersUtilsProvider>;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    root: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    dialog: {\n      '& .MuiPickersToolbar-toolbar, & .MuiPickersDay-daySelected': {\n        backgroundColor: ({\n          options: {\n            backgroundColorPopup\n          }\n        }) => [style.getColor(backgroundColorPopup), '!important']\n      },\n      '& .MuiButton-textPrimary': {\n        color: ({\n          options: {\n            backgroundColorPopup\n          }\n        }) => [style.getColor(backgroundColorPopup), '!important']\n      }\n    },\n    popover: {\n      '& .MuiPickersToolbar-toolbar, & .MuiPickersDay-daySelected': {\n        backgroundColor: ({\n          options: {\n            backgroundColorPopup\n          }\n        }) => [style.getColor(backgroundColorPopup), '!important']\n      }\n    },\n    formControl: {\n      '& > label': {\n        color: ({\n          options: {\n            labelColor\n          }\n        }) => [style.getColor(labelColor), '!important'],\n        zIndex: ({\n          options: {\n            inputvariant\n          }\n        }) => inputvariant === 'standard' ? 1 : null,\n        '&.Mui-focused': {\n          color: ({\n            options: {\n              borderFocusColor\n            }\n          }) => [style.getColor(borderFocusColor), '!important']\n        },\n        '&.Mui-error': {\n          color: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      },\n      '& > p': {\n        color: ({\n          options: {\n            helperColor\n          }\n        }) => [style.getColor(helperColor), '!important'],\n        '&.Mui-error': {\n          color: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        }\n      },\n      '& .MuiInputBase-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important'],\n        backgroundColor: ({\n          options: {\n            backgroundColor\n          }\n        }) => [style.getColor(backgroundColor), '!important'],\n        '&:hover': {\n          '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n            borderColor: ({\n              options: {\n                borderHoverColor\n              }\n            }) => [style.getColor(borderHoverColor), '!important']\n          }\n        },\n        '&.Mui-focused, &.Mui-focused:hover': {\n          '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n            borderColor: ({\n              options: {\n                borderFocusColor\n              }\n            }) => [style.getColor(borderFocusColor), '!important']\n          }\n        },\n        '& fieldset': {\n          top: ({\n            options: {\n              hideLabel\n            }\n          }) => hideLabel ? 0 : null\n        },\n        '& legend': {\n          display: ({\n            options: {\n              hideLabel\n            }\n          }) => hideLabel ? ['none', '!important'] : null\n        },\n        '& input': {\n          '&::placeholder': {\n            color: ({\n              options: {\n                placeholderColor\n              }\n            }) => [style.getColor(placeholderColor), '!important']\n          }\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      },\n      '& .MuiIconButton-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important']\n      },\n      '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n        borderColor: ({\n          options: {\n            borderColor\n          }\n        }) => [style.getColor(borderColor), '!important']\n      },\n      '& .MuiInput-underline, & .MuiFilledInput-underline': {\n        '&::before, &::after': {\n          borderColor: ({\n            options: {\n              borderColor\n            }\n          }) => [style.getColor(borderColor), '!important']\n        },\n        '&:hover': {\n          '&::before, &::after': {\n            borderColor: ({\n              options: {\n                borderHoverColor\n              }\n            }) => [style.getColor(borderHoverColor), '!important']\n          }\n        },\n        '&.Mui-focused::before, &.Mui-focused::after, &.Mui-focused:hover::before, &.Mui-focused:hover::after': {\n          borderColor: ({\n            options: {\n              borderFocusColor\n            }\n          }) => [style.getColor(borderFocusColor), '!important']\n        }\n      },\n      '& .MuiInputBase-root.Mui-error, & .MuiInputBase-root.Mui-error:hover, & .MuiInputBase-root.Mui-error.Mui-focused, & .MuiInputBase-root.Mui-error.Mui-focused:hover': {\n        '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n          borderColor: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        },\n        '&.MuiInput-underline, &.MuiFilledInput-underline': {\n          '&::before, &::after': {\n            borderColor: ({\n              options: {\n                errorColor\n              }\n            }) => [style.getColor(errorColor), '!important']\n          },\n          '&:hover': {\n            '&::before, &::after': {\n              borderColor: ({\n                options: {\n                  errorColor\n                }\n              }) => [style.getColor(errorColor), '!important']\n            }\n          },\n          '&.Mui-focused::before, &.Mui-focused::after, &.Mui-focused:hover::before, &.Mui-focused:hover::after': {\n            borderColor: ({\n              options: {\n                errorColor\n              }\n            }) => [style.getColor(errorColor), '!important']\n          }\n        }\n      }\n    },\n    static: {\n      '& .MuiPickersStaticWrapper-staticWrapperRoot': {\n        '& .MuiToolbar-root, & .MuiPickersDay-daySelected': {\n          backgroundColor: ({\n            options: {\n              backgroundColorPopup\n            }\n          }) => [style.getColor(backgroundColorPopup), '!important']\n        }\n      }\n    }\n  };\n}","functions":["Clear"],"triggers":[]},{"name":"Dialog","type":"CONTENT_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    isVisible,\n    isFullscreen,\n    width\n  } = options;\n  const {\n    Dialog\n  } = window.MaterialUI.Core;\n  const isDev = B.env === 'dev';\n  const [isOpen, setIsOpen] = useState(isVisible);\n\n  const closeDialog = () => setIsOpen(false);\n\n  const openDialog = () => setIsOpen(true);\n\n  useEffect(() => {\n    setIsOpen(isVisible);\n  }, [isVisible]);\n  B.defineFunction('Show', openDialog);\n  B.defineFunction('Hide', closeDialog);\n  B.defineFunction('Show/Hide', () => setIsOpen(s => !s));\n  const isEmpty = !children.length;\n\n  const EmptyCmp = () => <div className={[classes.dialog, isEmpty ? classes.empty : classes.dirty, isFullscreen ? classes.fullScreen : classes.windowed].join(' ')}>\n        {!isEmpty ? children : 'Dialog Content'}\n      </div>;\n\n  const DialogCmp = <Dialog open={isOpen} onClose={closeDialog} fullScreen={isFullscreen} fullWidth maxWidth={width} aria-labelledby=\"modal-dialog\" keepMounted>\n        {children}\n      </Dialog>;\n  return isDev ? <div className={isOpen ? classes.overlay : classes.root}>\n        {isOpen ? <EmptyCmp /> : 'Dialog'}\n      </div> : DialogCmp;\n})()","styles":"() => () => {\n  const {\n    useTheme\n  } = window.MaterialUI.Core;\n  const theme = useTheme();\n  return {\n    root: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5',\n      minHeight: '2rem',\n      width: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box'\n    },\n    overlay: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      position: 'absolute',\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      top: '0.25rem',\n      left: '0.25rem',\n      bottom: '0.25rem',\n      right: '0.25rem',\n      zIndex: 2,\n      boxSizing: 'border-box'\n    },\n    empty: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: '1rem',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    },\n    dirty: {\n      backgroundColor: '#fff'\n    },\n    dialog: {\n      display: 'flex',\n      flexDirection: 'column',\n      overflowY: 'auto'\n    },\n    fullScreen: {\n      width: '100%',\n      height: '100%'\n    },\n    windowed: {\n      borderRadius: '0.25rem',\n      width: ({\n        options: {\n          width\n        }\n      }) => Math.max(theme.breakpoints.values[width], 444),\n      margin: '2rem',\n      maxHeight: 'calc(100% - 4rem);'\n    }\n  };\n}","functions":["Show","Hide","Show/Hide"],"triggers":[]},{"name":"Divider","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"<div className={classes.root}>\n      <div className={B.env === 'dev' ? classes.clickSpace : ''}>\n        <hr className={classes.divider} />\n      </div>\n    </div>","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    root: {\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      width: ({\n        options: {\n          outerSpacing\n        }\n      }) => `calc(100% - ${getSpacing(outerSpacing[1])} - ${getSpacing(outerSpacing[3])})`,\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait'),\n        width: ({\n          options: {\n            outerSpacing\n          }\n        }) => `calc(100% - ${getSpacing(outerSpacing[1], 'Portrait')} - ${getSpacing(outerSpacing[3], 'Portrait')})`\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape'),\n        width: ({\n          options: {\n            outerSpacing\n          }\n        }) => `calc(100% - ${getSpacing(outerSpacing[1], 'Landscape')} - ${getSpacing(outerSpacing[3], 'Landscape')})`\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop'),\n        width: ({\n          options: {\n            outerSpacing\n          }\n        }) => `calc(100% - ${getSpacing(outerSpacing[1], 'Desktop')} - ${getSpacing(outerSpacing[3], 'Desktop')})`\n      }\n    },\n    clickSpace: {\n      padding: '0.25rem 0'\n    },\n    divider: {\n      height: ({\n        options: {\n          thickness\n        }\n      }) => style.getBorderSize(thickness),\n      margin: 0,\n      backgroundColor: ({\n        options: {\n          color\n        }\n      }) => style.getColor(color),\n      border: 'none'\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"Drawer","type":"BODY_COMPONENT","allowedTypes":["DRAWER_SIDEBAR","DRAWER_CONTAINER"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    Children,\n    env\n  } = B;\n  const isEmpty = children.length === 0;\n  const isPristine = isEmpty && env === 'dev';\n  const {\n    drawerWidth,\n    drawerType,\n    persistentAnchor,\n    temporaryAnchor,\n    breakpoint,\n    visibility\n  } = options;\n  const isTemporary = drawerType === 'temporary';\n  const anchor = isTemporary ? temporaryAnchor : persistentAnchor;\n  const [isOpen, setIsOpen] = useState(visibility);\n\n  const closeDrawer = () => setIsOpen(false);\n\n  const openDrawer = () => setIsOpen(true);\n\n  const toggleDrawer = () => setIsOpen(s => !s);\n\n  useEffect(() => {\n    setIsOpen(visibility);\n  }, [visibility]);\n  return <div className={[classes.root, isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')}>\n        {isPristine ? 'Drawer' : <Children isOpen={isOpen} anchor={anchor} openDrawer={openDrawer} closeDrawer={closeDrawer} toggleDrawer={toggleDrawer} drawerWidth={drawerWidth} drawerType={drawerType} isTemporary={isTemporary} isPersistent={drawerType === 'persistent'} breakpoint={breakpoint}>\n            {children}\n          </Children>}\n      </div>;\n})()","styles":"() => () => ({\n  root: {\n    display: 'flex',\n    height: '100%',\n    flex: 1,\n    position: 'relative',\n    flexDirection: ({\n      options\n    }) => {\n      const {\n        drawerType,\n        persistentAnchor,\n        temporaryAnchor\n      } = options;\n      const anchor = drawerType === 'temporary' ? temporaryAnchor : persistentAnchor;\n\n      switch (anchor) {\n        case 'right':\n          return 'row-reverse';\n\n        case 'top':\n          return 'column';\n\n        case 'bottom':\n          return 'column-reverse';\n\n        default:\n          return 'row';\n      }\n    }\n  },\n  empty: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase'\n  },\n  pristine: {\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5'\n  }\n})","functions":[],"triggers":[]},{"name":"DrawerSidebar","type":"DRAWER_SIDEBAR","allowedTypes":["BODY_COMPONENT","LAYOUT_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    Hidden,\n    Drawer,\n    useMediaQuery,\n    useTheme\n  } = window.MaterialUI.Core;\n  const {\n    isOpen,\n    toggleDrawer,\n    openDrawer,\n    closeDrawer,\n    anchor,\n    isTemporary,\n    isPersistent,\n    breakpoint\n  } = parent;\n  const isEmpty = children.length === 0;\n  const isDev = B.env === 'dev';\n  const isPristine = isEmpty && isDev;\n  const aboveBreakpoint = useMediaQuery(useTheme().breakpoints.up(breakpoint));\n  const activeTemporary = isTemporary || isPersistent && !aboveBreakpoint;\n  B.defineFunction('Show', openDrawer);\n  B.defineFunction('Hide', closeDrawer);\n  B.defineFunction('Show/Hide', toggleDrawer);\n  const TempDrawer = <Drawer variant={activeTemporary ? 'temporary' : 'persistent'} open={isOpen} anchor={anchor} onClose={toggleDrawer} classes={{\n    paper: classes.paper\n  }} ModalProps={{\n    keepMounted: true\n  }}>\n        {children}\n      </Drawer>;\n  if (!isDev && isTemporary) return TempDrawer;\n  const DrawerComponent = <div className={classes.wrapper}>\n        <Hidden smUp={breakpoint === 'sm'} mdUp={breakpoint === 'md'} lgUp={breakpoint === 'lg'}>\n          {TempDrawer}\n        </Hidden>\n        <Hidden xsDown>\n          <Drawer variant={activeTemporary ? 'temporary' : 'persistent'} open={isOpen} anchor={anchor} classes={{\n        paper: classes.paper\n      }}>\n            {children}\n          </Drawer>\n        </Hidden>\n      </div>;\n  if (!isDev) return DrawerComponent;\n  if (!isOpen) return <div />;\n  return <div className={[isTemporary && classes.overlay, classes.wrapper].join(' ')}>\n        {!isEmpty ? <Drawer variant=\"persistent\" open anchor={anchor} className={classes.drawerDev} classes={{\n      paper: [classes.paper, classes.paperDev]\n    }}>\n            {children}\n          </Drawer> : <div className={[classes.drawerDev, isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')}>\n            Drawer Sidebar\n          </div>}\n      </div>;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  const staticPositioning = B.env === 'dev' ? {\n    position: 'static !important',\n    zIndex: '0 !important'\n  } : {};\n\n  const computeWidth = ({\n    parent\n  }) => {\n    const {\n      anchor,\n      drawerWidth\n    } = parent;\n    return ['left', 'right'].includes(anchor) ? drawerWidth : '100%';\n  };\n\n  return {\n    wrapper: {\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop')\n      }\n    },\n    paper: { ...staticPositioning,\n      width: computeWidth,\n      '&.MuiPaper-root': {\n        boxSizing: 'border-box',\n        backgroundColor: ({\n          options: {\n            themeBgColor\n          }\n        }) => [style.getColor(themeBgColor), '!important']\n      },\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      paddingTop: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[0]),\n      paddingRight: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[1]),\n      paddingBottom: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[2]),\n      paddingLeft: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[3]),\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait'),\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Portrait'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Portrait'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Portrait'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape'),\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Landscape'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Landscape'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Landscape'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop'),\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Desktop'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Desktop'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Desktop'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Desktop')\n      }\n    },\n    drawerDev: {\n      display: 'flex',\n      height: '100vh',\n      overflowY: 'hidden',\n      width: computeWidth,\n      alignSelf: ({\n        parent: {\n          anchor\n        }\n      }) => anchor === 'bottom' ? 'flex-end' : 'flex-start'\n    },\n    paperDev: {\n      width: computeWidth,\n      alignSelf: ({\n        parent: {\n          anchor\n        }\n      }) => anchor === 'bottom' ? 'flex-end' : 'flex-start',\n      color: 'blue !important',\n      backgroundColor: ({\n        options: {\n          themeBgColor\n        }\n      }) => [style.getColor(themeBgColor), '!important'],\n      paddingTop: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[0]),\n      paddingRight: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[1]),\n      paddingBottom: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[2]),\n      paddingLeft: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[3]),\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Portrait'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Portrait'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Portrait'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Landscape'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Landscape'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Landscape'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Desktop'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Desktop'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Desktop'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Desktop')\n      }\n    },\n    empty: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: computeWidth,\n      height: ({\n        parent: {\n          anchor\n        }\n      }) => ['top', 'bottom'].includes(anchor) ? '20%' : '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5 !important'\n    },\n    overlay: {\n      display: 'flex',\n      justifyContent: ({\n        parent: {\n          anchor\n        }\n      }) => anchor === 'right' ? 'flex-end' : 'flex-start',\n      position: 'absolute',\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      width: '100%',\n      height: '100%',\n      zIndex: 2\n    }\n  };\n}","functions":["Show","Hide","Show/Hide"],"triggers":[]},{"name":"DrawerContainer","type":"DRAWER_CONTAINER","allowedTypes":["LAYOUT_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT","BODY_COMPONENT"],"orientation":"VERTICAL","jsx":"(() => {\n  const isEmpty = children.length === 0;\n  const isDev = B.env === 'dev';\n  const isPristine = isEmpty && isDev;\n  const {\n    isOpen,\n    isPersistent,\n    breakpoint\n  } = parent;\n  const showDrawer = isPersistent && isOpen && !isDev;\n  return <div className={classes.outerSpacing}>\n        <div className={[classes.root, isEmpty ? classes.empty : '', isPristine ? classes.pristine : '', showDrawer && breakpoint === 'xs' ? classes.rootShiftxs : '', showDrawer && breakpoint === 'sm' ? classes.rootShiftsm : '', showDrawer && breakpoint === 'md' ? classes.rootShiftmd : '', showDrawer && breakpoint === 'lg' ? classes.rootShiftlg : ''].join(' ')}>\n          {isPristine ? 'Page content' : children}\n        </div>\n      </div>;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  const {\n    useTheme\n  } = window.MaterialUI.Core;\n  const theme = useTheme();\n  return {\n    root: {\n      flexGrow: 1,\n      overflowY: 'auto',\n      backgroundColor: ({\n        options: {\n          themeBgColor,\n          bgColor\n        }\n      }) => style.getColor(themeBgColor) || bgColor,\n      boxSizing: 'border-box',\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      }),\n      paddingTop: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[0]),\n      paddingRight: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[1]),\n      paddingBottom: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[2]),\n      paddingLeft: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[3]),\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Portrait'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Portrait'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Portrait'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Landscape'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Landscape'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Landscape'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0], 'Desktop'),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1], 'Desktop'),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2], 'Desktop'),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3], 'Desktop')\n      }\n    },\n    outerSpacing: {\n      width: '100%',\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop')\n      }\n    },\n    rootShiftxs: {\n      [theme.breakpoints.up('xs')]: {\n        transition: theme.transitions.create('margin', {\n          easing: theme.transitions.easing.easeOut,\n          duration: theme.transitions.duration.enteringScreen\n        }),\n        marginLeft: ({\n          parent\n        }) => {\n          const {\n            isTemporary,\n            drawerWidth,\n            anchor\n          } = parent;\n          return !isTemporary && anchor === 'left' ? drawerWidth : 0;\n        },\n        marginRight: ({\n          parent\n        }) => {\n          const {\n            isTemporary,\n            drawerWidth,\n            anchor\n          } = parent;\n          return !isTemporary && anchor === 'right' ? drawerWidth : 0;\n        }\n      }\n    },\n    rootShiftsm: {\n      [theme.breakpoints.up('sm')]: {\n        transition: theme.transitions.create('margin', {\n          easing: theme.transitions.easing.easeOut,\n          duration: theme.transitions.duration.enteringScreen\n        }),\n        marginLeft: ({\n          parent\n        }) => {\n          const {\n            isTemporary,\n            drawerWidth,\n            anchor\n          } = parent;\n          return !isTemporary && anchor === 'left' ? drawerWidth : 0;\n        },\n        marginRight: ({\n          parent\n        }) => {\n          const {\n            isTemporary,\n            drawerWidth,\n            anchor\n          } = parent;\n          return !isTemporary && anchor === 'right' ? drawerWidth : 0;\n        }\n      }\n    },\n    rootShiftmd: {\n      [theme.breakpoints.up('md')]: {\n        transition: theme.transitions.create('margin', {\n          easing: theme.transitions.easing.easeOut,\n          duration: theme.transitions.duration.enteringScreen\n        }),\n        marginLeft: ({\n          parent\n        }) => {\n          const {\n            isTemporary,\n            drawerWidth,\n            anchor\n          } = parent;\n          return !isTemporary && anchor === 'left' ? drawerWidth : 0;\n        },\n        marginRight: ({\n          parent\n        }) => {\n          const {\n            isTemporary,\n            drawerWidth,\n            anchor\n          } = parent;\n          return !isTemporary && anchor === 'right' ? drawerWidth : 0;\n        }\n      }\n    },\n    rootShiftlg: {\n      [theme.breakpoints.up('lg')]: {\n        transition: theme.transitions.create('margin', {\n          easing: theme.transitions.easing.easeOut,\n          duration: theme.transitions.duration.enteringScreen\n        }),\n        marginLeft: ({\n          parent\n        }) => {\n          const {\n            isTemporary,\n            drawerWidth,\n            anchor\n          } = parent;\n          return !isTemporary && anchor === 'left' ? drawerWidth : 0;\n        },\n        marginRight: ({\n          parent\n        }) => {\n          const {\n            isTemporary,\n            drawerWidth,\n            anchor\n          } = parent;\n          return !isTemporary && anchor === 'right' ? drawerWidth : 0;\n        }\n      }\n    },\n    empty: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '100%',\n      width: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5 !important'\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"ExpansionPanel","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    ExpansionPanel,\n    ExpansionPanelSummary,\n    ExpansionPanelDetails,\n    Typography\n  } = window.MaterialUI.Core;\n  const {\n    ExpandMore\n  } = window.MaterialUI.Icons;\n  const {\n    useText,\n    env\n  } = B;\n  const isDev = env === 'dev';\n  const isEmpty = children.length === 0;\n  const isPristine = isEmpty && isDev;\n  const {\n    title,\n    disabled,\n    defaultExpanded,\n    square,\n    variant,\n    elevation\n  } = options;\n  const [expanded, setExpanded] = useState(defaultExpanded);\n\n  const closePanel = () => setExpanded(false);\n\n  const openPanel = () => setExpanded(true);\n\n  const togglePanel = () => setExpanded(s => !s);\n\n  B.defineFunction('Expand', openPanel);\n  B.defineFunction('Collapse', closePanel);\n  B.defineFunction('Expand/Collapse', togglePanel);\n  useEffect(() => {\n    if (isDev) {\n      setExpanded(defaultExpanded);\n    }\n  }, [defaultExpanded, isDev]);\n  const PlaceHolder = <div className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')} />;\n\n  const onClick = () => {\n    if (isDev) return;\n    togglePanel();\n  };\n\n  const panelOptions = {\n    disabled,\n    defaultExpanded,\n    square,\n    variant,\n    elevation: variant === 'flat' ? 0 : elevation,\n    expanded\n  };\n  const panelSummaryOptions = {\n    onClick,\n    expandIcon: <ExpandMore />\n  };\n  const ExpansionPanelComponent = <ExpansionPanel {...panelOptions}>\n        <ExpansionPanelSummary {...panelSummaryOptions}>\n          <Typography>{useText(title)}</Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails className={classes.panelDetails}>\n          {isEmpty ? PlaceHolder : children}\n        </ExpansionPanelDetails>\n      </ExpansionPanel>;\n  return <div className={classes.panel}>{ExpansionPanelComponent}</div>;\n})()","styles":"B => theme => {\n  const style = new B.Styling(theme);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    panelDetails: {\n      '&.MuiExpansionPanelDetails-root': {\n        paddingTop: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[0]),\n        paddingRight: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[1]),\n        paddingBottom: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[2]),\n        paddingLeft: ({\n          options: {\n            innerSpacing\n          }\n        }) => getSpacing(innerSpacing[3]),\n        [`@media ${B.mediaMinWidth(600)}`]: {\n          paddingTop: ({\n            options: {\n              innerSpacing\n            }\n          }) => getSpacing(innerSpacing[0], 'Portrait'),\n          paddingRight: ({\n            options: {\n              innerSpacing\n            }\n          }) => getSpacing(innerSpacing[1], 'Portrait'),\n          paddingBottom: ({\n            options: {\n              innerSpacing\n            }\n          }) => getSpacing(innerSpacing[2], 'Portrait'),\n          paddingLeft: ({\n            options: {\n              innerSpacing\n            }\n          }) => getSpacing(innerSpacing[3], 'Portrait')\n        },\n        [`@media ${B.mediaMinWidth(960)}`]: {\n          paddingTop: ({\n            options: {\n              innerSpacing\n            }\n          }) => getSpacing(innerSpacing[0], 'Landscape'),\n          paddingRight: ({\n            options: {\n              innerSpacing\n            }\n          }) => getSpacing(innerSpacing[1], 'Landscape'),\n          paddingBottom: ({\n            options: {\n              innerSpacing\n            }\n          }) => getSpacing(innerSpacing[2], 'Landscape'),\n          paddingLeft: ({\n            options: {\n              innerSpacing\n            }\n          }) => getSpacing(innerSpacing[3], 'Landscape')\n        },\n        [`@media ${B.mediaMinWidth(1280)}`]: {\n          paddingTop: ({\n            options: {\n              innerSpacing\n            }\n          }) => getSpacing(innerSpacing[0], 'Desktop'),\n          paddingRight: ({\n            options: {\n              innerSpacing\n            }\n          }) => getSpacing(innerSpacing[1], 'Desktop'),\n          paddingBottom: ({\n            options: {\n              innerSpacing\n            }\n          }) => getSpacing(innerSpacing[2], 'Desktop'),\n          paddingLeft: ({\n            options: {\n              innerSpacing\n            }\n          }) => getSpacing(innerSpacing[3], 'Desktop')\n        }\n      }\n    },\n    panel: {\n      display: 'flex',\n      flexDirection: 'column',\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop')\n      }\n    },\n    empty: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '4rem',\n      height: '100%',\n      width: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5',\n      '&::after': {\n        content: '\"Expansion panel\"'\n      }\n    }\n  };\n}","functions":["Expand","Collapse","Expand/Collapse"],"triggers":[]},{"name":"FileUpload","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    env,\n    useText,\n    useFileUpload,\n    getCustomModelAttribute\n  } = B;\n  const {\n    FormControl,\n    FormControlLabel,\n    FormHelperText,\n    Button,\n    Typography,\n    IconButton\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    Close\n  } = Icons;\n  const {\n    hideDefaultError,\n    disabled,\n    helperText,\n    fullWidth,\n    size,\n    accept,\n    margin,\n    variant,\n    icon,\n    iconPosition,\n    buttonText,\n    multiple,\n    hideLabel,\n    customModelAttribute: customModelAttributeObj,\n    nameAttribute\n  } = options;\n  const isDev = env === 'dev';\n  const inputRef = React.createRef();\n  const [uploads, setUploads] = useState({\n    files: [],\n    data: [],\n    failureMessage: []\n  });\n  const helper = useText(helperText);\n  const {\n    id: customModelAttributeId,\n    label = []\n  } = customModelAttributeObj;\n  const labelText = useText(label);\n  const customModelAttribute = getCustomModelAttribute(customModelAttributeId);\n  const {\n    name: customModelAttributeName,\n    validations: {\n      required\n    } = {}\n  } = customModelAttribute || {};\n  const nameAttributeValue = useText(nameAttribute);\n  const requiredText = required ? '*' : '';\n\n  const handleChange = e => {\n    setUploads({ ...uploads,\n      files: e.target.files\n    });\n  };\n\n  const clearFiles = e => {\n    e.preventDefault();\n    setUploads({\n      files: [],\n      data: [],\n      failureMessage: []\n    });\n  };\n\n  const {\n    files,\n    data,\n    failureMessage\n  } = uploads;\n  const acceptedValue = useText(accept) || 'image/*';\n  const acceptList = acceptedValue.split(',').map(item => item.trim());\n  const helperValue = !hideDefaultError && failureMessage.length > 0 ? failureMessage : helper;\n  const [uploadFile, {\n    loading\n  } = {}] = useFileUpload({\n    options: {\n      variables: {\n        fileList: Array.from(files),\n        mimeType: acceptList\n      },\n      onError: errorData => {\n        B.triggerEvent('onError', errorData);\n        setUploads({ ...uploads,\n          failureMessage: [errorData.message]\n        });\n      },\n      onCompleted: uploadData => {\n        const {\n          uploadFiles\n        } = uploadData;\n        const [succeededData, failedData] = uploadFiles.reduce((result, d) => {\n          result[d.url.startsWith('http') ? 0 : 1].push(d);\n          return result;\n        }, [[], []]);\n        const formattedFailedData = failedData.map(d => <div>{`File: ${d.name} failed with error: ${d.url}`}</div>);\n\n        if (succeededData.length > 0) {\n          B.triggerEvent('onSuccess', succeededData);\n        } else {\n          B.triggerEvent('onNoResults');\n        }\n\n        if (failedData.length > 0) {\n          B.triggerEvent('onError', formattedFailedData);\n        }\n\n        setUploads({ ...uploads,\n          data: multiple ? data.concat(succeededData) : succeededData,\n          failureMessage: formattedFailedData\n        });\n      }\n    }\n  });\n\n  const removeFileFromList = fileUrl => {\n    const newList = data.filter(d => d.url !== fileUrl);\n    setUploads({ ...uploads,\n      data: newList\n    });\n  };\n\n  const UploadComponent = <div className={[classes.control, fullWidth ? classes.fullwidth : ''].join(' ')}>\n        <input accept={acceptedValue} className={classes.input} multiple={multiple} type=\"file\" onChange={handleChange} ref={inputRef} />\n        <Button size={size} variant={variant} classes={{\n      root: classes.button,\n      contained: classes.contained,\n      outlined: classes.outlined\n    }} component=\"span\" disabled={disabled} startIcon={variant !== 'icon' && icon !== 'None' && iconPosition === 'start' && React.createElement(Icons[icon])} endIcon={variant !== 'icon' && icon !== 'None' && iconPosition === 'end' && React.createElement(Icons[icon])}>\n          {variant === 'icon' ? React.createElement(Icons[icon === 'None' ? 'Error' : icon], {\n        fontSize: size\n      }) : useText(buttonText)}\n        </Button>\n        {data.length > 0 && <input type=\"hidden\" name={nameAttributeValue || customModelAttributeName} value={data.map(d => d.url).join(',')} />}\n      </div>;\n  const Control = <FormControl fullWidth={fullWidth} required={required} error={!hideDefaultError && failureMessage.length > 0} disabled={disabled} margin={margin}>\n        <FormControlLabel control={UploadComponent} label={hideLabel ? '' : `${labelText}${requiredText}`} labelPlacement=\"top\" classes={{\n      root: classes.label\n    }} />\n        <FormHelperText classes={{\n      root: classes.helper\n    }}>\n          {helperValue}\n        </FormHelperText>\n        {loading && B.triggerEvent('onLoad')}\n        {data && data.length > 0 && <div className={classes.messageContainer}>\n            {data.map(file => <div className={classes.fileList}>\n                <Typography variant=\"body1\" noWrap className={classes.span}>\n                  {file.name}\n                </Typography>\n                <IconButton className={classes.remove} size=\"small\" onClick={() => removeFileFromList(file.url)}>\n                  <Close fontSize=\"small\" />\n                </IconButton>\n              </div>)}\n          </div>}\n      </FormControl>;\n  useEffect(() => {\n    if (files.length > 0) {\n      uploadFile();\n    }\n  }, [files]);\n  B.defineFunction('clearFileUpload', e => clearFiles(e));\n  return isDev ? <div className={classes.root}>{Control}</div> : Control;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  const {\n    color: colorFunc\n  } = B;\n\n  const getOpacColor = (col, val) => colorFunc.alpha(col, val);\n\n  return {\n    root: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block'\n    },\n    label: {\n      marginLeft: [0, '!important'],\n      pointerEvents: B.env === 'dev' && 'none',\n      alignItems: ['start', '!important'],\n      color: ({\n        options: {\n          labelColor\n        }\n      }) => [style.getColor(labelColor), '!important'],\n      '&.Mui-error': {\n        color: ({\n          options: {\n            errorColor\n          }\n        }) => [style.getColor(errorColor), '!important']\n      },\n      '&.Mui-disabled': {\n        pointerEvents: 'none',\n        opacity: '0.7'\n      }\n    },\n    helper: {\n      color: ({\n        options: {\n          helperColor\n        }\n      }) => [style.getColor(helperColor), '!important'],\n      '&.Mui-error': {\n        color: ({\n          options: {\n            errorColor\n          }\n        }) => [style.getColor(errorColor), '!important']\n      }\n    },\n    input: {\n      display: 'none'\n    },\n    control: {\n      display: 'inline-flex',\n      alignItems: 'center'\n    },\n    fullwidth: {\n      display: 'flex',\n      width: '100%'\n    },\n    span: {\n      flex: 1,\n      textAlign: 'start',\n      marginRight: ['1rem', '!important']\n    },\n    button: {\n      color: ({\n        options: {\n          variant,\n          buttonTextColor,\n          background\n        }\n      }) => [style.getColor(variant === 'icon' ? background : buttonTextColor), '!important'],\n      '&.Mui-disabled': {\n        pointerEvents: 'none',\n        opacity: '0.7'\n      }\n    },\n    contained: {\n      backgroundColor: ({\n        options: {\n          background\n        }\n      }) => [style.getColor(background), '!important']\n    },\n    outlined: {\n      borderColor: ({\n        options: {\n          background\n        }\n      }) => [style.getColor(background), '!important']\n    },\n    messageContainer: {\n      paddingTop: '1.25rem',\n      color: ({\n        options: {\n          textColor\n        }\n      }) => [style.getColor(textColor), '!important'],\n      '& .MuiIconButton-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [getOpacColor(style.getColor(textColor), 0.54), '!important']\n      }\n    },\n    fileList: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    remove: {\n      padding: ['0.25rem', '!important']\n    }\n  };\n}","functions":["clearFileUpload"],"triggers":["onError","onSuccess","onNoResults","onError","onLoad"]},{"name":"Form","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"<div>\n      {(() => {\n    const {\n      env,\n      Children,\n      Action,\n      useAllQuery,\n      getActionInput,\n      getIdProperty\n    } = B;\n    const {\n      formData,\n      filter,\n      formErrorMessage,\n      formSuccessMessage,\n      redirect,\n      showError,\n      showSuccess,\n      currentRecord\n    } = options;\n    const formRef = React.createRef();\n    const displayError = showError === 'built-in';\n    const displaySuccess = showSuccess === 'built-in';\n    const empty = children.length === 0;\n    const isDev = B.env === 'dev';\n    const isPristine = empty && isDev;\n    const hasRedirect = redirect && redirect.id !== '';\n    const redirectTo = env === 'prod' && hasRedirect && B.useEndpoint(redirect);\n    const history = isDev ? {} : useHistory();\n    const location = isDev ? {} : useLocation();\n    const {\n      actionId,\n      modelId,\n      variableId,\n      objectVariableId\n    } = formData;\n    const formVariable = getActionInput(variableId);\n    const hasFilter = modelId && (filter && Object.keys(filter).length !== 0 || currentRecord);\n    const mounted = useRef(false);\n    B.defineFunction('Submit', () => {\n      if (formRef.current) formRef.current.dispatchEvent(new Event('submit'));\n    });\n    useEffect(() => {\n      mounted.current = true;\n      return () => {\n        mounted.current = false;\n      };\n    }, []);\n\n    const handleSubmit = (evt, callAction, item) => {\n      evt.preventDefault();\n      B.triggerEvent('onSubmit');\n      const formDataValues = new FormData(formRef.current);\n      const values = Array.from(formDataValues).reduce((acc, [key, value]) => {\n        if (!acc[key]) return { ...acc,\n          [key]: value\n        };\n        acc[key] = `${acc[key]},${value}`;\n        return acc;\n      }, {});\n      const postValues = item && item.id ? {\n        id: item.id,\n        ...values\n      } : values;\n      const postObjValues = item && item.id ? {\n        variable_id: item.id\n      } : {};\n      let variables = {\n        variables: {\n          input: postValues\n        }\n      };\n\n      if (formVariable && formVariable.name) {\n        let inputVariables = {\n          [formVariable.name]: postValues\n        };\n\n        if (objectVariableId) {\n          const objectVariable = getActionInput(objectVariableId);\n          inputVariables = { ...inputVariables,\n            [objectVariable.name]: postObjValues\n          };\n        }\n\n        variables = {\n          variables: {\n            input: inputVariables\n          }\n        };\n      }\n\n      callAction(variables);\n    };\n\n    const trigger = (data, loading, error) => {\n      if (data || error) {\n        B.triggerEvent('onActionDone');\n      }\n\n      if (data) {\n        B.triggerEvent('onActionSuccess', data.actionb5);\n\n        if (hasRedirect) {\n          if (redirectTo === location.pathname) {\n            history.go(0);\n          } else {\n            history.push(redirectTo);\n          }\n        }\n      }\n\n      if (loading) {\n        B.triggerEvent('onActionLoad', loading);\n      }\n\n      if (error && !displayError) {\n        B.triggerEvent('onActionError', error);\n      }\n    };\n\n    const FormCmp = ({\n      item\n    }) => {\n      const [isInvalid, setIsInvalid] = useState(false);\n\n      const handleInvalid = () => {\n        if (!isInvalid) {\n          setIsInvalid(true);\n          B.triggerEvent('onInvalid');\n        }\n      };\n\n      useEffect(() => {\n        B.triggerEvent('onComponentRendered');\n      }, []);\n      return <Action actionId={actionId}>\n              {(callAction, {\n          data,\n          loading,\n          error\n        }) => <>\n                  {trigger(data, loading, error)}\n                  <div className={classes.messageContainer}>\n                    {error && displayError && <span className={classes.error}>{formErrorMessage}</span>}\n                    {data && displaySuccess && <span className={classes.success}>\n                        {formSuccessMessage}\n                      </span>}\n                  </div>\n\n                  <form onInvalid={handleInvalid} onSubmit={evt => {\n            setIsInvalid(false);\n            handleSubmit(evt, callAction, item);\n          }} ref={formRef} className={[empty && classes.empty, isPristine && classes.pristine].join(' ')}>\n                    {isPristine && <span>\n                        Drag form components in the form to submit data\n                      </span>}\n                    {item ? <B.ModelProvider key={item.id} value={item} id={modelId}>\n                        {children}\n                      </B.ModelProvider> : <Children loading={loading}>{children}</Children>}\n                  </form>\n                </>}\n            </Action>;\n    };\n\n    const FormWithData = () => {\n      const getFilter = React.useCallback(() => {\n        if (isDev || !currentRecord || !modelId) {\n          return filter;\n        }\n\n        const idProperty = getIdProperty(modelId);\n        return {\n          [idProperty.id]: {\n            eq: currentRecord\n          }\n        };\n      }, [isDev, filter, currentRecord, modelId]);\n      const applyFilter = modelId && getFilter();\n      const {\n        loading: isFetching,\n        data: records,\n        error: err,\n        refetch\n      } = applyFilter && useAllQuery(modelId, {\n        filter: applyFilter,\n        skip: 0,\n        take: 1\n      }) || {};\n      B.defineFunction('Refetch', () => refetch());\n      useEffect(() => {\n        if (mounted.current && isFetching) {\n          B.triggerEvent('onDataLoad', isFetching);\n        }\n      }, [isFetching]);\n\n      if (err) {\n        B.triggerEvent('onDataError', err);\n      }\n\n      const item = records && records.results[0];\n\n      if (item) {\n        if (item.id) {\n          B.triggerEvent('onDataSuccess', item);\n        } else {\n          B.triggerEvent('onDataNoResults');\n        }\n      }\n\n      if (isFetching) return 'Loading...';\n      if (err && displayError) return err.message;\n      if (!item) return children;\n      return <FormCmp item={item} />;\n    };\n\n    return hasFilter ? <FormWithData /> : <FormCmp />;\n  })()}\n    </div>","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    error: {\n      color: style.getColor('Danger')\n    },\n    success: {\n      color: style.getColor('Success')\n    },\n    messageContainer: {\n      marginBottom: '0.5rem'\n    },\n    empty: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: ({\n        options: {\n          columnHeight\n        }\n      }) => columnHeight ? 0 : '4rem',\n      height: '100%',\n      width: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    }\n  };\n}","functions":["Submit","Refetch"],"triggers":["onSubmit","onActionDone","onActionSuccess","onActionLoad","onActionError","onInvalid","onComponentRendered","onDataLoad","onDataError","onDataSuccess","onDataNoResults"]},{"name":"Grid","type":"CONTAINER_COMPONENT","allowedTypes":["CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    env,\n    GetAll,\n    ModelProvider\n  } = B;\n  const {\n    Grid,\n    Hidden\n  } = window.MaterialUI.Core;\n  const isDev = env === 'dev';\n  const {\n    alignItems,\n    alignContent,\n    type,\n    justify,\n    direction,\n    spacing,\n    wrap,\n    zeroMinWidth,\n    reverse,\n    xsWidth,\n    smWidth,\n    mdWidth,\n    lgWidth,\n    xlWidth,\n    model,\n    filter,\n    visibility,\n    repeatedItems,\n    showError\n  } = options;\n  const isEmpty = children.length === 0;\n  const isContainer = type === 'container';\n  const isItem = type === 'item';\n  const displayError = showError === 'built-in';\n  const gridDirection = reverse ? `${direction}-reverse` : direction;\n  const take = parseInt(repeatedItems, 10) || 50;\n  const [isVisible, setIsVisible] = useState(visibility);\n  const sizeNames = ['xs', 'sm', 'md', 'lg', 'xl'];\n  const only = [];\n  const sizes = [xsWidth, smWidth, mdWidth, lgWidth, xlWidth].reduce((acc, w, index) => {\n    const name = sizeNames[index];\n    let value = '';\n\n    if (w === 'true') {\n      value = true;\n    } else if (w === 'false') {\n      value = false;\n    } else if (w === 'auto') {\n      value = w;\n    } else if (w === 'hidden') {\n      only.push(name);\n    } else {\n      value = parseInt(w, 10);\n    }\n\n    acc[name] = value;\n    return acc;\n  }, {});\n  const gridOptions = {\n    alignContent,\n    alignItems,\n    classes: {\n      root: classes.root\n    },\n    container: isContainer,\n    direction: gridDirection,\n    item: isItem,\n    justify,\n    spacing,\n    wrap,\n    zeroMinWidth,\n    xs: sizes.xs,\n    sm: sizes.sm,\n    md: sizes.md,\n    lg: sizes.lg,\n    xl: sizes.xl\n  };\n  const gridRef = React.createRef();\n  const numberOfChildren = children.length;\n\n  if (isDev) {\n    const repeat = () => {\n      if (!gridRef.current || !model || children.length === 0) {\n        return;\n      }\n\n      Array.from(gridRef.current.children).forEach((child, index) => {\n        if (index >= numberOfChildren) {\n          child.parentNode.removeChild(child);\n        }\n      });\n      const currentHTML = gridRef.current.innerHTML;\n      const newDiv = document.createElement('div');\n      newDiv.innerHTML = currentHTML;\n      Array.from(newDiv.children).forEach(child => {\n        child.classList.add(classes.opac);\n      });\n\n      for (let i = 0; i < take - 1; i += 1) {\n        gridRef.current.insertAdjacentHTML('beforeend', newDiv.innerHTML);\n      }\n    };\n\n    React.useEffect(() => {\n      const mutationObserver = new MutationObserver(() => {\n        repeat();\n      });\n      mutationObserver.observe(gridRef.current, {\n        attributes: true,\n        characterData: true,\n        childList: false,\n        subtree: true,\n        attributeOldValue: false,\n        characterDataOldValue: false\n      });\n      repeat();\n    });\n  }\n\n  const GridComp = !model ? <Grid {...gridOptions}>{children}</Grid> : <GetAll modelId={model} filter={filter}>\n        {({\n      loading,\n      error,\n      data\n    }) => {\n      if (loading) {\n        B.triggerEvent('onLoad', loading);\n        return <span>Loading...</span>;\n      }\n\n      if (error && !displayError) {\n        B.triggerEvent('onError', error);\n      }\n\n      if (error && displayError) {\n        return <span>{error.message}</span>;\n      }\n\n      const {\n        results = []\n      } = data || {};\n\n      if (results.length > 0) {\n        B.triggerEvent('onSuccess', results);\n      } else {\n        B.triggerEvent('onNoResults');\n      }\n\n      return <Grid {...gridOptions}>\n              {results.map(item => <ModelProvider key={item.id} value={item} id={model}>\n                  <B.InteractionScope>{children}</B.InteractionScope>\n                </ModelProvider>)}\n            </Grid>;\n    }}\n      </GetAll>;\n  const ConditionalGrid = <Hidden only={only}>{GridComp}</Hidden>;\n  const RuntimeCmp = isVisible ? ConditionalGrid : <></>;\n  B.defineFunction('Show', () => setIsVisible(true));\n  B.defineFunction('Hide', () => setIsVisible(false));\n  B.defineFunction('Show/Hide', () => setIsVisible(s => !s));\n  return isDev ? <div className={[classes.wrapper, isEmpty ? classes.empty : ''].join(' ')} data-type={`grid-${type}`}>\n        <Grid ref={gridRef} {...gridOptions}>\n          {children}\n        </Grid>\n      </div> : RuntimeCmp;\n})()","styles":"B => theme => {\n  const isDev = B.env === 'dev';\n  const style = new B.Styling(theme);\n\n  const getWidth = value => {\n    if (value === 'false') {\n      return null;\n    }\n\n    if (value === 'true') {\n      return '100%';\n    }\n\n    if (value === 'auto') {\n      return 'none';\n    }\n\n    return `${Math.round(parseInt(value, 10) / 12 * 10e7) / 10e5}%`;\n  };\n\n  const getFlexBasis = value => {\n    if (value === 'false') {\n      return null;\n    }\n\n    if (value === 'true') {\n      return 0;\n    }\n\n    if (value === 'auto') {\n      return 'auto';\n    }\n\n    return `${Math.round(parseInt(value, 10) / 12 * 10e7) / 10e5}%`;\n  };\n\n  const getFlexGrow = value => {\n    if (value === 'false') {\n      return null;\n    }\n\n    if (value === 'true') {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  return {\n    wrapper: {\n      display: ({\n        options: {\n          type\n        }\n      }) => type === 'container' && 'flex',\n      boxSizing: 'border-box',\n      width: ({\n        options: {\n          type\n        }\n      }) => type === 'container' && '100%',\n      height: ({\n        options: {\n          height\n        }\n      }) => height,\n      flexGrow: ({\n        options: {\n          xsWidth\n        }\n      }) => getFlexGrow(xsWidth),\n      maxWidth: ({\n        options: {\n          xsWidth\n        }\n      }) => getWidth(xsWidth),\n      flexBasis: ({\n        options: {\n          xsWidth\n        }\n      }) => getFlexBasis(xsWidth),\n      backgroundColor: ({\n        options: {\n          backgroundColor\n        }\n      }) => style.getColor(backgroundColor),\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        flexGrow: ({\n          options: {\n            smWidth\n          }\n        }) => getFlexGrow(smWidth),\n        maxWidth: ({\n          options: {\n            smWidth\n          }\n        }) => getWidth(smWidth),\n        flexBasis: ({\n          options: {\n            smWidth\n          }\n        }) => getFlexBasis(smWidth)\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        flexGrow: ({\n          options: {\n            mdWidth\n          }\n        }) => getFlexGrow(mdWidth),\n        maxWidth: ({\n          options: {\n            mdWidth\n          }\n        }) => getWidth(mdWidth),\n        flexBasis: ({\n          options: {\n            mdWidth\n          }\n        }) => getFlexBasis(mdWidth)\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        flexGrow: ({\n          options: {\n            lgWidth\n          }\n        }) => getFlexGrow(lgWidth),\n        maxWidth: ({\n          options: {\n            lgWidth\n          }\n        }) => getWidth(lgWidth),\n        flexBasis: ({\n          options: {\n            lgWidth\n          }\n        }) => getFlexBasis(lgWidth)\n      },\n      [`@media ${B.mediaMinWidth(1920)}`]: {\n        flexGrow: ({\n          options: {\n            xlWidth\n          }\n        }) => getFlexGrow(xlWidth),\n        maxWidth: ({\n          options: {\n            xlWidth\n          }\n        }) => getWidth(xlWidth),\n        flexBasis: ({\n          options: {\n            xlWidth\n          }\n        }) => getFlexBasis(xlWidth)\n      },\n      '& > div': {\n        maxWidth: 'none',\n        flexBasis: 'auto'\n      }\n    },\n    root: {\n      height: ({\n        options: {\n          height\n        }\n      }) => height,\n      minHeight: ({\n        children,\n        options: {\n          height\n        }\n      }) => children.length === 0 && isDev ? '2.5rem' : height,\n      backgroundColor: ({\n        options: {\n          backgroundColor\n        }\n      }) => style.getColor(backgroundColor),\n      '& > div[data-type=\"grid-item\"]': {\n        padding: ({\n          options: {\n            spacing\n          }\n        }) => isDev && `${parseInt(spacing, 10) * 4}px`\n      }\n    },\n    opac: {\n      opacity: 0.3\n    },\n    empty: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      minHeight: '2.5rem',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: ({\n        options: {\n          backgroundColor\n        }\n      }) => backgroundColor === 'Transparent' ? '#F0F1F5' : style.getColor(backgroundColor),\n      '& > div': {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      '& > div::after': {\n        content: '\"Grid\"'\n      }\n    }\n  };\n}","functions":["Show","Hide","Show/Hide"],"triggers":["onLoad","onError","onSuccess","onNoResults"]},{"name":"HiddenInput","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    disabled,\n    customModelAttribute: customModelAttributeObj,\n    nameAttribute\n  } = options;\n  const {\n    useText,\n    env,\n    getCustomModelAttribute\n  } = B;\n  const isDev = env === 'dev';\n  const {\n    id: customModelAttributeId,\n    value: defaultValue = ['']\n  } = customModelAttributeObj;\n  const customModelAttribute = getCustomModelAttribute(customModelAttributeId);\n  const [currentValue, setCurrentValue] = useState(useText(defaultValue));\n  const {\n    name: customModelAttributeName,\n    validations: {\n      required\n    } = {}\n  } = customModelAttribute || {};\n  const nameAttributeValue = useText(nameAttribute);\n  useEffect(() => {\n    if (isDev) {\n      setCurrentValue(useText(defaultValue));\n    }\n  }, [isDev, defaultValue]);\n  const InputCmp = <input className={isDev && classes.pristine} type={isDev ? 'text' : 'hidden'} name={nameAttributeValue || customModelAttributeName} value={isDev ? currentValue || '{{ hidden input }}' : currentValue} required={required} disabled={disabled} />;\n  return isDev ? <div className={classes.root}>{InputCmp}</div> : InputCmp;\n})()","styles":"() => () => ({\n  root: {\n    '& > *': {\n      pointerEvents: 'none'\n    }\n  },\n  pristine: {\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '2rem',\n    width: '100%',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    boxSizing: 'border-box',\n    textAlign: 'center'\n  }\n})","functions":[],"triggers":[]},{"name":"Icon","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    Link,\n    Badge\n  } = window.MaterialUI.Core;\n  const {\n    useText,\n    env\n  } = B;\n  const isDev = env === 'dev';\n  const {\n    icon,\n    addBadge,\n    content,\n    badgeColor,\n    anchorOrigin,\n    variant,\n    linkTo,\n    linkToExternal,\n    linkType\n  } = options;\n  const hasLink = linkTo && linkTo.id !== '';\n  const hasExternalLink = linkToExternal && linkToExternal.id !== '';\n  const contentText = useText(content);\n  const linkToExternalText = useText(linkToExternal);\n  const anchorOriginSplit = anchorOrigin.split(',');\n  const anchorOriginObj = {\n    horizontal: anchorOriginSplit[0],\n    vertical: anchorOriginSplit[1]\n  };\n  const IconComponent = React.createElement(Icons[icon], {\n    className: classes.root\n  });\n  const href = linkType === 'external' && hasExternalLink ? linkToExternalText : undefined;\n  const LinkComponent = <Link href={href} component={linkType === 'internal' && hasLink ? B.Link : undefined} endpoint={linkType === 'internal' && hasLink ? linkTo : undefined}>\n        {IconComponent}\n      </Link>;\n  const Icon = hasLink ? LinkComponent : IconComponent;\n  const BadgeComponent = <Badge classes={{\n    root: classes.badge\n  }} badgeContent={contentText} color={badgeColor} anchorOrigin={anchorOriginObj} variant={variant} overlap={variant === 'dot' ? 'circle' : 'rectangle'}>\n        {Icon}\n      </Badge>;\n  const Component = addBadge ? BadgeComponent : Icon;\n  return isDev ? <span className={classes.wrapper}>{Component}</span> : Component;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const convertSizes = sizes => sizes.map(size => style.getSpacing(size)).join(' ');\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    wrapper: {\n      display: 'inline-block'\n    },\n    root: {\n      '&.MuiSvgIcon-root': {\n        fontSize: ({\n          options: {\n            size\n          }\n        }) => style.getIconSize(size),\n        color: ({\n          options: {\n            color\n          }\n        }) => style.getColor(color),\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0]),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1]),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2]),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3]),\n        [`@media ${B.mediaMinWidth(600)}`]: {\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Portrait'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Portrait'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Portrait'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Portrait')\n        },\n        [`@media ${B.mediaMinWidth(960)}`]: {\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Landscape'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Landscape'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Landscape'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Landscape')\n        },\n        [`@media ${B.mediaMinWidth(1280)}`]: {\n          marginTop: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[0], 'Desktop'),\n          marginRight: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[1], 'Desktop'),\n          marginBottom: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[2], 'Desktop'),\n          marginLeft: ({\n            options: {\n              outerSpacing\n            }\n          }) => getSpacing(outerSpacing[3], 'Desktop')\n        }\n      }\n    },\n    badge: {\n      margin: ({\n        options: {\n          margin\n        }\n      }) => convertSizes(margin),\n      display: 'inline-flex',\n      justifyContent: 'center',\n      verticalAlign: 'middle'\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"List","type":"CONTAINER_COMPONENT","allowedTypes":["LIST_ITEM","LIST_SUBHEADER"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    List,\n    ListItem,\n    ListItemText\n  } = window.MaterialUI.Core;\n  const {\n    env,\n    ModelProvider,\n    useAllQuery,\n    getProperty\n  } = B;\n  const isDev = env === 'dev';\n  const isEmpty = children.length === 0;\n  const isPristine = children.length === 0 && isDev;\n  const {\n    filter,\n    model,\n    disablePadding,\n    dense,\n    orderBy,\n    order\n  } = options;\n\n  const DataPlaceHolder = ({\n    text\n  }) => <List className={classes.root}>\n        <ListItem>\n          <ListItemText primary={text} />\n        </ListItem>\n      </List>;\n\n  const listArgs = {\n    className: classes.root,\n    disablePadding,\n    dense\n  };\n  const orderByArray = [orderBy].flat();\n  const sort = !isDev && orderBy ? orderByArray.reduceRight((acc, property, index) => {\n    const prop = getProperty(property);\n    return index === orderByArray.length - 1 ? {\n      [prop.name]: order.toUpperCase()\n    } : {\n      [prop.name]: acc\n    };\n  }, {}) : {};\n  const {\n    loading,\n    error,\n    data\n  } = model && useAllQuery(model, {\n    filter,\n    variables: { ...(orderBy ? {\n        sort: {\n          relation: sort\n        }\n      } : {})\n    }\n  });\n  if (loading) return <DataPlaceHolder text=\"loading...\" />;\n  if (error) return <DataPlaceHolder text=\"failed\" />;\n  const {\n    results\n  } = data || {};\n\n  if (!isDev && results && results.length === 0) {\n    return <DataPlaceHolder text=\"No results\" />;\n  }\n\n  const renderData = () => {\n    if (!model || isDev) {\n      return isEmpty ? <div className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')} /> : children;\n    }\n\n    return (results || []).map(value => <ModelProvider value={value} id={model}>\n          <B.InteractionScope>{children}</B.InteractionScope>\n        </ModelProvider>);\n  };\n\n  const ListComponent = <List {...listArgs}>{renderData()}</List>;\n  return isDev ? <div>{ListComponent}</div> : ListComponent;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    root: {\n      backgroundColor: ({\n        options: {\n          backgroundColor\n        }\n      }) => style.getColor(backgroundColor)\n    },\n    empty: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '4rem',\n      height: '100%',\n      width: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5',\n      '&::after': {\n        content: '\"List\"'\n      }\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"ListItem","type":"LIST_ITEM","allowedTypes":["CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    ListItem,\n    ListItemText,\n    ListItemIcon,\n    ListItemAvatar,\n    Avatar\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    alignItems,\n    disabled,\n    disableGutters,\n    divider,\n    selected,\n    primaryText,\n    secondaryText,\n    icon,\n    avatar,\n    linkTo,\n    dense\n  } = options;\n  const {\n    env,\n    useText,\n    Link\n  } = B;\n  const isDev = env === 'dev';\n  const hasLink = linkTo && linkTo.id !== '';\n  const primary = useText(primaryText);\n  const secondary = useText(secondaryText);\n  const IconComponent = <ListItemIcon>\n        {icon !== 'None' && React.createElement(Icons[icon])}\n      </ListItemIcon>;\n  const AvatarComponent = <ListItemAvatar>\n        <Avatar>{icon !== 'None' && React.createElement(Icons[icon])}</Avatar>\n      </ListItemAvatar>;\n  const isEmpty = primary === '' && secondary === '' && icon === 'None' && children.length === 0;\n  const itemText = isEmpty && isDev ? 'Empty content' : primary;\n  const listItem = <ListItem button={hasLink} component={hasLink ? Link : 'li'} endpoint={linkTo} alignItems={alignItems} disabled={disabled} disableGutters={disableGutters} divider={divider} selected={selected} className={classes.root} dense={dense}>\n        {icon !== 'None' && (avatar ? AvatarComponent : IconComponent)}\n        <ListItemText className={isEmpty && isDev && classes.placeholder} primary={itemText} secondary={children.length > 0 ? children : secondary} />\n      </ListItem>;\n  return isDev ? <div className={classes.wrapper}>{listItem}</div> : listItem;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    root: {\n      color: ({\n        options: {\n          titleColor\n        }\n      }) => style.getColor(titleColor),\n      backgroundColor: ({\n        options: {\n          backgroundColor\n        }\n      }) => style.getColor(backgroundColor),\n      '&.MuiButtonBase-root, &.MuiListItem-button, .MuiListItem-button:hover': {\n        color: ({\n          options: {\n            titleColor\n          }\n        }) => style.getColor(titleColor),\n        backgroundColor: ({\n          options: {\n            backgroundColor\n          }\n        }) => [style.getColor(backgroundColor), '!important']\n      },\n      '& .MuiListItemText-primary': {\n        fontSize: ({\n          options: {\n            titleSize\n          }\n        }) => titleSize,\n        fontWeight: ({\n          options: {\n            titleWeight\n          }\n        }) => titleWeight\n      },\n      '& .MuiListItemText-secondary': {\n        color: ({\n          options: {\n            subtitleColor\n          }\n        }) => style.getColor(subtitleColor),\n        fontSize: ({\n          options: {\n            subtitleSize\n          }\n        }) => subtitleSize,\n        fontWeight: ({\n          options: {\n            subtitleWeight\n          }\n        }) => subtitleWeight\n      },\n      '& .MuiListItemIcon-root': {\n        color: ({\n          options: {\n            iconColor\n          }\n        }) => style.getColor(iconColor)\n      }\n    },\n    placeholder: {\n      color: '#dadde4'\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"ListSubheader","type":"LIST_SUBHEADER","allowedTypes":[],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    ListSubheader\n  } = window.MaterialUI.Core;\n  const {\n    text,\n    inset\n  } = options;\n  const {\n    env,\n    useText\n  } = B;\n  const isDev = env === 'dev';\n  const content = useText(text);\n  const isEmpty = content === '';\n  const ItemText = isEmpty && isDev ? <span className={classes.placeholder}>Empty content</span> : <>{content}</>;\n  const ListSubheaderComponent = <ListSubheader className={classes.root} inset={inset}>\n        {ItemText}\n      </ListSubheader>;\n  return isDev ? <div>{ListSubheaderComponent}</div> : ListSubheaderComponent;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    root: {\n      color: ({\n        options: {\n          textColor\n        }\n      }) => [style.getColor(textColor), '!important'],\n      backgroundColor: ({\n        options: {\n          backgroundColor\n        }\n      }) => [style.getColor(backgroundColor), '!important']\n    },\n    placeholder: {\n      color: '#dadde4'\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"Media","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    env,\n    useText\n  } = B;\n  const isDev = env === 'dev';\n  const {\n    type,\n    imageSource,\n    videoSource,\n    iframeSource,\n    imgAlt,\n    title\n  } = options;\n  const titleText = useText(title);\n  const imgUrl = useText(imageSource);\n  const videoUrl = useText(videoSource);\n  const iframeUrl = useText(iframeSource);\n  const isImage = type === 'img' && imgUrl;\n  const isVideo = type === 'video' && videoUrl;\n  const isIframe = type === 'iframe' && iframeUrl;\n  const isEmpty = !isImage && !isVideo && !isIframe;\n  const variable = imageSource && imageSource.findIndex(v => v.name) !== -1;\n  const variableDev = env === 'dev' && (variable || !imgUrl);\n\n  const ImgPlaceholder = () => <svg className={classes.placeholder} width={86} height={48}>\n        <title>{titleText}</title>\n        <rect x=\"19.5\" y=\"8.5\" rx=\"2\" />\n        <path d=\"M61.1349945 29.020979v3.9160839H25v-2.5379375l6.5998225-4.9892478 5.6729048 4.2829541 13.346858-11.2981564L61.1349945 29.020979zm-22.5-10.270979c0 1.0416667-.3645833 1.9270833-1.09375 2.65625S35.9266612 22.5 34.8849945 22.5s-1.9270833-.3645833-2.65625-1.09375-1.09375-1.6145833-1.09375-2.65625.3645833-1.9270833 1.09375-2.65625S33.8433278 15 34.8849945 15s1.9270833.3645833 2.65625 1.09375 1.09375 1.6145833 1.09375 2.65625z\" />\n      </svg>;\n\n  const VideoPlaceholder = () => <svg className={classes.placeholder} width={48} height={31}>\n        <g fill=\"none\">\n          <rect x=\".5\" y=\".5\" rx=\"2\" />\n          <g fill=\"#666D85\">\n            <path d=\"M26.575 8.526h-10.95C14.183 8.526 13 9.674 13 11.078v8.603c0 1.404 1.182 2.553 2.626 2.553h10.949c1.444 0 2.625-1.15 2.625-2.553v-8.603c0-1.43-1.181-2.552-2.625-2.552zM34.342 9.93a1.359 1.359 0 00-.446.178L29.8 12.406v5.922l4.122 2.297a1.585 1.585 0 002.153-.561c.132-.23.21-.485.21-.766V11.41c0-.944-.919-1.71-1.943-1.48z\" />\n          </g>\n        </g>\n      </svg>;\n\n  const IframePlaceholder = () => <svg className={classes.placeholder} width={48} height={31}>\n        <g fill=\"none\">\n          <rect x=\".5\" y=\".5\" rx=\"2\" />\n          <path d=\"M17.875 20.413v-1.78a.708.708 0 00-.1-.37.809.809 0 00-.328-.289l-3.609-1.892a3.258 3.258 0 00-.482-.208 6.559 6.559 0 00-.542-.156c.192-.048.373-.1.542-.157.169-.058.33-.127.482-.208l3.61-1.882a.809.809 0 00.328-.289.708.708 0 00.099-.369v-1.781L10 15.212v1.012l7.875 4.19zm3.132 3.087c.126 0 .255-.02.388-.06.132-.041.258-.1.378-.178.119-.077.225-.174.318-.288.093-.115.169-.25.229-.405L28.077 7.5h-1.044a1.28 1.28 0 00-.766.228c-.212.152-.374.37-.487.652L19.973 23.5h1.034zm9.118-3.087L38 16.223v-1.011l-7.875-4.18v1.781c0 .135.033.258.1.37a.809.809 0 00.328.288l3.609 1.882c.152.081.313.15.482.208.17.057.35.11.542.157a4.682 4.682 0 00-1.024.364l-3.61 1.892a.809.809 0 00-.328.289.708.708 0 00-.099.37v1.78z\" fill=\"#666D85\" />\n        </g>\n      </svg>;\n\n  const Placeholder = () => {\n    switch (type) {\n      case 'img':\n        return <ImgPlaceholder />;\n\n      case 'video':\n        return <VideoPlaceholder />;\n\n      default:\n        return <IframePlaceholder />;\n    }\n  };\n\n  let MediaComponent = () => {\n    if (!isDev) return null;\n    return <div className={[(isEmpty || variableDev) && classes.empty]}>\n          <div className={classes.placeholderWrapper}>\n            <Placeholder />\n            {variable && <span>{imgUrl}</span>}\n          </div>\n        </div>;\n  };\n\n  if (isImage && !variableDev) {\n    MediaComponent = () => <img className={classes.media} src={imgUrl} title={titleText} alt={imgAlt} />;\n  } else if (isVideo) {\n    MediaComponent = () => // eslint-disable-next-line jsx-a11y/media-has-caption\n    <video className={classes.media} src={videoUrl} title={titleText} controls />;\n  } else if (isIframe) {\n    MediaComponent = () => <iframe className={classes.media} title={titleText} src={iframeUrl} />;\n  }\n\n  return <div className={[classes.outerSpacing, isDev ? classes.devWrapper : '', !isEmpty && !variable ? classes.hasContent : ''].join(' ')}>\n        <MediaComponent />\n      </div>;\n})()","styles":"B => theme => {\n  const style = new B.Styling(theme);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    devWrapper: {\n      display: 'flex',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    hasContent: {\n      width: 'fit-content',\n      height: 'fit-content'\n    },\n    empty: {\n      position: 'relative',\n      width: ({\n        options: {\n          width\n        }\n      }) => width || '100%',\n      height: ({\n        options: {\n          height\n        }\n      }) => height || 'inherit',\n      backgroundColor: '#F0F1F5',\n      border: '0.0625rem dashed #AFB5C8',\n      paddingBottom: ({\n        options: {\n          height\n        }\n      }) => (!height || height === '100%') && '62.5%'\n    },\n    placeholderWrapper: {\n      position: 'absolute',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase'\n    },\n    placeholder: {\n      maxHeight: '100%',\n      '& rect': {\n        stroke: '#AFB5C8',\n        fill: '#F7F8FA',\n        width: 47,\n        height: 30\n      },\n      '& > path': {\n        fill: '#666D85'\n      }\n    },\n    media: {\n      width: ({\n        options: {\n          width\n        }\n      }) => width,\n      height: ({\n        options: {\n          height\n        }\n      }) => height\n    },\n    outerSpacing: {\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop')\n      }\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"Panel","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"<div className={classes.panel}>\n      {(() => {\n    const isEmpty = children.length === 0;\n    const isPristine = isEmpty && B.env === 'dev';\n    return <>\n            {options.panelTitle && <div className={classes.title}>\n                <B.Text value={options.panelTitle} />\n              </div>}\n            <div className={[classes.content, isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')}>\n              {isPristine ? 'Panel' : children}\n            </div>\n          </>;\n  })()}\n    </div>","styles":"B => theme => {\n  const style = new B.Styling(theme);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    panel: {\n      display: 'flex',\n      flexDirection: 'column',\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      height: 'auto',\n      minHeight: 1,\n      backgroundColor: 'transparent',\n      borderWidth: '0.125rem',\n      borderColor: ({\n        options: {\n          panelColor\n        }\n      }) => style.getColor(panelColor) || style.getColor('Primary'),\n      borderStyle: 'solid',\n      borderRadius: '0.125rem',\n      overflow: 'auto',\n      boxSizing: 'border-box'\n    },\n    title: {\n      margin: '0',\n      display: 'block',\n      paddingRight: '0.5rem',\n      paddingLeft: '0.5rem',\n      paddingTop: '0.4375rem',\n      paddingBottom: '0.5625rem',\n      fontFamily: style.getFontFamily('Body1'),\n      fontSize: '1rem',\n      fontWeight: style.getFontWeight('Body1'),\n      textTransform: style.getTextTransform('Body1'),\n      letterSpacing: style.getLetterSpacing('Body1'),\n      color: ({\n        options: {\n          color\n        }\n      }) => style.getColor(color) || style.getColor('White'),\n      backgroundColor: ({\n        options: {\n          panelColor\n        }\n      }) => style.getColor(panelColor) || style.getColor('Primary'),\n      borderBottomWidth: '0.125rem',\n      borderBottomColor: ({\n        options: {\n          panelColor\n        }\n      }) => style.getColor(panelColor) || style.getColor('Primary'),\n      borderBottomStyle: 'solid'\n    },\n    content: {\n      flexGrow: 1,\n      flexBasis: '100%',\n      paddingTop: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[0]),\n      paddingRight: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[1]),\n      paddingBottom: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[2]),\n      paddingLeft: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[3])\n    },\n    [`@media ${B.mediaMinWidth(600)}`]: {\n      paddingTop: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[0], 'Portrait'),\n      paddingRight: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[1], 'Portrait'),\n      paddingBottom: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[2], 'Portrait'),\n      paddingLeft: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[3], 'Portrait')\n    },\n    [`@media ${B.mediaMinWidth(960)}`]: {\n      paddingTop: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[0], 'Landscape'),\n      paddingRight: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[1], 'Landscape'),\n      paddingBottom: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[2], 'Landscape'),\n      paddingLeft: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[3], 'Landscape')\n    },\n    [`@media ${B.mediaMinWidth(1280)}`]: {\n      paddingTop: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[0], 'Desktop'),\n      paddingRight: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[1], 'Desktop'),\n      paddingBottom: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[2], 'Desktop'),\n      paddingLeft: ({\n        options: {\n          innerSpacing\n        }\n      }) => getSpacing(innerSpacing[3], 'Desktop')\n    },\n    [`@media ${B.mediaMinWidth(600)}`]: {\n      panel: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait')\n      },\n      title: {\n        paddingRight: getSpacing('M', 'Portrait'),\n        paddingLeft: getSpacing('M', 'Portrait'),\n        fontSize: style.getFontSize('Body1', 'Portrait')\n      },\n      content: {\n        paddingTop: getSpacing('M', 'Portrait')\n      }\n    },\n    [`@media ${B.mediaMinWidth(960)}`]: {\n      panel: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape')\n      },\n      title: {\n        paddingRight: getSpacing('M', 'Landscape'),\n        paddingLeft: getSpacing('M', 'Landscape'),\n        fontSize: style.getFontSize('Body1', 'Landscape')\n      },\n      content: {\n        padding: getSpacing('M', 'Landscape')\n      }\n    },\n    [`@media ${B.mediaMinWidth(1280)}`]: {\n      panel: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop')\n      },\n      title: {\n        paddingRight: getSpacing('M', 'Desktop'),\n        paddingLeft: getSpacing('M', 'Desktop'),\n        fontSize: style.getFontSize('Body1', 'Desktop')\n      },\n      content: {\n        padding: getSpacing('M', 'Desktop')\n      }\n    },\n    empty: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: () => 'center',\n      minHeight: '4rem',\n      height: '100%',\n      margin: '1rem',\n      fontSize: '0.75rem'\n    },\n    pristine: {\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box',\n      border: '0.0625rem dashed #AFB5C8',\n      backgroundColor: '#F0F1F5'\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"Paper","type":"CONTAINER_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    env\n  } = B;\n  const {\n    Paper\n  } = window.MaterialUI.Core;\n  const {\n    elevation,\n    variant,\n    square\n  } = options;\n  const isDev = env === 'dev';\n  const isEmpty = children.length === 0;\n  const isPristine = isEmpty && isDev;\n  const PlaceHolder = <div className={[isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')} />;\n  const PaperComponent = <Paper variant={variant} elevation={variant === 'flat' ? 0 : elevation} square={square}>\n        {isEmpty ? PlaceHolder : children}\n      </Paper>;\n  return isDev ? <div>{PaperComponent}</div> : PaperComponent;\n})()","styles":"() => () => ({\n  empty: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '4rem',\n    height: '100%',\n    width: '100%',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    boxSizing: 'border-box'\n  },\n  pristine: {\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5',\n    '&::after': {\n      content: '\"Paper\"'\n    }\n  }\n})","functions":[],"triggers":[]},{"name":"Partial","type":"CONTAINER_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"<div className={classes.root}>\n      {(() => {\n    const {\n      env,\n      getPartial\n    } = B;\n\n    if (env === 'prod') {\n      const {\n        partialReferenceId\n      } = options;\n      const partial = getPartial(partialReferenceId);\n\n      if (partial) {\n        const {\n          asset\n        } = partial;\n        return React.createElement( // eslint-disable-next-line\n        React.lazy(() => System.import(`./assets/partials/${asset}`)));\n      }\n    }\n\n    return <div className={classes.root}>{children}</div>;\n  })()}\n    </div>","styles":"() => () => ({\n  root: {\n    boxSizing: 'border-box',\n    position: 'relative',\n    display: 'flex',\n    width: '100%'\n  }\n})","functions":[],"triggers":[]},{"name":"Progress","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    env,\n    useText\n  } = B;\n  const isDev = env === 'dev';\n  const {\n    CircularProgress,\n    LinearProgress\n  } = window.MaterialUI.Core;\n  const {\n    visible,\n    type,\n    linearVariant,\n    circularVariant,\n    value,\n    valueBuffer,\n    minValue,\n    maxValue,\n    thickness,\n    size\n  } = options;\n  const [open, setOpen] = useState(visible);\n  useEffect(() => {\n    setOpen(visible);\n  }, [visible]);\n  B.defineFunction('Show', () => setOpen(true));\n  B.defineFunction('Hide', () => setOpen(false));\n  B.defineFunction('Show/Hide', () => setOpen(s => !s));\n  const min = parseInt(useText(minValue), 10) || 0;\n  const max = parseInt(useText(maxValue), 10) || 100;\n  const currentValue = parseInt(useText(value), 10) || (env === 'dev' ? 50 : 0);\n  const currentValueBuffer = parseInt(useText(valueBuffer), 10) || 0;\n\n  const normalise = v => (v - min) * 100 / (max - min);\n\n  const Progress = type === 'linear' ? LinearProgress : CircularProgress;\n  const variant = type === 'linear' ? linearVariant : circularVariant;\n  const isBuffer = type === 'linear' && linearVariant === 'buffer';\n  const classNames = {\n    root: classes.root\n  };\n\n  if (type === 'linear' && isBuffer) {\n    classNames.dashedColorPrimary = classes.lighterDashedColor;\n    classNames.bar1Buffer = classes.normalBackgroundColor;\n    classNames.bar2Buffer = classes.lighterBackgroundColor;\n  } else if (type === 'linear') {\n    classNames.colorPrimary = classes.lighterBackgroundColor;\n    classNames.barColorPrimary = classes.normalBackgroundColor;\n  } else {\n    classNames.colorPrimary = classes.normalColor;\n  }\n\n  const ProgressCmp = <Progress classes={classNames} variant={variant} value={normalise(currentValue)} valueBuffer={currentValueBuffer} thickness={useText(thickness)} size={useText(size)} />;\n  if (!isDev && !open) return <></>;\n  return isDev ? <div className={classes.wrapper}>{ProgressCmp}</div> : ProgressCmp;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  const {\n    color: colorFunc\n  } = B;\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  const getLighterColor = (col, val) => colorFunc.lighten(col, val);\n\n  return {\n    wrapper: {\n      display: ({\n        options: {\n          type\n        }\n      }) => type === 'circular' ? 'inline-block' : 'block',\n      padding: '0.25rem 0',\n      width: ({\n        options: {\n          type\n        }\n      }) => type !== 'circular' && '100%'\n    },\n    normalBackgroundColor: {\n      backgroundColor: ({\n        options: {\n          color\n        }\n      }) => [style.getColor(color), '!important']\n    },\n    normalColor: {\n      color: ({\n        options: {\n          color\n        }\n      }) => [style.getColor(color), '!important']\n    },\n    lighterBackgroundColor: {\n      backgroundColor: ({\n        options: {\n          color\n        }\n      }) => [getLighterColor(style.getColor(color), 0.7), '!important']\n    },\n    lighterDashedColor: {\n      backgroundImage: ({\n        options: {\n          color\n        }\n      }) => [`radial-gradient(${getLighterColor(style.getColor(color), 0.7)} 0%, ${getLighterColor(style.getColor(color), 0.7)} 16%, transparent 42%)`, '!important']\n    },\n    root: {\n      width: ({\n        options: {\n          type\n        }\n      }) => type !== 'circular' && '100%',\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop')\n      },\n      '&.MuiLinearProgress-root': {\n        height: ({\n          options: {\n            barHeight,\n            type\n          }\n        }) => type === 'linear' && barHeight ? barHeight : null\n      }\n    }\n  };\n}","functions":["Show","Hide","Show/Hide"],"triggers":[]},{"name":"RadioGroup","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    disabled,\n    row,\n    helperText,\n    radioOptions,\n    model,\n    optionType,\n    labelProp,\n    valueProp,\n    size,\n    position,\n    margin,\n    filter,\n    fullWidth,\n    showError,\n    hideLabel,\n    customModelAttribute: customModelAttributeObj,\n    property,\n    validationValueMissing,\n    nameAttribute,\n    order,\n    orderBy\n  } = options;\n  const isDev = B.env === 'dev';\n  const displayError = showError === 'built-in';\n  const {\n    useAllQuery,\n    getProperty,\n    useText,\n    getCustomModelAttribute\n  } = B;\n  const {\n    id: customModelAttributeId,\n    label = [],\n    value: defaultValue = []\n  } = customModelAttributeObj;\n  const {\n    kind,\n    values: listValues\n  } = getProperty(property) || {};\n  const labelText = useText(label);\n  const labelProperty = getProperty(labelProp);\n  const valueProperty = getProperty(valueProp);\n  const customModelAttribute = getCustomModelAttribute(customModelAttributeId);\n  const {\n    name: customModelAttributeName,\n    validations: {\n      required\n    } = {}\n  } = customModelAttribute || {};\n  const nameAttributeValue = useText(nameAttribute);\n  let componentValue = useText(defaultValue);\n  componentValue = isNaN(Number(componentValue)) ? componentValue : Number(componentValue); // maintain the type of the value\n\n  const getValue = val => isNaN(Number(val)) ? val : Number(val);\n\n  const [value, setValue] = useState(getValue(componentValue));\n  const [errorState, setErrorState] = useState(false);\n  const [afterFirstInvalidation, setAfterFirstInvalidation] = useState(false);\n  const [helper, setHelper] = useState(useText(helperText));\n  let radioValues = [];\n  const {\n    FormControl: MUIFormControl,\n    RadioGroup,\n    FormControlLabel: MUIFormControlLabel,\n    FormHelperText,\n    FormLabel,\n    Radio\n  } = window.MaterialUI.Core;\n  const orderByArray = [orderBy].flat();\n  const sort = !isDev && orderBy ? orderByArray.reduceRight((acc, orderByProperty, index) => {\n    const prop = getProperty(orderByProperty);\n    return index === orderByArray.length - 1 ? {\n      [prop.name]: order.toUpperCase()\n    } : {\n      [prop.name]: acc\n    };\n  }, {}) : {};\n  const {\n    loading,\n    error: err,\n    data,\n    refetch\n  } = model && useAllQuery(model, {\n    filter,\n    skip: 0,\n    take: 50,\n    variables: { ...(orderBy ? {\n        sort: {\n          relation: sort\n        }\n      } : {})\n    }\n  });\n  const mounted = useRef(false);\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n  useEffect(() => {\n    if (mounted.current && loading) {\n      B.triggerEvent('onLoad', loading);\n    }\n  }, [loading]);\n\n  if (err && !displayError) {\n    B.triggerEvent('onError', err);\n  }\n\n  const {\n    results\n  } = data || {};\n\n  if (results) {\n    if (results.length > 0) {\n      B.triggerEvent('onSuccess', results);\n    } else {\n      B.triggerEvent('onNoResults');\n    }\n  }\n\n  B.defineFunction('Refetch', () => refetch()); // renders the radio component\n\n  const renderRadio = (optionValue, optionLabel) => <MUIFormControlLabel disabled={disabled} value={optionValue} control={<Radio tabIndex={isDev && -1} size={size} />} label={optionLabel} labelPlacement={position} />;\n\n  const radioData = (radioOptions || '').split('\\n');\n\n  const renderRadios = () => {\n    if (kind === 'list' || kind === 'LIST') {\n      return listValues.map(({\n        value: v\n      }) => renderRadio(v, v));\n    }\n\n    if (optionType === 'static') {\n      radioValues = radioData.map(option => option);\n      return radioData.map(option => renderRadio(option, option));\n    }\n\n    if (isDev) return renderRadio('value', 'Placeholder');\n    if (loading) return <span>Loading...</span>;\n    if (err && displayError) return <span>{err.message}</span>;\n    radioValues = results.map(item => item[valueProperty.name]);\n    return results.map(item => renderRadio(item[valueProperty.name], item[labelProperty.name]));\n  };\n\n  const handleValidation = () => {\n    const hasError = required && !radioValues.includes(value);\n    setErrorState(hasError);\n    const message = hasError ? useText(validationValueMissing) : useText(helperText);\n    setHelper(message);\n  };\n\n  const handleChange = evt => {\n    if (afterFirstInvalidation) {\n      handleValidation();\n    }\n\n    setValue(getValue(evt.target.value));\n  };\n\n  const validationHandler = () => {\n    const hasError = required && !radioValues.includes(value);\n    setAfterFirstInvalidation(hasError);\n    handleValidation();\n  };\n\n  useEffect(() => {\n    if (isDev) {\n      setValue(useText(defaultValue));\n    }\n  }, [isDev, defaultValue]);\n  const FormControl = <MUIFormControl classes={{\n    root: classes.formControl\n  }} required={required} margin={margin} component=\"fieldset\" error={errorState} fullWidth={fullWidth}>\n        {!hideLabel && <FormLabel component=\"legend\">{labelText}</FormLabel>}\n        <RadioGroup row={row} value={value} name={nameAttributeValue || customModelAttributeName} onChange={handleChange} onBlur={validationHandler} aria-label={labelText}>\n          {renderRadios()}\n        </RadioGroup>\n        <FormHelperText>{helper}</FormHelperText>\n        <input className={classes.validationInput} onInvalid={validationHandler} type=\"text\" tabIndex=\"-1\" required={required} value={radioValues.includes(value) ? value : ''} />\n      </MUIFormControl>;\n  return isDev ? <div className={classes.root}>{FormControl}</div> : FormControl;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  const {\n    color: colorFunc\n  } = B;\n\n  const getOpacColor = (col, val) => colorFunc.alpha(col, val);\n\n  return {\n    root: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    validationInput: {\n      height: 0,\n      width: 0,\n      fontSize: 0,\n      padding: 0,\n      border: 'none',\n      pointerEvents: 'none'\n    },\n    formControl: {\n      '& > legend': {\n        color: ({\n          options: {\n            labelColor\n          }\n        }) => [style.getColor(labelColor), '!important'],\n        '&.Mui-error': {\n          color: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      },\n      '& > p': {\n        color: ({\n          options: {\n            helperColor\n          }\n        }) => [style.getColor(helperColor), '!important'],\n        '&.Mui-error': {\n          color: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        }\n      },\n      '& .MuiFormControlLabel-root': {\n        '& .MuiRadio-root': {\n          color: ({\n            options: {\n              radioColor\n            }\n          }) => [style.getColor(radioColor), '!important'],\n          '&:hover': {\n            backgroundColor: ({\n              options: {\n                radioColor\n              }\n            }) => [getOpacColor(style.getColor(radioColor), 0.04), '!important']\n          },\n          '&.Mui-checked': {\n            color: ({\n              options: {\n                radioColorChecked\n              }\n            }) => [style.getColor(radioColorChecked), '!important'],\n            '&:hover': {\n              backgroundColor: ({\n                options: {\n                  radioColorChecked\n                }\n              }) => [getOpacColor(style.getColor(radioColorChecked), 0.04), '!important']\n            }\n          }\n        },\n        '& .MuiTypography-root': {\n          color: ({\n            options: {\n              textColor\n            }\n          }) => [style.getColor(textColor), '!important']\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      }\n    }\n  };\n}","functions":["Refetch"],"triggers":["onLoad","onError","onSuccess","onNoResults"]},{"name":"Row","type":"BODY_COMPONENT","allowedTypes":["LAYOUT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"<div className={classes.container}>\n      {(() => {\n    const isEmpty = children.length === 0;\n    const isPristine = isEmpty && B.env === 'dev';\n    return <section className={[classes.row, isEmpty ? classes.empty : '', isPristine ? classes.pristine : ''].join(' ')}>\n            {isPristine ? 'Row' : children}\n          </section>;\n  })()}\n    </div>","styles":"B => theme => {\n  const style = new B.Styling(theme);\n  const width = {\n    Full: '100%',\n    XL: '1200px',\n    L: '960px',\n    M: '720px',\n    S: '540px'\n  };\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    container: {\n      width: '100%',\n      height: ({\n        options: {\n          rowHeight\n        }\n      }) => rowHeight || 'auto',\n      maxWidth: ({\n        options: {\n          maxRowWidth\n        }\n      }) => width[maxRowWidth],\n      backgroundColor: ({\n        options: {\n          backgroundColor\n        }\n      }) => backgroundColor === 'transparent' ? 'transparent' : style.getColor(backgroundColor),\n      backgroundImage: 'none',\n      backgroundPosition: 'left top',\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'cover',\n      borderWidth: 0,\n      borderColor: 'transparent',\n      borderStyle: 'none',\n      borderRadius: 0,\n      boxSizing: 'border-box',\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing,\n          maxRowWidth\n        }\n      }) => maxRowWidth !== 'Full' ? 'auto' : getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing,\n          maxRowWidth\n        }\n      }) => maxRowWidth !== 'Full' ? 'auto' : getSpacing(outerSpacing[3]),\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing,\n            maxRowWidth\n          }\n        }) => maxRowWidth !== 'Full' ? 'auto' : getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing,\n            maxRowWidth\n          }\n        }) => maxRowWidth !== 'Full' ? 'auto' : getSpacing(outerSpacing[3], 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing,\n            maxRowWidth\n          }\n        }) => maxRowWidth !== 'Full' ? 'auto' : getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing,\n            maxRowWidth\n          }\n        }) => maxRowWidth !== 'Full' ? 'auto' : getSpacing(outerSpacing[3], 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing,\n            maxRowWidth\n          }\n        }) => maxRowWidth !== 'Full' ? 'auto' : getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing,\n            maxRowWidth\n          }\n        }) => maxRowWidth !== 'Full' ? 'auto' : getSpacing(outerSpacing[3], 'Desktop')\n      }\n    },\n    row: {\n      display: 'flex',\n      height: '100%',\n      flexWrap: 'wrap',\n      justifyContent: 'flex-start',\n      boxSizing: 'border-box'\n    },\n    empty: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: ({\n        options: {\n          rowHeight\n        }\n      }) => rowHeight ? 0 : '4rem',\n      height: '100%',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase'\n    },\n    pristine: {\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"Select","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    disabled,\n    variant,\n    size,\n    fullWidth,\n    margin,\n    helperText,\n    selectOptions = '',\n    model,\n    filter,\n    optionType,\n    labelProperty: labelProp,\n    valueProperty: valueProp,\n    showError,\n    hideLabel,\n    customModelAttribute: customModelAttributeObj,\n    property,\n    validationValueMissing,\n    nameAttribute,\n    order,\n    orderBy,\n    blanco\n  } = options;\n  const {\n    TextField,\n    MenuItem\n  } = window.MaterialUI.Core;\n  const displayError = showError === 'built-in';\n  const isDev = B.env === 'dev';\n  const {\n    useAllQuery,\n    getProperty,\n    useText,\n    getCustomModelAttribute\n  } = B;\n  const [errorState, setErrorState] = useState(false);\n  const [afterFirstInvalidation, setAfterFirstInvalidation] = useState(false);\n  const [helper, setHelper] = useState(useText(helperText));\n  const blancoText = useText(blanco);\n  const {\n    kind,\n    values = []\n  } = getProperty(property) || {};\n  const {\n    id: customModelAttributeId,\n    label = [],\n    value: defaultValue = []\n  } = customModelAttributeObj;\n  const [currentValue, setCurrentValue] = useState(useText(defaultValue));\n  const labelText = useText(label);\n  const nameAttributeValue = useText(nameAttribute);\n  const customModelAttribute = getCustomModelAttribute(customModelAttributeId);\n  const {\n    name: customModelAttributeName,\n    validations: {\n      required\n    } = {}\n  } = customModelAttribute || {};\n  const value = currentValue;\n  const {\n    name: labelName\n  } = getProperty(labelProp) || {};\n  const {\n    name: propName\n  } = getProperty(valueProp) || {};\n  const orderByArray = [orderBy].flat();\n  const sort = !isDev && orderBy ? orderByArray.reduceRight((acc, orderByProperty, index) => {\n    const prop = getProperty(orderByProperty);\n    return index === orderByArray.length - 1 ? {\n      [prop.name]: order.toUpperCase()\n    } : {\n      [prop.name]: acc\n    };\n  }, {}) : {};\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = model && useAllQuery(model, {\n    filter,\n    skip: 0,\n    take: 50,\n    variables: { ...(orderBy ? {\n        sort: {\n          relation: sort\n        }\n      } : {})\n    }\n  });\n  const mounted = useRef(false);\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n  useEffect(() => {\n    if (mounted.current && loading) {\n      B.triggerEvent('onLoad', loading);\n    }\n  }, [loading]);\n\n  if (error && !displayError) {\n    B.triggerEvent('onError', error);\n  }\n\n  const {\n    results\n  } = data || {};\n\n  if (results) {\n    if (results.length > 0) {\n      B.triggerEvent('onSuccess', results);\n    } else {\n      B.triggerEvent('onNoResults');\n    }\n  }\n\n  B.defineFunction('Refetch', () => refetch());\n\n  const handleValidation = () => {\n    const hasError = required && !value;\n    setErrorState(hasError);\n    const message = hasError ? useText(validationValueMissing) : useText(helperText);\n    setHelper(message);\n  };\n\n  const handleChange = event => {\n    const {\n      target: {\n        value: eventValue\n      }\n    } = event;\n\n    if (afterFirstInvalidation) {\n      handleValidation();\n    }\n\n    setCurrentValue(eventValue);\n  };\n\n  const validationHandler = () => {\n    const hasError = required && !value;\n    setAfterFirstInvalidation(hasError);\n    handleValidation();\n  };\n\n  useEffect(() => {\n    if (isDev) {\n      setCurrentValue(useText(defaultValue));\n    }\n  }, [isDev, defaultValue]);\n\n  const renderOptions = () => {\n    if (kind === 'list' || kind === 'LIST') {\n      return values.map(({\n        value: v\n      }) => <MenuItem key={v} value={v}>\n            {v}\n          </MenuItem>);\n    }\n\n    if (optionType === 'static') {\n      return selectOptions.split('\\n').map(option => <MenuItem key={option} value={option}>\n            {option}\n          </MenuItem>);\n    }\n\n    if (loading) return <span>Loading...</span>;\n    if (error && displayError) return <span>{error.message}</span>;\n    return (results || []).map(item => propName && labelName && <MenuItem key={item.id} value={item[propName]}>\n              {item[labelName]}\n            </MenuItem>);\n  };\n\n  const SelectCmp = <>\n        <TextField select defaultValue={value} value={value} size={size} classes={{\n      root: classes.formControl\n    }} variant={variant} fullWidth={fullWidth} onChange={handleChange} onBlur={validationHandler} inputProps={{\n      name: nameAttributeValue || customModelAttributeName,\n      tabIndex: isDev ? -1 : 0\n    }} required={required} disabled={disabled} label={!hideLabel && labelText} error={errorState} margin={margin} helperText={helper}>\n          {blancoText && <MenuItem value=\"\">{blancoText}</MenuItem>}\n          {renderOptions()}\n        </TextField>\n        <input className={classes.validationInput} onInvalid={validationHandler} type=\"text\" tabIndex=\"-1\" required={required} value={value} />\n      </>;\n  return isDev ? <div className={classes.root}>{SelectCmp}</div> : SelectCmp;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    root: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    validationInput: {\n      height: 0,\n      width: 0,\n      fontSize: 0,\n      padding: 0,\n      border: 'none',\n      pointerEvents: 'none'\n    },\n    formControl: {\n      '& > label': {\n        color: ({\n          options: {\n            labelColor\n          }\n        }) => [style.getColor(labelColor), '!important'],\n        zIndex: ({\n          options: {\n            variant\n          }\n        }) => variant === 'standard' ? 1 : null,\n        '&.Mui-focused': {\n          color: ({\n            options: {\n              borderFocusColor\n            }\n          }) => [style.getColor(borderFocusColor), '!important']\n        },\n        '&.Mui-error': {\n          color: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      },\n      '& > p': {\n        color: ({\n          options: {\n            helperColor\n          }\n        }) => [style.getColor(helperColor), '!important'],\n        '&.Mui-error': {\n          color: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        }\n      },\n      '& .MuiInputBase-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important'],\n        backgroundColor: ({\n          options: {\n            backgroundColor\n          }\n        }) => [style.getColor(backgroundColor), '!important'],\n        '&:hover': {\n          '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n            borderColor: ({\n              options: {\n                borderHoverColor\n              }\n            }) => [style.getColor(borderHoverColor), '!important']\n          }\n        },\n        '&.Mui-focused, &.Mui-focused:hover': {\n          '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n            borderColor: ({\n              options: {\n                borderFocusColor\n              }\n            }) => [style.getColor(borderFocusColor), '!important']\n          }\n        },\n        '& fieldset': {\n          top: ({\n            options: {\n              hideLabel\n            }\n          }) => hideLabel ? 0 : null\n        },\n        '& legend': {\n          display: ({\n            options: {\n              hideLabel\n            }\n          }) => hideLabel ? ['none', '!important'] : null\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      },\n      '& .MuiIconButton-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important']\n      },\n      '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n        borderColor: ({\n          options: {\n            borderColor\n          }\n        }) => [style.getColor(borderColor), '!important']\n      },\n      '& .MuiInput-underline, & .MuiFilledInput-underline': {\n        '&::before, &::after': {\n          borderColor: ({\n            options: {\n              borderColor\n            }\n          }) => [style.getColor(borderColor), '!important']\n        },\n        '&:hover': {\n          '&::before, &::after': {\n            borderColor: ({\n              options: {\n                borderHoverColor\n              }\n            }) => [style.getColor(borderHoverColor), '!important']\n          }\n        },\n        '&.Mui-focused::before, &.Mui-focused::after, &.Mui-focused:hover::before, &.Mui-focused:hover::after': {\n          borderColor: ({\n            options: {\n              borderFocusColor\n            }\n          }) => [style.getColor(borderFocusColor), '!important']\n        }\n      },\n      '& .MuiInputBase-root.Mui-error, & .MuiInputBase-root.Mui-error:hover, & .MuiInputBase-root.Mui-error.Mui-focused, & .MuiInputBase-root.Mui-error.Mui-focused:hover': {\n        '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n          borderColor: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        },\n        '&.MuiInput-underline, &.MuiFilledInput-underline': {\n          '&::before, &::after': {\n            borderColor: ({\n              options: {\n                errorColor\n              }\n            }) => [style.getColor(errorColor), '!important']\n          },\n          '&:hover': {\n            '&::before, &::after': {\n              borderColor: ({\n                options: {\n                  errorColor\n                }\n              }) => [style.getColor(errorColor), '!important']\n            }\n          },\n          '&.Mui-focused::before, &.Mui-focused::after, &.Mui-focused:hover::before, &.Mui-focused:hover::after': {\n            borderColor: ({\n              options: {\n                errorColor\n              }\n            }) => [style.getColor(errorColor), '!important']\n          }\n        }\n      }\n    }\n  };\n}","functions":["Refetch"],"triggers":["onLoad","onError","onSuccess","onNoResults"]},{"name":"Snackbar","type":"CONTENT_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    Snackbar,\n    IconButton\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    visible,\n    anchorOriginHorizontal,\n    anchorOriginVertical,\n    autoHide,\n    autoHideDuration,\n    content,\n    allowTextServerResponse\n  } = options;\n  const {\n    env,\n    useText\n  } = B;\n  const isDev = env === 'dev';\n  const isEmpty = children.length === 0;\n  const [open, setOpen] = useState(false);\n  const text = useText(content);\n  const [textFromServer, setTextFromServer] = useState('');\n  const CloseIcon = Icons.Close;\n\n  const handleClose = (_, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const formatError = err => {\n    const errorMessage = err.graphQLErrors && err.graphQLErrors[0] && err.graphQLErrors[0].extensions.error || err.message;\n    return errorMessage;\n  };\n\n  const cleanUpMessage = message => message && JSON.stringify(message).replace(/[{}[\\]_\"]/g, ' ').replace(/[ ]+/g, ' ').replace(/ :/g, ':').replace(/ ,/g, ',').trim();\n\n  B.defineFunction('Show', showMessage => {\n    if (typeof showMessage === 'string') setTextFromServer(showMessage);\n\n    if (typeof showMessage === 'object' && showMessage !== null) {\n      const errorMessage = formatError(showMessage);\n      setTextFromServer(cleanUpMessage(errorMessage));\n    }\n\n    setOpen(true);\n  });\n  B.defineFunction('Hide', () => setOpen(false));\n  B.defineFunction('Show/Hide', () => setOpen(s => !s));\n  useEffect(() => {\n    setOpen(visible);\n  }, [visible]);\n  const duration = autoHide ? autoHideDuration : null;\n  const textContent = textFromServer && allowTextServerResponse ? textFromServer : text;\n  let snackbarOptions = {\n    open,\n    autoHideDuration: isDev ? null : duration,\n    onClose: handleClose,\n    anchorOrigin: {\n      horizontal: anchorOriginHorizontal,\n      vertical: anchorOriginVertical\n    },\n    key: textContent,\n    action: <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n          <CloseIcon fontSize=\"small\" />\n        </IconButton>,\n    classes: {\n      root: isDev && classes.root\n    }\n  };\n\n  if (isEmpty) {\n    snackbarOptions = { ...snackbarOptions,\n      message: textContent\n    };\n  }\n\n  const SnackbarCmp = <Snackbar {...snackbarOptions}>\n        {isEmpty ? null : <div>{children}</div>}\n      </Snackbar>;\n  return isDev ? <div className={classes.wrapper}>\n        <div className={classes.pristine}>Snackbar</div>\n        {SnackbarCmp}\n      </div> : SnackbarCmp;\n})()","styles":"() => () => ({\n  root: {\n    zIndex: [9, '!important'],\n    left: ({\n      options: {\n        anchorOriginHorizontal\n      }\n    }) => {\n      const isRight = anchorOriginHorizontal === 'right';\n      const isLeft = anchorOriginHorizontal === 'left';\n      const recalculatedPosition = isLeft ? 'calc(8px + 328px)' : 'calc(50% + 328px / 2)';\n      return !isRight && [recalculatedPosition, '!important'];\n    },\n    '& .MuiSnackbarContent-root': {\n      transition: () => ['opacity 0ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, transform 0ms cubic-bezier(0.4, 0, 0.2, 1) 0ms', '!important']\n    }\n  },\n  pristine: {\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '2rem',\n    width: '100%',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    boxSizing: 'border-box',\n    textAlign: 'center'\n  }\n})","functions":["Show","Hide","Show/Hide"],"triggers":[]},{"name":"Step","type":"STEP_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    env\n  } = B;\n  const isDev = env === 'dev';\n  const isEmpty = children.length === 0;\n  const {\n    label,\n    icon\n  } = options || {};\n  const {\n    stepLabelData,\n    setStepLabelData,\n    active,\n    isFirstRender\n  } = parent;\n  const StepContent = isEmpty && isDev ? <div className={classes.empty}>Step</div> : children;\n  const StepCmp = <>{active ? StepContent : null}</>;\n  useEffect(() => {\n    if (active && !isFirstRender) {\n      B.triggerEvent('OnStepActive');\n    } else if (!active && !isFirstRender) {\n      B.triggerEvent('OnStepInactive');\n    }\n  }, [active, isFirstRender]);\n  useEffect(() => {\n    if (setStepLabelData) {\n      setStepLabelData({ ...stepLabelData,\n        [`label${index}`]: label,\n        [`icon${index}`]: icon\n      });\n    }\n  }, [setStepLabelData, index, label, icon]);\n  return isDev ? <div className={classes.wrapper}>{StepCmp}</div> : StepCmp;\n})()","styles":"() => () => ({\n  empty: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '2.5rem',\n    fontSize: '0.75rem',\n    color: '#262A3A',\n    textTransform: 'uppercase',\n    borderWidth: '0.0625rem',\n    borderColor: '#AFB5C8',\n    borderStyle: 'dashed',\n    backgroundColor: '#F0F1F5'\n  }\n})","functions":[],"triggers":["OnStepActive","OnStepInactive"]},{"name":"Stepper","type":"CONTAINER_COMPONENT","allowedTypes":["STEP_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    Stepper,\n    Step,\n    StepLabel,\n    StepButton,\n    StepContent,\n    MobileStepper,\n    Button\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    env,\n    useText,\n    Children\n  } = B;\n  const {\n    activeStep: stepIndex,\n    variant,\n    type,\n    alternativeLabel,\n    allSteps,\n    buttonNext,\n    buttonPrev\n  } = options;\n  const isDev = env === 'dev';\n  const isEmpty = children.length === 0;\n  const activeStepIndex = parseInt(stepIndex - 1, 10) || 0;\n  const [activeStep, setActiveStep] = useState(activeStepIndex);\n  const buttonNextText = useText(buttonNext);\n  const buttonPrevText = useText(buttonPrev);\n  const isLinear = variant === 'linear';\n  const numRendersRef = useRef(1);\n  const [stepLabelData, setStepLabelData] = useState({});\n\n  const handleNext = () => {\n    setActiveStep(prevActiveStep => {\n      const nextStep = prevActiveStep + 1;\n\n      if (nextStep > children.length - 1) {\n        return prevActiveStep;\n      }\n\n      return nextStep;\n    });\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => {\n      const nextStep = prevActiveStep - 1;\n\n      if (nextStep < 0) {\n        return prevActiveStep;\n      }\n\n      return nextStep;\n    });\n  };\n\n  const handleStep = step => () => {\n    if (step < children.length && step > -1) {\n      setActiveStep(step);\n    }\n  };\n\n  useEffect(() => {\n    if (isDev) {\n      setActiveStep(parseInt(stepIndex - 1, 10));\n    }\n  }, [isDev, stepIndex]);\n  const StepperCmp = <>\n        <Stepper nonLinear={!isLinear} alternativeLabel={alternativeLabel} activeStep={activeStep} orientation={type}>\n          {React.Children.map(children, (child, index) => {\n        const {\n          options: childOptions = {}\n        } = child.props || {};\n        const {\n          label = stepLabelData[`label${index}`] || [`Step ${index + 1}`],\n          icon = stepLabelData[`icon${index}`] || 'None'\n        } = childOptions;\n        const isActive = index === activeStep || allSteps;\n        const labelText = useText(label);\n        const hasIcon = icon !== 'None';\n        let stepProps = {};\n        let labelProps = {};\n\n        if (allSteps) {\n          stepProps = { ...stepProps,\n            active: true\n          };\n        }\n\n        const IconCmp = () => hasIcon && React.createElement(Icons[icon], {\n          className: [classes.stepIcon, isActive ? classes.stepIconActive : ''].join(' ')\n        });\n\n        if (hasIcon) {\n          labelProps = { ...labelProps,\n            StepIconComponent: IconCmp\n          };\n        }\n\n        const StepComponent = <Step key={labelText} {...stepProps}>\n                {isLinear ? <StepLabel classes={{\n            root: classes.stepLabel\n          }} {...labelProps}>\n                    {labelText}\n                  </StepLabel> : <StepButton classes={{\n            root: classes.stepButton\n          }} onClick={handleStep(index)}>\n                    <StepLabel classes={{\n              root: classes.stepLabel\n            }} {...labelProps}>\n                      {labelText}\n                    </StepLabel>\n                  </StepButton>}\n                {type === 'vertical' && <StepContent>\n                    <Children stepLabelData={stepLabelData} setStepLabelData={setStepLabelData} active={isActive} isFirstRender={numRendersRef.current === 1}>\n                      {React.cloneElement(child, { ...childOptions\n              })}\n                    </Children>\n                  </StepContent>}\n              </Step>;\n        return StepComponent;\n      })}\n        </Stepper>\n        {type === 'horizontal' && <>\n            {React.Children.map(children, (child, index) => {\n        const {\n          options: childOptions = {}\n        } = child.props || {};\n        const isActive = index === activeStep || allSteps;\n        return <Children stepLabelData={stepLabelData} setStepLabelData={setStepLabelData} active={isActive} isFirstRender={numRendersRef.current === 1}>\n                  {React.cloneElement(child, { ...childOptions\n          })}\n                </Children>;\n      })}\n          </>}\n      </>;\n  const {\n    KeyboardArrowLeft,\n    KeyboardArrowRight\n  } = Icons;\n  const maxSteps = children.length;\n  const MobileStepperCmp = <>\n        {React.Children.map(children, (child, index) => <Children stepLabelData={stepLabelData} setStepLabelData={setStepLabelData} active={index === activeStep || allSteps} isFirstRender={numRendersRef.current === 1}>\n            {React.cloneElement(child)}\n          </Children>)}\n        <MobileStepper steps={maxSteps} position=\"static\" variant=\"text\" activeStep={activeStep} classes={{\n      root: classes.mobileRoot\n    }} nextButton={<Button size=\"small\" onClick={handleNext} disabled={activeStep === maxSteps - 1} classes={{\n      root: classes.stepButtonMobile\n    }}>\n              {buttonNextText}\n              <KeyboardArrowRight />\n            </Button>} backButton={<Button size=\"small\" onClick={handleBack} disabled={activeStep === 0} classes={{\n      root: classes.stepButtonMobile\n    }}>\n              <KeyboardArrowLeft />\n              {buttonPrevText}\n            </Button>} />\n      </>;\n  const StepperComponent = type === 'mobile' ? MobileStepperCmp : StepperCmp;\n  B.defineFunction('NextStep', () => handleNext());\n  B.defineFunction('PreviousStep', () => handleBack());\n  numRendersRef.current += 1;\n  return isDev ? <div className={[classes.wrapper, isEmpty ? classes.empty : ''].join(' ')}>\n        {isEmpty ? 'Stepper' : StepperComponent}\n      </div> : StepperComponent;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  const {\n    color: colorFunc\n  } = B;\n\n  const getLighterColor = (col, val) => colorFunc.lighten(col, val);\n\n  const isDev = B.env === 'dev';\n  return {\n    stepLabel: {\n      '& .MuiStepIcon-root': {\n        color: ({\n          options: {\n            inactiveColor\n          }\n        }) => style.getColor(inactiveColor),\n        '&.MuiStepIcon-active': {\n          color: ({\n            options: {\n              activeColor\n            }\n          }) => style.getColor(activeColor)\n        }\n      }\n    },\n    stepButton: {\n      pointerEvents: isDev && 'none'\n    },\n    mobileRoot: {\n      backgroundColor: ({\n        options: {\n          inactiveColor\n        }\n      }) => [getLighterColor(style.getColor(inactiveColor), 0.7), '!important']\n    },\n    stepButtonMobile: {\n      pointerEvents: isDev && 'none',\n      color: ({\n        options: {\n          activeColor\n        }\n      }) => [style.getColor(activeColor), '!important'],\n      '&:disabled': {\n        color: ({\n          options: {\n            inactiveColor\n          }\n        }) => [style.getColor(inactiveColor), '!important']\n      }\n    },\n    stepIcon: {\n      fill: ({\n        options: {\n          inactiveColor\n        }\n      }) => [style.getColor(inactiveColor), '!important']\n    },\n    stepIconActive: {\n      fill: ({\n        options: {\n          activeColor\n        }\n      }) => [style.getColor(activeColor), '!important']\n    },\n    empty: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      height: '2.5rem',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    }\n  };\n}","functions":["NextStep","PreviousStep"],"triggers":[]},{"name":"Tab","type":"TAB_COMPONENT","allowedTypes":["BODY_COMPONENT","CONTAINER_COMPONENT","CONTENT_COMPONENT"],"orientation":"VERTICAL","jsx":"(() => {\n  const {\n    Typography,\n    Box\n  } = window.MaterialUI.Core;\n  const {\n    env,\n    useText\n  } = B;\n  const isDev = env === 'dev';\n  const {\n    label,\n    icon,\n    disabled,\n    disableRipple,\n    iconAlignment\n  } = options;\n  const {\n    value,\n    tabData,\n    setTabData,\n    showAllTabs,\n    setSelectedTab,\n    index\n  } = parent;\n  const isActive = value === index || showAllTabs;\n\n  const doSetTab = () => {\n    setSelectedTab(index);\n  };\n\n  B.defineFunction('Select', doSetTab);\n\n  const EmptyBox = () => {\n    if (!isDev) return null;\n    return <Box className={classes.empty} p={3}>\n          Tab\n        </Box>;\n  };\n\n  const TabPanel = (isActive || !isDev) && <Typography component=\"div\" role=\"tabpanel\" hidden={!isActive} aria-labelledby=\"tabs\" classes={{\n    root: classes.root\n  }}>\n        {children.length === 0 ? <EmptyBox /> : children}\n      </Typography>;\n\n  const labelChanged = () => {\n    const currentLabel = tabData[`label${index}`] ? useText(tabData[`label${index}`]) : '';\n    return currentLabel !== useText(label);\n  };\n\n  const iconChanged = () => tabData[`icon${index}`] !== icon;\n\n  const iconAlignmentChanged = () => tabData[`iconAlignment${index}`] !== iconAlignment;\n\n  const disabledChanged = () => tabData[`disabled${index}`] !== disabled;\n\n  const disabledRippleChanged = () => tabData[`disableRipple${index}`] !== disableRipple;\n\n  const hasChange = () => labelChanged() || iconChanged() || iconAlignmentChanged() || disabledChanged() || disabledRippleChanged();\n\n  useEffect(() => {\n    if (setTabData && hasChange()) {\n      setTabData({ ...tabData,\n        [`label${index}`]: label,\n        [`icon${index}`]: icon,\n        [`disabled${index}`]: disabled,\n        [`disableRipple${index}`]: disableRipple,\n        [`iconAlignment${index}`]: iconAlignment\n      });\n    }\n  }, [index, setTabData, tabData, label, icon, iconAlignment, disabled, disableRipple]);\n  return isDev ? <div className={classes.wrapper}>{TabPanel}</div> : TabPanel;\n})()","styles":"B => () => {\n  const {\n    env\n  } = B;\n  const isDev = env === 'dev';\n  return {\n    wrapper: {\n      height: config => {\n        const {\n          options: {\n            height\n          },\n          parent: {\n            index,\n            value\n          }\n        } = config;\n        return index === value ? height : 0;\n      },\n      width: config => {\n        const {\n          options: {\n            width\n          },\n          parent: {\n            index,\n            value\n          }\n        } = config;\n        return index === value ? width : 0;\n      }\n    },\n    root: {\n      height: ({\n        options: {\n          height\n        }\n      }) => isDev ? '100%' : height,\n      width: ({\n        options: {\n          width\n        }\n      }) => isDev ? '100%' : width\n    },\n    empty: {\n      height: '100%',\n      width: '100%',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '4rem',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box',\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    }\n  };\n}","functions":["Select"],"triggers":[]},{"name":"Tabs","type":"CONTENT_COMPONENT","allowedTypes":["TAB_COMPONENT"],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    Tabs,\n    Tab\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    Children,\n    env,\n    useText\n  } = B;\n  const {\n    defaultValue,\n    variant,\n    centered,\n    scrollButtons,\n    alignment,\n    showAllTabs,\n    hideTabs\n  } = options;\n  const orientation = alignment === 'top' || alignment === 'bottom' ? 'horizontal' : 'vertical';\n  const isDev = env === 'dev';\n  const [value, setValue] = useState(parseInt(defaultValue - 1, 10) || 0);\n  const [tabData, setTabData] = useState({});\n\n  const handleChange = (_, newValue) => {\n    setValue(newValue);\n  };\n\n  const setSelectedTab = index => {\n    setValue(index);\n  };\n\n  useEffect(() => {\n    if (isDev) {\n      setValue(parseInt(defaultValue - 1, 10));\n    }\n  }, [isDev, defaultValue]);\n  const TabsHeader = <Tabs aria-label=\"tabs\" onChange={handleChange} value={value} variant={variant} centered={centered} orientation={orientation} scrollButtons={scrollButtons} classes={{\n    root: classes.root,\n    indicator: classes.indicator\n  }}>\n        {React.Children.map(children, (child, index) => {\n      const {\n        options\n      } = child.props;\n      const {\n        label = tabData[`label${index}`] || [`Tab`],\n        icon = tabData[`icon${index}`] || 'None',\n        iconAlignment = tabData[`iconAlignment${index}`] || 'top',\n        disabled = tabData[`disabled${index}`] || false,\n        disableRipple = tabData[`disableRipple${index}`] || false\n      } = isDev ? {} : options;\n\n      function getFlexDirection() {\n        switch (iconAlignment) {\n          case 'top':\n            return 'column';\n\n          case 'right':\n            return 'row-reverse';\n\n          case 'bottom':\n            return 'column-reverse';\n\n          default:\n            return 'row';\n        }\n      }\n\n      return <Tab label={<div className={classes.labelWrapper} style={{\n        flexDirection: getFlexDirection()\n      }}>\n                  <div className={classes.iconWrapper}>\n                    {icon && icon !== 'None' ? React.createElement(Icons[icon]) : undefined}\n                  </div>\n                  <div>{useText(label)}</div>\n                </div>} disabled={disabled} disableRipple={disableRipple} />;\n    })}\n      </Tabs>;\n  const TabGroup = <div className={classes.tabs}>\n        {!hideTabs && TabsHeader}\n        {React.Children.map(children, (child, index) => {\n      const {\n        options: childOptions = {}\n      } = child.props || {};\n      return <Children index={index} value={value} tabData={tabData} setTabData={setTabData} showAllTabs={showAllTabs} setSelectedTab={setSelectedTab}>\n              {React.cloneElement(child, { ...childOptions\n        })}\n            </Children>;\n    })}\n      </div>;\n  return isDev ? <div className={[classes.wrapper, children.length === 0 && classes.empty].join(' ')}>\n        {children.length === 0 ? 'Tabs' : TabGroup}\n      </div> : TabGroup;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  const {\n    env\n  } = B;\n  const isDev = env === 'dev';\n  return {\n    wrapper: {\n      height: ({\n        options: {\n          height\n        }\n      }) => height,\n      width: ({\n        options: {\n          width\n        }\n      }) => width,\n      '& .MuiTabs-flexContainer > button': {\n        pointerEvents: 'none'\n      }\n    },\n    tabs: {\n      display: 'flex',\n      height: ({\n        options: {\n          height\n        }\n      }) => isDev ? '100%' : height,\n      width: ({\n        options: {\n          width\n        }\n      }) => isDev ? '100%' : width,\n      flexDirection: ({\n        options: {\n          alignment\n        }\n      }) => {\n        switch (alignment) {\n          case 'top':\n            return 'column';\n\n          case 'right':\n            return 'row-reverse';\n\n          case 'bottom':\n            return 'column-reverse';\n\n          default:\n            return 'row';\n        }\n      }\n    },\n    root: {\n      backgroundColor: ({\n        options: {\n          appBarColor\n        }\n      }) => [style.getColor(appBarColor), '!important'],\n      color: ({\n        options: {\n          textColor\n        }\n      }) => [style.getColor(textColor), '!important'],\n      minWidth: '10rem'\n    },\n    indicator: {\n      left: ({\n        options: {\n          alignment\n        }\n      }) => alignment === 'right' && 0,\n      top: ({\n        options: {\n          alignment\n        }\n      }) => alignment === 'bottom' && 0,\n      backgroundColor: ({\n        options: {\n          indicatorColor\n        }\n      }) => [style.getColor(indicatorColor), '!important']\n    },\n    labelWrapper: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    iconWrapper: {\n      marginLeft: 5,\n      marginRight: 5,\n      display: 'flex',\n      alignItems: 'center'\n    },\n    empty: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '4rem',\n      fontSize: '0.75rem',\n      color: '#262A3A',\n      textTransform: 'uppercase',\n      boxSizing: 'border-box',\n      borderWidth: '0.0625rem',\n      borderColor: '#AFB5C8',\n      borderStyle: 'dashed',\n      backgroundColor: '#F0F1F5'\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"Text","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    content,\n    useInnerHtml\n  } = options;\n  const {\n    env\n  } = B;\n  const isDev = env === 'dev';\n  const Tag = useInnerHtml ? 'div' : {\n    Title1: 'h1',\n    Title2: 'h2',\n    Title3: 'h3',\n    Title4: 'h4',\n    Title5: 'h5',\n    Title6: 'h6',\n    Body1: 'p',\n    Body2: 'p'\n  }[options.type || 'Body1'];\n  const parsedContent = B.useText(content);\n  return useInnerHtml && !isDev ? <Tag className={classes.content} dangerouslySetInnerHTML={{\n    __html: parsedContent\n  }} /> : <Tag className={classes.content}>\n        {content.length > 0 && parsedContent}\n        {content.length === 0 && isDev && <span className={classes.placeholder}>Empty content</span>}\n      </Tag>;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n\n  const getSpacing = (idx, device = 'Mobile') => idx === '0' ? '0rem' : style.getSpacing(idx, device);\n\n  return {\n    content: {\n      display: 'block',\n      marginTop: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[0]),\n      marginRight: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[1]),\n      marginBottom: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[2]),\n      marginLeft: ({\n        options: {\n          outerSpacing\n        }\n      }) => getSpacing(outerSpacing[3]),\n      textAlign: ({\n        options: {\n          textAlignment\n        }\n      }) => textAlignment,\n      padding: 0,\n      whiteSpace: 'pre-wrap',\n      color: ({\n        options: {\n          textColor\n        }\n      }) => style.getColor(textColor),\n      fontFamily: ({\n        options: {\n          type\n        }\n      }) => style.getFontFamily(type),\n      fontSize: ({\n        options: {\n          type\n        }\n      }) => style.getFontSize(type),\n      fontWeight: ({\n        options: {\n          fontWeight\n        }\n      }) => fontWeight,\n      textTransform: ({\n        options: {\n          type\n        }\n      }) => style.getTextTransform(type),\n      letterSpacing: ({\n        options: {\n          type\n        }\n      }) => style.getLetterSpacing(type),\n      [`@media ${B.mediaMinWidth(600)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Portrait'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Portrait'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Portrait'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Portrait'),\n        fontSize: ({\n          options: {\n            type\n          }\n        }) => style.getFontSize(type, 'Portrait')\n      },\n      [`@media ${B.mediaMinWidth(960)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Landscape'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Landscape'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Landscape'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Landscape'),\n        fontSize: ({\n          options: {\n            type\n          }\n        }) => style.getFontSize(type, 'Landscape')\n      },\n      [`@media ${B.mediaMinWidth(1280)}`]: {\n        marginTop: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[0], 'Desktop'),\n        marginRight: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[1], 'Desktop'),\n        marginBottom: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[2], 'Desktop'),\n        marginLeft: ({\n          options: {\n            outerSpacing\n          }\n        }) => getSpacing(outerSpacing[3], 'Desktop'),\n        fontSize: ({\n          options: {\n            type\n          }\n        }) => style.getFontSize(type, 'Desktop')\n      }\n    },\n    placeholder: {\n      color: '#dadde4'\n    }\n  };\n}","functions":[],"triggers":[]},{"name":"TextField","type":"CONTENT_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    disabled,\n    error,\n    multiline,\n    rows,\n    placeholder,\n    variant,\n    type,\n    size,\n    fullWidth,\n    margin,\n    helperText,\n    adornment,\n    adornmentIcon,\n    adornmentPosition,\n    pattern,\n    minlength,\n    maxlength,\n    validationTypeMismatch,\n    validationPatternMismatch,\n    validationValueMissing,\n    validationTooLong,\n    validationTooShort,\n    hideLabel,\n    customModelAttribute: customModelAttributeObj,\n    nameAttribute\n  } = options;\n  const {\n    FormControl,\n    Input,\n    OutlinedInput,\n    FilledInput,\n    InputLabel,\n    FormHelperText,\n    InputAdornment,\n    IconButton\n  } = window.MaterialUI.Core;\n  const {\n    Icons\n  } = window.MaterialUI;\n  const {\n    useText,\n    env,\n    getCustomModelAttribute\n  } = B;\n  const isDev = env === 'dev';\n  const isNumberType = type === 'number';\n  const isPasswordType = type === 'password';\n  const [isDisabled, setIsDisabled] = useState(disabled);\n  const [showPassword, togglePassword] = useState(false);\n  const [errorState, setErrorState] = useState(error);\n  const [afterFirstInvalidation, setAfterFirstInvalidation] = useState(false);\n  const [helper, setHelper] = useState(useText(helperText));\n  const {\n    id: customModelAttributeId,\n    label = [],\n    value: defaultValue = []\n  } = customModelAttributeObj;\n  const [currentValue, setCurrentValue] = useState(useText(defaultValue));\n  const labelText = useText(label);\n  const customModelAttribute = getCustomModelAttribute(customModelAttributeId);\n  const {\n    name: customModelAttributeName,\n    validations: {\n      required\n    } = {}\n  } = customModelAttribute || {};\n  const nameAttributeValue = useText(nameAttribute);\n  const validPattern = pattern || null;\n  const validMinlength = minlength || null;\n  const validMaxlength = maxlength || null;\n\n  const validationMessage = validityObject => {\n    if (validityObject.customError && validationPatternMismatch) {\n      return useText(validationPatternMismatch);\n    }\n\n    if (validityObject.valid) {\n      return '';\n    }\n\n    if (validityObject.typeMismatch && validationTypeMismatch) {\n      return useText(validationTypeMismatch);\n    }\n\n    if (validityObject.patternMismatch && validationPatternMismatch) {\n      return useText(validationPatternMismatch);\n    }\n\n    if (validityObject.valueMissing && validationValueMissing) {\n      return useText(validationValueMissing);\n    }\n\n    if (validityObject.tooLong && validationTooLong) {\n      return useText(validationTooLong);\n    }\n\n    if (validityObject.tooShort && validationTooShort) {\n      return useText(validationTooShort);\n    }\n\n    return '';\n  };\n\n  const placeholderText = useText(placeholder);\n\n  const handleValidation = validation => {\n    setErrorState(!validation.valid);\n    const message = validationMessage(validation) || useText(helperText);\n    setHelper(message);\n  };\n\n  const onKeyDown = event => {\n    if (isNumberType && (event.key === '.' || event.key === ',')) {\n      event.preventDefault();\n    }\n  };\n\n  const customPatternValidation = target => {\n    const {\n      value: eventValue,\n      validity\n    } = target;\n\n    if (!pattern) {\n      return validity;\n    }\n\n    const patternRegex = RegExp(`^${pattern}$`);\n    const isValid = patternRegex.test(eventValue);\n    target.setCustomValidity(isValid ? '' : 'Invalid field.');\n    return { ...validity,\n      valid: isValid,\n      patternMismatch: !isValid\n    };\n  };\n\n  const changeHandler = event => {\n    const {\n      target\n    } = event;\n    let {\n      validity: validation\n    } = target;\n    const {\n      value: eventValue\n    } = target;\n\n    if (isNumberType || multiline) {\n      validation = customPatternValidation(target);\n    }\n\n    const numberValue = isNumberType && eventValue && parseInt(eventValue, 10);\n\n    if (afterFirstInvalidation) {\n      handleValidation(validation);\n    }\n\n    setCurrentValue(isNumberType ? numberValue : eventValue);\n  };\n\n  const blurHandler = event => {\n    const {\n      target\n    } = event;\n    let {\n      validity: validation\n    } = target;\n\n    if (isNumberType || multiline) {\n      validation = customPatternValidation(target);\n    }\n\n    setAfterFirstInvalidation(!validation.valid);\n    handleValidation(validation);\n  };\n\n  const invalidHandler = event => {\n    event.preventDefault();\n    const {\n      target: {\n        validity,\n        validity: {\n          valid: isValid\n        }\n      }\n    } = event;\n    setAfterFirstInvalidation(!isValid);\n    handleValidation(validity);\n  };\n\n  B.defineFunction('Clear', () => setCurrentValue(''));\n  B.defineFunction('Disable', () => setIsDisabled(true));\n\n  const handleClickShowPassword = () => {\n    togglePassword(!showPassword);\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  let InputCmp = Input;\n\n  if (variant === 'outlined') {\n    InputCmp = OutlinedInput;\n  } else if (variant === 'filled') {\n    InputCmp = FilledInput;\n  }\n\n  const passwordIcon = showPassword ? 'Visibility' : 'VisibilityOff';\n  const inputIcon = isPasswordType ? passwordIcon : adornmentIcon;\n  const hasIcon = inputIcon && inputIcon !== 'none';\n  const hasAdornment = isPasswordType ? adornment && hasIcon : adornment || hasIcon;\n  const IconCmp = hasIcon && React.createElement(Icons[inputIcon], {\n    fontSize: size\n  });\n  const iconButtonOptions = {\n    edge: adornmentPosition,\n    tabIndex: isDev && -1\n  };\n\n  if (isPasswordType) {\n    iconButtonOptions.ariaLabel = 'toggle password visibility';\n    iconButtonOptions.onClick = handleClickShowPassword;\n    iconButtonOptions.onMouseDown = handleMouseDownPassword;\n  }\n\n  useEffect(() => {\n    if (isDev) {\n      setCurrentValue(useText(defaultValue));\n      setHelper(useText(helperText));\n    }\n  }, [isDev, defaultValue, helperText]);\n  const TextFieldCmp = <FormControl classes={{\n    root: classes.formControl\n  }} variant={variant} size={size} fullWidth={fullWidth} required={required} disabled={isDisabled} margin={margin} error={errorState}>\n        {labelText && !hideLabel && <InputLabel classes={{\n      root: classes.label\n    }}>{labelText}</InputLabel>}\n        <InputCmp name={nameAttributeValue || customModelAttributeName} value={currentValue} type={isDev && type === 'number' || showPassword ? 'text' : type} multiline={multiline} rows={rows} label={labelText} placeholder={placeholderText} onKeyDown={onKeyDown} onChange={changeHandler} onBlur={blurHandler} onInvalid={invalidHandler} startAdornment={hasAdornment && adornmentPosition === 'start' && <InputAdornment position={adornmentPosition}>\n                {hasIcon ? <IconButton {...iconButtonOptions}>{IconCmp}</IconButton> : adornment}\n              </InputAdornment>} endAdornment={hasAdornment && adornmentPosition === 'end' && <InputAdornment position={adornmentPosition}>\n                {hasIcon ? <IconButton {...iconButtonOptions}>{IconCmp}</IconButton> : adornment}\n              </InputAdornment>} inputProps={{\n      pattern: validPattern,\n      minlength: validMinlength,\n      maxlength: validMaxlength,\n      tabIndex: isDev && -1\n    }} />\n        {helper && <FormHelperText classes={{\n      root: classes.helper\n    }}>\n            {helper}\n          </FormHelperText>}\n      </FormControl>;\n  return isDev ? <div className={classes.root}>{TextFieldCmp}</div> : TextFieldCmp;\n})()","styles":"B => t => {\n  const style = new B.Styling(t);\n  return {\n    root: {\n      display: ({\n        options: {\n          fullWidth\n        }\n      }) => fullWidth ? 'block' : 'inline-block',\n      '& > *': {\n        pointerEvents: 'none'\n      }\n    },\n    label: {\n      color: ({\n        options: {\n          labelColor\n        }\n      }) => [style.getColor(labelColor), '!important'],\n      '&.Mui-focused': {\n        color: ({\n          options: {\n            borderFocusColor\n          }\n        }) => [style.getColor(borderFocusColor), '!important']\n      },\n      '&.Mui-error, &.Mui-error .Mui-error': {\n        color: ({\n          options: {\n            errorColor\n          }\n        }) => [style.getColor(errorColor), '!important']\n      },\n      '&.Mui-disabled': {\n        pointerEvents: 'none',\n        opacity: '0.7'\n      }\n    },\n    helper: {\n      color: ({\n        options: {\n          helperColor\n        }\n      }) => [style.getColor(helperColor), '!important'],\n      '&.Mui-error': {\n        color: ({\n          options: {\n            errorColor\n          }\n        }) => [style.getColor(errorColor), '!important']\n      }\n    },\n    formControl: {\n      '& .MuiInputBase-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important'],\n        backgroundColor: ({\n          options: {\n            backgroundColor,\n            variant\n          }\n        }) => variant !== 'standard' && [style.getColor(backgroundColor), '!important'],\n        '&:hover': {\n          '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n            borderColor: ({\n              options: {\n                borderHoverColor\n              }\n            }) => [style.getColor(borderHoverColor), '!important']\n          }\n        },\n        '&.Mui-focused, &.Mui-focused:hover': {\n          '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n            borderColor: ({\n              options: {\n                borderFocusColor\n              }\n            }) => [style.getColor(borderFocusColor), '!important']\n          }\n        },\n        '& fieldset': {\n          top: ({\n            options: {\n              hideLabel\n            }\n          }) => hideLabel ? 0 : null\n        },\n        '& legend': {\n          display: ({\n            options: {\n              hideLabel\n            }\n          }) => hideLabel ? ['none', '!important'] : null\n        },\n        '& input': {\n          '&::placeholder': {\n            color: ({\n              options: {\n                placeholderColor\n              }\n            }) => [style.getColor(placeholderColor), '!important']\n          }\n        },\n        '&.Mui-disabled': {\n          pointerEvents: 'none',\n          opacity: '0.7'\n        }\n      },\n      '& .MuiIconButton-root': {\n        color: ({\n          options: {\n            textColor\n          }\n        }) => [style.getColor(textColor), '!important']\n      },\n      '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n        borderColor: ({\n          options: {\n            borderColor\n          }\n        }) => [style.getColor(borderColor), '!important']\n      },\n      '& .MuiInput-underline, & .MuiFilledInput-underline': {\n        '&::before, &::after': {\n          borderColor: ({\n            options: {\n              borderColor\n            }\n          }) => [style.getColor(borderColor), '!important']\n        },\n        '&:hover': {\n          '&::before, &::after': {\n            borderColor: ({\n              options: {\n                borderHoverColor\n              }\n            }) => [style.getColor(borderHoverColor), '!important']\n          }\n        },\n        '&.Mui-focused::before, &.Mui-focused::after, &.Mui-focused:hover::before, &.Mui-focused:hover::after': {\n          borderColor: ({\n            options: {\n              borderFocusColor\n            }\n          }) => [style.getColor(borderFocusColor), '!important']\n        }\n      },\n      '& .MuiInputBase-root.Mui-error, & .MuiInputBase-root.Mui-error:hover, & .MuiInputBase-root.Mui-error.Mui-focused, & .MuiInputBase-root.Mui-error.Mui-focused:hover': {\n        '& .MuiOutlinedInput-notchedOutline, & .MuiFilledInput-underline, & .MuiInput-underline': {\n          borderColor: ({\n            options: {\n              errorColor\n            }\n          }) => [style.getColor(errorColor), '!important']\n        },\n        '&.MuiInput-underline, &.MuiFilledInput-underline': {\n          '&::before, &::after': {\n            borderColor: ({\n              options: {\n                errorColor\n              }\n            }) => [style.getColor(errorColor), '!important']\n          },\n          '&:hover': {\n            '&::before, &::after': {\n              borderColor: ({\n                options: {\n                  errorColor\n                }\n              }) => [style.getColor(errorColor), '!important']\n            }\n          },\n          '&.Mui-focused::before, &.Mui-focused::after, &.Mui-focused:hover::before, &.Mui-focused:hover::after': {\n            borderColor: ({\n              options: {\n                errorColor\n              }\n            }) => [style.getColor(errorColor), '!important']\n          }\n        }\n      }\n    }\n  };\n}","functions":["Clear","Disable"],"triggers":[]}]
